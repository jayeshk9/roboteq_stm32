
roboteq_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  080056b0  080056b0  000066b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b78  08005b78  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005b78  08005b78  00006b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b80  08005b80  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b80  08005b80  00006b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b84  08005b84  00006b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005b88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001d4  08005d5c  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08005d5c  000073b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059f2  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017fd  00000000  00000000  0000cbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  0000e3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000485  00000000  00000000  0000ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c15  00000000  00000000  0000eeb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007588  00000000  00000000  00026aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f56  00000000  00000000  0002e052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1fa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002858  00000000  00000000  000b1fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b4844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005698 	.word	0x08005698

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005698 	.word	0x08005698

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a90:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a94:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d013      	beq.n	8000ac8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000aa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000aa8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d00b      	beq.n	8000ac8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ab0:	e000      	b.n	8000ab4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ab2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ab4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0f9      	beq.n	8000ab2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000abe:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
	 int DataIdx;
	 for (DataIdx = 0; DataIdx < len; DataIdx++){
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e009      	b.n	8000afa <_write+0x26>
		 ITM_SendChar(*ptr++);
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	60ba      	str	r2, [r7, #8]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ffca 	bl	8000a88 <ITM_SendChar>
	 for (DataIdx = 0; DataIdx < len; DataIdx++){
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	dbf1      	blt.n	8000ae6 <_write+0x12>
	 }
	 return len;
 8000b02:	687b      	ldr	r3, [r7, #4]
 }
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 fb52 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f824 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f000 f8b8 	bl	8000c8c <MX_GPIO_Init>
  MX_CAN_Init();
 8000b1c:	f000 f866 	bl	8000bec <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000b20:	480d      	ldr	r0, [pc, #52]	@ (8000b58 <main+0x4c>)
 8000b22:	f000 fd93 	bl	800164c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b26:	2102      	movs	r1, #2
 8000b28:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <main+0x4c>)
 8000b2a:	f000 ffc3 	bl	8001ab4 <HAL_CAN_ActivateNotification>
//	  HAL_Delay(20000);
//	  roboteq_setMotorSpeed(1, 2, -3000); // Reverse direction at 3000 RPM
//	  HAL_Delay(20000);

	 //POSITION MODE CLOSED
	  roboteq_setMotorPosition(1, 2, 4096);  // Move motor channel 2 to position 10000
 8000b2e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b32:	2102      	movs	r1, #2
 8000b34:	2001      	movs	r0, #1
 8000b36:	f000 f951 	bl	8000ddc <roboteq_setMotorPosition>
	  HAL_Delay(5000);
 8000b3a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b3e:	f000 fb9d 	bl	800127c <HAL_Delay>
//	  roboteq_queryEncoderPosition(1, 2);  // Query Encoder Position
//	  HAL_Delay(1000);

	  roboteq_setMotorPosition(1, 2, -4096);  // Move motor channel 2 to position -5000
 8000b42:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <main+0x50>)
 8000b44:	2102      	movs	r1, #2
 8000b46:	2001      	movs	r0, #1
 8000b48:	f000 f948 	bl	8000ddc <roboteq_setMotorPosition>
	  HAL_Delay(5000);
 8000b4c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b50:	f000 fb94 	bl	800127c <HAL_Delay>
  while (1) {
 8000b54:	bf00      	nop
 8000b56:	e7ea      	b.n	8000b2e <main+0x22>
 8000b58:	200001f0 	.word	0x200001f0
 8000b5c:	fffff000 	.word	0xfffff000

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b090      	sub	sp, #64	@ 0x40
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0318 	add.w	r3, r7, #24
 8000b6a:	2228      	movs	r2, #40	@ 0x28
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 fec6 	bl	8003900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b90:	2301      	movs	r3, #1
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b94:	2302      	movs	r3, #2
 8000b96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b9e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	f107 0318 	add.w	r3, r7, #24
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f001 fc5d 	bl	8002468 <HAL_RCC_OscConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bb4:	f000 f898 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb8:	230f      	movs	r3, #15
 8000bba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 feca 	bl	800296c <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bde:	f000 f883 	bl	8000ce8 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3740      	adds	r7, #64	@ 0x40
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	@ 0x28
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000bf2:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000bf4:	4a24      	ldr	r2, [pc, #144]	@ (8000c88 <MX_CAN_Init+0x9c>)
 8000bf6:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000c0c:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 8000c10:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c3c:	4811      	ldr	r0, [pc, #68]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000c3e:	f000 fb41 	bl	80012c4 <HAL_CAN_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000c48:	f000 f84e 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canFilterConfig;
  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  canFilterConfig.FilterBank = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterIdHigh = 0x0000;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	603b      	str	r3, [r7, #0]
  canFilterConfig.FilterIdLow = 0x0000;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterMaskIdHigh = 0x0000;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterMaskIdLow = 0x0000;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61fb      	str	r3, [r7, #28]

  HAL_CAN_ConfigFilter(&hcan, &canFilterConfig);
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	4803      	ldr	r0, [pc, #12]	@ (8000c84 <MX_CAN_Init+0x98>)
 8000c76:	f000 fc20 	bl	80014ba <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	@ 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001f0 	.word	0x200001f0
 8000c88:	40006400 	.word	0x40006400

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c92:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <MX_GPIO_Init+0x58>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	4a13      	ldr	r2, [pc, #76]	@ (8000ce4 <MX_GPIO_Init+0x58>)
 8000c98:	f043 0320 	orr.w	r3, r3, #32
 8000c9c:	6193      	str	r3, [r2, #24]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <MX_GPIO_Init+0x58>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f003 0320 	and.w	r3, r3, #32
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <MX_GPIO_Init+0x58>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <MX_GPIO_Init+0x58>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <MX_GPIO_Init+0x58>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <MX_GPIO_Init+0x58>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <MX_GPIO_Init+0x58>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	6193      	str	r3, [r2, #24]
 8000cce:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <MX_GPIO_Init+0x58>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <Error_Handler+0x8>

08000cf4 <HAL_CAN_RxFifo0MsgPendingCallback>:
//}


//CLOSED LOOP POSITION
// Callback to handle received messages (Acknowledgement & Debug)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000cfc:	4b30      	ldr	r3, [pc, #192]	@ (8000dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000cfe:	4a31      	ldr	r2, [pc, #196]	@ (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000d00:	2100      	movs	r1, #0
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 fdb5 	bl	8001872 <HAL_CAN_GetRxMessage>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d153      	bne.n	8000db6 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
        // Print raw message
        printf("\n[CAN RX] StdID: 0x%lX DLC: %u | Data: ", (unsigned long)RxHeader.StdId, RxHeader.DLC);
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a2c      	ldr	r2, [pc, #176]	@ (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000d14:	6912      	ldr	r2, [r2, #16]
 8000d16:	4619      	mov	r1, r3
 8000d18:	482b      	ldr	r0, [pc, #172]	@ (8000dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000d1a:	f002 fca1 	bl	8003660 <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e00a      	b.n	8000d3a <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
            printf("0x%02X ", RxData[i]);
 8000d24:	4a26      	ldr	r2, [pc, #152]	@ (8000dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4827      	ldr	r0, [pc, #156]	@ (8000dcc <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000d30:	f002 fc96 	bl	8003660 <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++) {
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	3301      	adds	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b22      	ldr	r3, [pc, #136]	@ (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000d3c:	691a      	ldr	r2, [r3, #16]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8ef      	bhi.n	8000d24 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
        }
        printf("\n");
 8000d44:	200a      	movs	r0, #10
 8000d46:	f002 fc9d 	bl	8003684 <putchar>

        // Check for Encoder Response (Index 0x6064 -> SDO Response 0x580 + Node ID)
        if ((RxHeader.StdId & 0xFF0) == 0x580 && RxHeader.DLC == 8 && RxData[1] == 0x04 && RxData[2] == 0x21) {
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8000d52:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8000d56:	d113      	bne.n	8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 8000d58:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	d10f      	bne.n	8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000d62:	785b      	ldrb	r3, [r3, #1]
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d10b      	bne.n	8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
 8000d68:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000d6a:	789b      	ldrb	r3, [r3, #2]
 8000d6c:	2b21      	cmp	r3, #33	@ 0x21
 8000d6e:	d107      	bne.n	8000d80 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
            int32_t encoder_count;
            memcpy(&encoder_count, &RxData[4], sizeof(int32_t));
 8000d70:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	60bb      	str	r3, [r7, #8]
            printf("[ENCODER] Current Position: %d\n", encoder_count);
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4815      	ldr	r0, [pc, #84]	@ (8000dd0 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000d7c:	f002 fc70 	bl	8003660 <iprintf>
        }

        // Check for SDO Acknowledgement (0x580 + Node ID)
        if ((RxHeader.StdId & 0xFF0) == 0x580) {
 8000d80:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8000d88:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8000d8c:	d113      	bne.n	8000db6 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
            if (RxData[0] == 0x60) {
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b60      	cmp	r3, #96	@ 0x60
 8000d94:	d108      	bne.n	8000da8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
                printf("[ACK] SDO Command Acknowledged by Node %d\n", RxHeader.StdId - 0x580);
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f5a3 63b0 	sub.w	r3, r3, #1408	@ 0x580
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000da2:	f002 fc5d 	bl	8003660 <iprintf>
            } else if (RxData[0] == 0x80) {
                printf("[ERROR] SDO Transfer Failed!\n");
            }
        }
    }
}
 8000da6:	e006      	b.n	8000db6 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
            } else if (RxData[0] == 0x80) {
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b80      	cmp	r3, #128	@ 0x80
 8000dae:	d102      	bne.n	8000db6 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
                printf("[ERROR] SDO Transfer Failed!\n");
 8000db0:	4809      	ldr	r0, [pc, #36]	@ (8000dd8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8000db2:	f002 fcc5 	bl	8003740 <puts>
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000254 	.word	0x20000254
 8000dc4:	20000230 	.word	0x20000230
 8000dc8:	080056b0 	.word	0x080056b0
 8000dcc:	080056d8 	.word	0x080056d8
 8000dd0:	080056e0 	.word	0x080056e0
 8000dd4:	08005700 	.word	0x08005700
 8000dd8:	0800572c 	.word	0x0800572c

08000ddc <roboteq_setMotorPosition>:


//Function to set motor absolute position in Closed-Loop Count Position Mode
void roboteq_setMotorPosition(uint8_t node_id, uint8_t channel, int32_t position) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	603a      	str	r2, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	460b      	mov	r3, r1
 8000dea:	71bb      	strb	r3, [r7, #6]
    if (position < -2147483648 || position > 2147483647) {
        printf("[ERROR] Position out of range! Must be between -2147483648 and 2147483647.\n");
        return;
    }

    TxHeader.StdId = 0x600 + node_id;  // SDO Request
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <roboteq_setMotorPosition+0x84>)
 8000df6:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 8000df8:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <roboteq_setMotorPosition+0x84>)
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <roboteq_setMotorPosition+0x84>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8000e04:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <roboteq_setMotorPosition+0x84>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]

    memset(TxData, 0, sizeof(TxData));
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4815      	ldr	r0, [pc, #84]	@ (8000e64 <roboteq_setMotorPosition+0x88>)
 8000e10:	f002 fd76 	bl	8003900 <memset>

    TxData[0] = 0x23;  // Write Command
 8000e14:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <roboteq_setMotorPosition+0x88>)
 8000e16:	2223      	movs	r2, #35	@ 0x23
 8000e18:	701a      	strb	r2, [r3, #0]
    TxData[1] = 0x01;  // Index LSB (0x2001 for MOTPOS)
 8000e1a:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <roboteq_setMotorPosition+0x88>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0x20;  // Index MSB
 8000e20:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <roboteq_setMotorPosition+0x88>)
 8000e22:	2220      	movs	r2, #32
 8000e24:	709a      	strb	r2, [r3, #2]
    TxData[3] = channel;  // Motor Channel (1 or 2)
 8000e26:	4a0f      	ldr	r2, [pc, #60]	@ (8000e64 <roboteq_setMotorPosition+0x88>)
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	70d3      	strb	r3, [r2, #3]

    memcpy(&TxData[4], &position, sizeof(int32_t));  // Copy position value
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <roboteq_setMotorPosition+0x88>)
 8000e30:	6053      	str	r3, [r2, #4]

    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <roboteq_setMotorPosition+0x8c>)
 8000e34:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <roboteq_setMotorPosition+0x88>)
 8000e36:	490a      	ldr	r1, [pc, #40]	@ (8000e60 <roboteq_setMotorPosition+0x84>)
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <roboteq_setMotorPosition+0x90>)
 8000e3a:	f000 fc4b 	bl	80016d4 <HAL_CAN_AddTxMessage>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d106      	bne.n	8000e52 <roboteq_setMotorPosition+0x76>
        printf("[CAN TX] Set Motor Position - Channel: %d, Position: %d\n", channel, position);
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4809      	ldr	r0, [pc, #36]	@ (8000e70 <roboteq_setMotorPosition+0x94>)
 8000e4c:	f002 fc08 	bl	8003660 <iprintf>
 8000e50:	e002      	b.n	8000e58 <roboteq_setMotorPosition+0x7c>
    } else {
        printf("[ERROR] Failed to send Motor Position Command\n");
 8000e52:	4808      	ldr	r0, [pc, #32]	@ (8000e74 <roboteq_setMotorPosition+0x98>)
 8000e54:	f002 fc74 	bl	8003740 <puts>
    }
}
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000218 	.word	0x20000218
 8000e64:	2000024c 	.word	0x2000024c
 8000e68:	2000025c 	.word	0x2000025c
 8000e6c:	200001f0 	.word	0x200001f0
 8000e70:	0800574c 	.word	0x0800574c
 8000e74:	08005788 	.word	0x08005788

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <HAL_MspInit+0x5c>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a14      	ldr	r2, [pc, #80]	@ (8000ed4 <HAL_MspInit+0x5c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <HAL_MspInit+0x5c>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_MspInit+0x5c>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed4 <HAL_MspInit+0x5c>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <HAL_MspInit+0x5c>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_MspInit+0x60>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <HAL_MspInit+0x60>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010000 	.word	0x40010000

08000edc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a24      	ldr	r2, [pc, #144]	@ (8000f88 <HAL_CAN_MspInit+0xac>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d141      	bne.n	8000f80 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000efc:	4b23      	ldr	r3, [pc, #140]	@ (8000f8c <HAL_CAN_MspInit+0xb0>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	4a22      	ldr	r2, [pc, #136]	@ (8000f8c <HAL_CAN_MspInit+0xb0>)
 8000f02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f06:	61d3      	str	r3, [r2, #28]
 8000f08:	4b20      	ldr	r3, [pc, #128]	@ (8000f8c <HAL_CAN_MspInit+0xb0>)
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <HAL_CAN_MspInit+0xb0>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <HAL_CAN_MspInit+0xb0>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <HAL_CAN_MspInit+0xb0>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4813      	ldr	r0, [pc, #76]	@ (8000f90 <HAL_CAN_MspInit+0xb4>)
 8000f42:	f001 f90d 	bl	8002160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <HAL_CAN_MspInit+0xb4>)
 8000f5c:	f001 f900 	bl	8002160 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2014      	movs	r0, #20
 8000f66:	f001 f8c4 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000f6a:	2014      	movs	r0, #20
 8000f6c:	f001 f8dd 	bl	800212a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2015      	movs	r0, #21
 8000f76:	f001 f8bc 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f7a:	2015      	movs	r0, #21
 8000f7c:	f001 f8d5 	bl	800212a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000f80:	bf00      	nop
 8000f82:	3720      	adds	r7, #32
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40006400 	.word	0x40006400
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010800 	.word	0x40010800

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <NMI_Handler+0x4>

08000f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <MemManage_Handler+0x4>

08000fac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 f92e 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ff2:	f000 fd84 	bl	8001afe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001f0 	.word	0x200001f0

08001000 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <CAN1_RX1_IRQHandler+0x10>)
 8001006:	f000 fd7a 	bl	8001afe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200001f0 	.word	0x200001f0

08001014 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return 1;
 8001018:	2301      	movs	r3, #1
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <_kill>:

int _kill(int pid, int sig)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800102c:	f002 fcba 	bl	80039a4 <__errno>
 8001030:	4603      	mov	r3, r0
 8001032:	2216      	movs	r2, #22
 8001034:	601a      	str	r2, [r3, #0]
  return -1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_exit>:

void _exit (int status)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800104a:	f04f 31ff 	mov.w	r1, #4294967295
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffe7 	bl	8001022 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <_exit+0x12>

08001058 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	e00a      	b.n	8001080 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800106a:	f3af 8000 	nop.w
 800106e:	4601      	mov	r1, r0
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	60ba      	str	r2, [r7, #8]
 8001076:	b2ca      	uxtb	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbf0      	blt.n	800106a <_read+0x12>
  }

  return len;
 8001088:	687b      	ldr	r3, [r7, #4]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b8:	605a      	str	r2, [r3, #4]
  return 0;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <_isatty>:

int _isatty(int file)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
	...

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	@ (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	@ (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f002 fc3e 	bl	80039a4 <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	@ (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20005000 	.word	0x20005000
 8001154:	00000400 	.word	0x00000400
 8001158:	20000260 	.word	0x20000260
 800115c:	200003b8 	.word	0x200003b8

08001160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800116c:	f7ff fff8 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480b      	ldr	r0, [pc, #44]	@ (80011a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001172:	490c      	ldr	r1, [pc, #48]	@ (80011a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001174:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a09      	ldr	r2, [pc, #36]	@ (80011ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001188:	4c09      	ldr	r4, [pc, #36]	@ (80011b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001196:	f002 fc0b 	bl	80039b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119a:	f7ff fcb7 	bl	8000b0c <main>
  bx lr
 800119e:	4770      	bx	lr
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80011a8:	08005b88 	.word	0x08005b88
  ldr r2, =_sbss
 80011ac:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80011b0:	200003b4 	.word	0x200003b4

080011b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_2_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <HAL_Init+0x28>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <HAL_Init+0x28>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 ff87 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	200f      	movs	r0, #15
 80011d0:	f000 f808 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff fe50 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 ff9f 	bl	8002146 <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 ff67 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	@ (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000000 	.word	0x20000000
 800123c:	20000008 	.word	0x20000008
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_IncTick+0x1c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <HAL_IncTick+0x20>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a03      	ldr	r2, [pc, #12]	@ (8001264 <HAL_IncTick+0x20>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	20000008 	.word	0x20000008
 8001264:	20000264 	.word	0x20000264

08001268 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b02      	ldr	r3, [pc, #8]	@ (8001278 <HAL_GetTick+0x10>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	20000264 	.word	0x20000264

0800127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff fff0 	bl	8001268 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001294:	d005      	beq.n	80012a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <HAL_Delay+0x44>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a2:	bf00      	nop
 80012a4:	f7ff ffe0 	bl	8001268 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8f7      	bhi.n	80012a4 <HAL_Delay+0x28>
  {
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e0ed      	b.n	80014b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fdfa 	bl	8000edc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f8:	f7ff ffb6 	bl	8001268 <HAL_GetTick>
 80012fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012fe:	e012      	b.n	8001326 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001300:	f7ff ffb2 	bl	8001268 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b0a      	cmp	r3, #10
 800130c:	d90b      	bls.n	8001326 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001312:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2205      	movs	r2, #5
 800131e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e0c5      	b.n	80014b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0e5      	beq.n	8001300 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0202 	bic.w	r2, r2, #2
 8001342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001344:	f7ff ff90 	bl	8001268 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800134a:	e012      	b.n	8001372 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800134c:	f7ff ff8c 	bl	8001268 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b0a      	cmp	r3, #10
 8001358:	d90b      	bls.n	8001372 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2205      	movs	r2, #5
 800136a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e09f      	b.n	80014b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1e5      	bne.n	800134c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7e1b      	ldrb	r3, [r3, #24]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d108      	bne.n	800139a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e007      	b.n	80013aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7e5b      	ldrb	r3, [r3, #25]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d108      	bne.n	80013c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	e007      	b.n	80013d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7e9b      	ldrb	r3, [r3, #26]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d108      	bne.n	80013ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0220 	orr.w	r2, r2, #32
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e007      	b.n	80013fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0220 	bic.w	r2, r2, #32
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7edb      	ldrb	r3, [r3, #27]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0210 	bic.w	r2, r2, #16
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e007      	b.n	8001428 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0210 	orr.w	r2, r2, #16
 8001426:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7f1b      	ldrb	r3, [r3, #28]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d108      	bne.n	8001442 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0208 	orr.w	r2, r2, #8
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	e007      	b.n	8001452 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0208 	bic.w	r2, r2, #8
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7f5b      	ldrb	r3, [r3, #29]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d108      	bne.n	800146c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f042 0204 	orr.w	r2, r2, #4
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	e007      	b.n	800147c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0204 	bic.w	r2, r2, #4
 800147a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	ea42 0103 	orr.w	r1, r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	1e5a      	subs	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b087      	sub	sp, #28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014d2:	7cfb      	ldrb	r3, [r7, #19]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d003      	beq.n	80014e0 <HAL_CAN_ConfigFilter+0x26>
 80014d8:	7cfb      	ldrb	r3, [r7, #19]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	f040 80aa 	bne.w	8001634 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014e6:	f043 0201 	orr.w	r2, r3, #1
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	f003 031f 	and.w	r3, r3, #31
 80014f8:	2201      	movs	r2, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d123      	bne.n	8001562 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43db      	mvns	r3, r3
 8001524:	401a      	ands	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800153c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3248      	adds	r2, #72	@ 0x48
 8001542:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001556:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001558:	6979      	ldr	r1, [r7, #20]
 800155a:	3348      	adds	r3, #72	@ 0x48
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	440b      	add	r3, r1
 8001560:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d122      	bne.n	80015b0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	431a      	orrs	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800158a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3248      	adds	r2, #72	@ 0x48
 8001590:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015a6:	6979      	ldr	r1, [r7, #20]
 80015a8:	3348      	adds	r3, #72	@ 0x48
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80015ca:	e007      	b.n	80015dc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d109      	bne.n	80015f8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80015f6:	e007      	b.n	8001608 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	431a      	orrs	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d107      	bne.n	8001620 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	431a      	orrs	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001626:	f023 0201 	bic.w	r2, r3, #1
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	e006      	b.n	8001642 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
  }
}
 8001642:	4618      	mov	r0, r3
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d12e      	bne.n	80016be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2202      	movs	r2, #2
 8001664:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001678:	f7ff fdf6 	bl	8001268 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800167e:	e012      	b.n	80016a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001680:	f7ff fdf2 	bl	8001268 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b0a      	cmp	r3, #10
 800168c:	d90b      	bls.n	80016a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2205      	movs	r2, #5
 800169e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e012      	b.n	80016cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1e5      	bne.n	8001680 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e006      	b.n	80016cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
  }
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	@ 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016f2:	7ffb      	ldrb	r3, [r7, #31]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d003      	beq.n	8001700 <HAL_CAN_AddTxMessage+0x2c>
 80016f8:	7ffb      	ldrb	r3, [r7, #31]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	f040 80ad 	bne.w	800185a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10a      	bne.n	8001720 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001710:	2b00      	cmp	r3, #0
 8001712:	d105      	bne.n	8001720 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8095 	beq.w	800184a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	0e1b      	lsrs	r3, r3, #24
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800172a:	2201      	movs	r2, #1
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10d      	bne.n	8001758 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001746:	68f9      	ldr	r1, [r7, #12]
 8001748:	6809      	ldr	r1, [r1, #0]
 800174a:	431a      	orrs	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3318      	adds	r3, #24
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	440b      	add	r3, r1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e00f      	b.n	8001778 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001762:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001768:	68f9      	ldr	r1, [r7, #12]
 800176a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800176c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3318      	adds	r3, #24
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	440b      	add	r3, r1
 8001776:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3318      	adds	r3, #24
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	440b      	add	r3, r1
 8001788:	3304      	adds	r3, #4
 800178a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	7d1b      	ldrb	r3, [r3, #20]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d111      	bne.n	80017b8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3318      	adds	r3, #24
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	4413      	add	r3, r2
 80017a0:	3304      	adds	r3, #4
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	6811      	ldr	r1, [r2, #0]
 80017a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3318      	adds	r3, #24
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	440b      	add	r3, r1
 80017b4:	3304      	adds	r3, #4
 80017b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3307      	adds	r3, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	061a      	lsls	r2, r3, #24
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3306      	adds	r3, #6
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	041b      	lsls	r3, r3, #16
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3305      	adds	r3, #5
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	4313      	orrs	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	3204      	adds	r2, #4
 80017d8:	7812      	ldrb	r2, [r2, #0]
 80017da:	4610      	mov	r0, r2
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	6811      	ldr	r1, [r2, #0]
 80017e0:	ea43 0200 	orr.w	r2, r3, r0
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	440b      	add	r3, r1
 80017ea:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80017ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3303      	adds	r3, #3
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	061a      	lsls	r2, r3, #24
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3302      	adds	r3, #2
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	041b      	lsls	r3, r3, #16
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	4313      	orrs	r3, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	7812      	ldrb	r2, [r2, #0]
 8001810:	4610      	mov	r0, r2
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	6811      	ldr	r1, [r2, #0]
 8001816:	ea43 0200 	orr.w	r2, r3, r0
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	440b      	add	r3, r1
 8001820:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001824:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3318      	adds	r3, #24
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	4413      	add	r3, r2
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	6811      	ldr	r1, [r2, #0]
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3318      	adds	r3, #24
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	440b      	add	r3, r1
 8001844:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e00e      	b.n	8001868 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e006      	b.n	8001868 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
  }
}
 8001868:	4618      	mov	r0, r3
 800186a:	3724      	adds	r7, #36	@ 0x24
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001872:	b480      	push	{r7}
 8001874:	b087      	sub	sp, #28
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001886:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d003      	beq.n	8001896 <HAL_CAN_GetRxMessage+0x24>
 800188e:	7dfb      	ldrb	r3, [r7, #23]
 8001890:	2b02      	cmp	r3, #2
 8001892:	f040 8103 	bne.w	8001a9c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10e      	bne.n	80018ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d116      	bne.n	80018d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0f7      	b.n	8001aaa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0e8      	b.n	8001aaa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	331b      	adds	r3, #27
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	4413      	add	r3, r2
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0204 	and.w	r2, r3, #4
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10c      	bne.n	8001910 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	331b      	adds	r3, #27
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	4413      	add	r3, r2
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0d5b      	lsrs	r3, r3, #21
 8001906:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e00b      	b.n	8001928 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	331b      	adds	r3, #27
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	4413      	add	r3, r2
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	331b      	adds	r3, #27
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	4413      	add	r3, r2
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0202 	and.w	r2, r3, #2
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	331b      	adds	r3, #27
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	3304      	adds	r3, #4
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2208      	movs	r2, #8
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	e00b      	b.n	8001976 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	331b      	adds	r3, #27
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4413      	add	r3, r2
 800196a:	3304      	adds	r3, #4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 020f 	and.w	r2, r3, #15
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	331b      	adds	r3, #27
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	4413      	add	r3, r2
 8001982:	3304      	adds	r3, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	b2da      	uxtb	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	331b      	adds	r3, #27
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	4413      	add	r3, r2
 800199a:	3304      	adds	r3, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	4413      	add	r3, r2
 80019c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0a1a      	lsrs	r2, r3, #8
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	3301      	adds	r3, #1
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4413      	add	r3, r2
 80019e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	0c1a      	lsrs	r2, r3, #16
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	3302      	adds	r3, #2
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0e1a      	lsrs	r2, r3, #24
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	3303      	adds	r3, #3
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	0a1a      	lsrs	r2, r3, #8
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	3305      	adds	r3, #5
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	011b      	lsls	r3, r3, #4
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0c1a      	lsrs	r2, r3, #16
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3306      	adds	r3, #6
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4413      	add	r3, r2
 8001a60:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0e1a      	lsrs	r2, r3, #24
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	3307      	adds	r3, #7
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d108      	bne.n	8001a88 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0220 	orr.w	r2, r2, #32
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	e007      	b.n	8001a98 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691a      	ldr	r2, [r3, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0220 	orr.w	r2, r2, #32
 8001a96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e006      	b.n	8001aaa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d002      	beq.n	8001ad2 <HAL_CAN_ActivateNotification+0x1e>
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d109      	bne.n	8001ae6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6959      	ldr	r1, [r3, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e006      	b.n	8001af4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b08a      	sub	sp, #40	@ 0x28
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d07c      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d023      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2201      	movs	r2, #1
 8001b54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f983 	bl	8001e6c <HAL_CAN_TxMailbox0CompleteCallback>
 8001b66:	e016      	b.n	8001b96 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b7a:	e00c      	b.n	8001b96 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b8e:	e002      	b.n	8001b96 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f986 	bl	8001ea2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d024      	beq.n	8001bea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f962 	bl	8001e7e <HAL_CAN_TxMailbox1CompleteCallback>
 8001bba:	e016      	b.n	8001bea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bce:	e00c      	b.n	8001bea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be2:	e002      	b.n	8001bea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f965 	bl	8001eb4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d024      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bfc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f941 	bl	8001e90 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c0e:	e016      	b.n	8001c3e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c22:	e00c      	b.n	8001c3e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d004      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c36:	e002      	b.n	8001c3e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f944 	bl	8001ec6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00c      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d007      	beq.n	8001c62 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2210      	movs	r2, #16
 8001c60:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00b      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f92a 	bl	8001ed8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff f829 	bl	8000cf4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00c      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00b      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2208      	movs	r2, #8
 8001ce0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f90a 	bl	8001efc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8f2 	bl	8001eea <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00b      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2210      	movs	r2, #16
 8001d20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8f3 	bl	8001f0e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00b      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2208      	movs	r2, #8
 8001d42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8eb 	bl	8001f20 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d07b      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d072      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d043      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d03e      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dcc:	2b60      	cmp	r3, #96	@ 0x60
 8001dce:	d02b      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x32a>
 8001dd0:	2b60      	cmp	r3, #96	@ 0x60
 8001dd2:	d82e      	bhi.n	8001e32 <HAL_CAN_IRQHandler+0x334>
 8001dd4:	2b50      	cmp	r3, #80	@ 0x50
 8001dd6:	d022      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x320>
 8001dd8:	2b50      	cmp	r3, #80	@ 0x50
 8001dda:	d82a      	bhi.n	8001e32 <HAL_CAN_IRQHandler+0x334>
 8001ddc:	2b40      	cmp	r3, #64	@ 0x40
 8001dde:	d019      	beq.n	8001e14 <HAL_CAN_IRQHandler+0x316>
 8001de0:	2b40      	cmp	r3, #64	@ 0x40
 8001de2:	d826      	bhi.n	8001e32 <HAL_CAN_IRQHandler+0x334>
 8001de4:	2b30      	cmp	r3, #48	@ 0x30
 8001de6:	d010      	beq.n	8001e0a <HAL_CAN_IRQHandler+0x30c>
 8001de8:	2b30      	cmp	r3, #48	@ 0x30
 8001dea:	d822      	bhi.n	8001e32 <HAL_CAN_IRQHandler+0x334>
 8001dec:	2b10      	cmp	r3, #16
 8001dee:	d002      	beq.n	8001df6 <HAL_CAN_IRQHandler+0x2f8>
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d005      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001df4:	e01d      	b.n	8001e32 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	f043 0308 	orr.w	r3, r3, #8
 8001dfc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dfe:	e019      	b.n	8001e34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	f043 0310 	orr.w	r3, r3, #16
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e08:	e014      	b.n	8001e34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	f043 0320 	orr.w	r3, r3, #32
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e12:	e00f      	b.n	8001e34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e1c:	e00a      	b.n	8001e34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e26:	e005      	b.n	8001e34 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e30:	e000      	b.n	8001e34 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e32:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e42:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f867 	bl	8001f32 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e64:	bf00      	nop
 8001e66:	3728      	adds	r7, #40	@ 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <__NVIC_SetPriorityGrouping>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f76:	4a04      	ldr	r2, [pc, #16]	@ (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60d3      	str	r3, [r2, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_GetPriorityGrouping>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4906      	ldr	r1, [pc, #24]	@ (8001fdc <__NVIC_EnableIRQ+0x34>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	e000e100 	.word	0xe000e100

08001fe0 <__NVIC_SetPriority>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	6039      	str	r1, [r7, #0]
 8001fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db0a      	blt.n	800200a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	490c      	ldr	r1, [pc, #48]	@ (800202c <__NVIC_SetPriority+0x4c>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	0112      	lsls	r2, r2, #4
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	440b      	add	r3, r1
 8002004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002008:	e00a      	b.n	8002020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4908      	ldr	r1, [pc, #32]	@ (8002030 <__NVIC_SetPriority+0x50>)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	3b04      	subs	r3, #4
 8002018:	0112      	lsls	r2, r2, #4
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	440b      	add	r3, r1
 800201e:	761a      	strb	r2, [r3, #24]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <NVIC_EncodePriority>:
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	@ 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f1c3 0307 	rsb	r3, r3, #7
 800204e:	2b04      	cmp	r3, #4
 8002050:	bf28      	it	cs
 8002052:	2304      	movcs	r3, #4
 8002054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3304      	adds	r3, #4
 800205a:	2b06      	cmp	r3, #6
 800205c:	d902      	bls.n	8002064 <NVIC_EncodePriority+0x30>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3b03      	subs	r3, #3
 8002062:	e000      	b.n	8002066 <NVIC_EncodePriority+0x32>
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	401a      	ands	r2, r3
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43d9      	mvns	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	4313      	orrs	r3, r2
}
 800208e:	4618      	mov	r0, r3
 8002090:	3724      	adds	r7, #36	@ 0x24
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <SysTick_Config>:
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff90 	bl	8001fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff2d 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff42 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff90 	bl	8002034 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5f 	bl	8001fe0 <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff35 	bl	8001fa8 <__NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffa2 	bl	8002098 <SysTick_Config>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002160:	b480      	push	{r7}
 8002162:	b08b      	sub	sp, #44	@ 0x2c
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800216e:	2300      	movs	r3, #0
 8002170:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002172:	e169      	b.n	8002448 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002174:	2201      	movs	r2, #1
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	429a      	cmp	r2, r3
 800218e:	f040 8158 	bne.w	8002442 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a9a      	ldr	r2, [pc, #616]	@ (8002400 <HAL_GPIO_Init+0x2a0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d05e      	beq.n	800225a <HAL_GPIO_Init+0xfa>
 800219c:	4a98      	ldr	r2, [pc, #608]	@ (8002400 <HAL_GPIO_Init+0x2a0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d875      	bhi.n	800228e <HAL_GPIO_Init+0x12e>
 80021a2:	4a98      	ldr	r2, [pc, #608]	@ (8002404 <HAL_GPIO_Init+0x2a4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d058      	beq.n	800225a <HAL_GPIO_Init+0xfa>
 80021a8:	4a96      	ldr	r2, [pc, #600]	@ (8002404 <HAL_GPIO_Init+0x2a4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d86f      	bhi.n	800228e <HAL_GPIO_Init+0x12e>
 80021ae:	4a96      	ldr	r2, [pc, #600]	@ (8002408 <HAL_GPIO_Init+0x2a8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d052      	beq.n	800225a <HAL_GPIO_Init+0xfa>
 80021b4:	4a94      	ldr	r2, [pc, #592]	@ (8002408 <HAL_GPIO_Init+0x2a8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d869      	bhi.n	800228e <HAL_GPIO_Init+0x12e>
 80021ba:	4a94      	ldr	r2, [pc, #592]	@ (800240c <HAL_GPIO_Init+0x2ac>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d04c      	beq.n	800225a <HAL_GPIO_Init+0xfa>
 80021c0:	4a92      	ldr	r2, [pc, #584]	@ (800240c <HAL_GPIO_Init+0x2ac>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d863      	bhi.n	800228e <HAL_GPIO_Init+0x12e>
 80021c6:	4a92      	ldr	r2, [pc, #584]	@ (8002410 <HAL_GPIO_Init+0x2b0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d046      	beq.n	800225a <HAL_GPIO_Init+0xfa>
 80021cc:	4a90      	ldr	r2, [pc, #576]	@ (8002410 <HAL_GPIO_Init+0x2b0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d85d      	bhi.n	800228e <HAL_GPIO_Init+0x12e>
 80021d2:	2b12      	cmp	r3, #18
 80021d4:	d82a      	bhi.n	800222c <HAL_GPIO_Init+0xcc>
 80021d6:	2b12      	cmp	r3, #18
 80021d8:	d859      	bhi.n	800228e <HAL_GPIO_Init+0x12e>
 80021da:	a201      	add	r2, pc, #4	@ (adr r2, 80021e0 <HAL_GPIO_Init+0x80>)
 80021dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e0:	0800225b 	.word	0x0800225b
 80021e4:	08002235 	.word	0x08002235
 80021e8:	08002247 	.word	0x08002247
 80021ec:	08002289 	.word	0x08002289
 80021f0:	0800228f 	.word	0x0800228f
 80021f4:	0800228f 	.word	0x0800228f
 80021f8:	0800228f 	.word	0x0800228f
 80021fc:	0800228f 	.word	0x0800228f
 8002200:	0800228f 	.word	0x0800228f
 8002204:	0800228f 	.word	0x0800228f
 8002208:	0800228f 	.word	0x0800228f
 800220c:	0800228f 	.word	0x0800228f
 8002210:	0800228f 	.word	0x0800228f
 8002214:	0800228f 	.word	0x0800228f
 8002218:	0800228f 	.word	0x0800228f
 800221c:	0800228f 	.word	0x0800228f
 8002220:	0800228f 	.word	0x0800228f
 8002224:	0800223d 	.word	0x0800223d
 8002228:	08002251 	.word	0x08002251
 800222c:	4a79      	ldr	r2, [pc, #484]	@ (8002414 <HAL_GPIO_Init+0x2b4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002232:	e02c      	b.n	800228e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	623b      	str	r3, [r7, #32]
          break;
 800223a:	e029      	b.n	8002290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	3304      	adds	r3, #4
 8002242:	623b      	str	r3, [r7, #32]
          break;
 8002244:	e024      	b.n	8002290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	3308      	adds	r3, #8
 800224c:	623b      	str	r3, [r7, #32]
          break;
 800224e:	e01f      	b.n	8002290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	330c      	adds	r3, #12
 8002256:	623b      	str	r3, [r7, #32]
          break;
 8002258:	e01a      	b.n	8002290 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d102      	bne.n	8002268 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002262:	2304      	movs	r3, #4
 8002264:	623b      	str	r3, [r7, #32]
          break;
 8002266:	e013      	b.n	8002290 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d105      	bne.n	800227c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002270:	2308      	movs	r3, #8
 8002272:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	611a      	str	r2, [r3, #16]
          break;
 800227a:	e009      	b.n	8002290 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800227c:	2308      	movs	r3, #8
 800227e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	615a      	str	r2, [r3, #20]
          break;
 8002286:	e003      	b.n	8002290 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
          break;
 800228c:	e000      	b.n	8002290 <HAL_GPIO_Init+0x130>
          break;
 800228e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2bff      	cmp	r3, #255	@ 0xff
 8002294:	d801      	bhi.n	800229a <HAL_GPIO_Init+0x13a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	e001      	b.n	800229e <HAL_GPIO_Init+0x13e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3304      	adds	r3, #4
 800229e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2bff      	cmp	r3, #255	@ 0xff
 80022a4:	d802      	bhi.n	80022ac <HAL_GPIO_Init+0x14c>
 80022a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	e002      	b.n	80022b2 <HAL_GPIO_Init+0x152>
 80022ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ae:	3b08      	subs	r3, #8
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	210f      	movs	r1, #15
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	401a      	ands	r2, r3
 80022c4:	6a39      	ldr	r1, [r7, #32]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	431a      	orrs	r2, r3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80b1 	beq.w	8002442 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002418 <HAL_GPIO_Init+0x2b8>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a4c      	ldr	r2, [pc, #304]	@ (8002418 <HAL_GPIO_Init+0x2b8>)
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	6193      	str	r3, [r2, #24]
 80022ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002418 <HAL_GPIO_Init+0x2b8>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022f8:	4a48      	ldr	r2, [pc, #288]	@ (800241c <HAL_GPIO_Init+0x2bc>)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	3302      	adds	r3, #2
 8002300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002304:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a40      	ldr	r2, [pc, #256]	@ (8002420 <HAL_GPIO_Init+0x2c0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d013      	beq.n	800234c <HAL_GPIO_Init+0x1ec>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a3f      	ldr	r2, [pc, #252]	@ (8002424 <HAL_GPIO_Init+0x2c4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d00d      	beq.n	8002348 <HAL_GPIO_Init+0x1e8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a3e      	ldr	r2, [pc, #248]	@ (8002428 <HAL_GPIO_Init+0x2c8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d007      	beq.n	8002344 <HAL_GPIO_Init+0x1e4>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a3d      	ldr	r2, [pc, #244]	@ (800242c <HAL_GPIO_Init+0x2cc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d101      	bne.n	8002340 <HAL_GPIO_Init+0x1e0>
 800233c:	2303      	movs	r3, #3
 800233e:	e006      	b.n	800234e <HAL_GPIO_Init+0x1ee>
 8002340:	2304      	movs	r3, #4
 8002342:	e004      	b.n	800234e <HAL_GPIO_Init+0x1ee>
 8002344:	2302      	movs	r3, #2
 8002346:	e002      	b.n	800234e <HAL_GPIO_Init+0x1ee>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_GPIO_Init+0x1ee>
 800234c:	2300      	movs	r3, #0
 800234e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002350:	f002 0203 	and.w	r2, r2, #3
 8002354:	0092      	lsls	r2, r2, #2
 8002356:	4093      	lsls	r3, r2
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800235e:	492f      	ldr	r1, [pc, #188]	@ (800241c <HAL_GPIO_Init+0x2bc>)
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	3302      	adds	r3, #2
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002378:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	492c      	ldr	r1, [pc, #176]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	608b      	str	r3, [r1, #8]
 8002384:	e006      	b.n	8002394 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002386:	4b2a      	ldr	r3, [pc, #168]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	43db      	mvns	r3, r3
 800238e:	4928      	ldr	r1, [pc, #160]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 8002390:	4013      	ands	r3, r2
 8002392:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023a0:	4b23      	ldr	r3, [pc, #140]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	4922      	ldr	r1, [pc, #136]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60cb      	str	r3, [r1, #12]
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ae:	4b20      	ldr	r3, [pc, #128]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	491e      	ldr	r1, [pc, #120]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 80023b8:	4013      	ands	r3, r2
 80023ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023c8:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4918      	ldr	r1, [pc, #96]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
 80023d4:	e006      	b.n	80023e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023d6:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	43db      	mvns	r3, r3
 80023de:	4914      	ldr	r1, [pc, #80]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d021      	beq.n	8002434 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	490e      	ldr	r1, [pc, #56]	@ (8002430 <HAL_GPIO_Init+0x2d0>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	600b      	str	r3, [r1, #0]
 80023fc:	e021      	b.n	8002442 <HAL_GPIO_Init+0x2e2>
 80023fe:	bf00      	nop
 8002400:	10320000 	.word	0x10320000
 8002404:	10310000 	.word	0x10310000
 8002408:	10220000 	.word	0x10220000
 800240c:	10210000 	.word	0x10210000
 8002410:	10120000 	.word	0x10120000
 8002414:	10110000 	.word	0x10110000
 8002418:	40021000 	.word	0x40021000
 800241c:	40010000 	.word	0x40010000
 8002420:	40010800 	.word	0x40010800
 8002424:	40010c00 	.word	0x40010c00
 8002428:	40011000 	.word	0x40011000
 800242c:	40011400 	.word	0x40011400
 8002430:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_GPIO_Init+0x304>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	43db      	mvns	r3, r3
 800243c:	4909      	ldr	r1, [pc, #36]	@ (8002464 <HAL_GPIO_Init+0x304>)
 800243e:	4013      	ands	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	3301      	adds	r3, #1
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	f47f ae8e 	bne.w	8002174 <HAL_GPIO_Init+0x14>
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	372c      	adds	r7, #44	@ 0x2c
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e272      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 8087 	beq.w	8002596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002488:	4b92      	ldr	r3, [pc, #584]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 030c 	and.w	r3, r3, #12
 8002490:	2b04      	cmp	r3, #4
 8002492:	d00c      	beq.n	80024ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002494:	4b8f      	ldr	r3, [pc, #572]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d112      	bne.n	80024c6 <HAL_RCC_OscConfig+0x5e>
 80024a0:	4b8c      	ldr	r3, [pc, #560]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ac:	d10b      	bne.n	80024c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ae:	4b89      	ldr	r3, [pc, #548]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d06c      	beq.n	8002594 <HAL_RCC_OscConfig+0x12c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d168      	bne.n	8002594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e24c      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x76>
 80024d0:	4b80      	ldr	r3, [pc, #512]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a7f      	ldr	r2, [pc, #508]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	e02e      	b.n	800253c <HAL_RCC_OscConfig+0xd4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x98>
 80024e6:	4b7b      	ldr	r3, [pc, #492]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7a      	ldr	r2, [pc, #488]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b78      	ldr	r3, [pc, #480]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a77      	ldr	r2, [pc, #476]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e01d      	b.n	800253c <HAL_RCC_OscConfig+0xd4>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0xbc>
 800250a:	4b72      	ldr	r3, [pc, #456]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a71      	ldr	r2, [pc, #452]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b6f      	ldr	r3, [pc, #444]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a6e      	ldr	r2, [pc, #440]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e00b      	b.n	800253c <HAL_RCC_OscConfig+0xd4>
 8002524:	4b6b      	ldr	r3, [pc, #428]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a6a      	ldr	r2, [pc, #424]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 800252a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b68      	ldr	r3, [pc, #416]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a67      	ldr	r2, [pc, #412]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800253a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d013      	beq.n	800256c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe fe90 	bl	8001268 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7fe fe8c 	bl	8001268 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	@ 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e200      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	4b5d      	ldr	r3, [pc, #372]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0f0      	beq.n	800254c <HAL_RCC_OscConfig+0xe4>
 800256a:	e014      	b.n	8002596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe fe7c 	bl	8001268 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe fe78 	bl	8001268 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	@ 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1ec      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	4b53      	ldr	r3, [pc, #332]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x10c>
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d063      	beq.n	800266a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a2:	4b4c      	ldr	r3, [pc, #304]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ae:	4b49      	ldr	r3, [pc, #292]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d11c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x18c>
 80025ba:	4b46      	ldr	r3, [pc, #280]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d116      	bne.n	80025f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	4b43      	ldr	r3, [pc, #268]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_RCC_OscConfig+0x176>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e1c0      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025de:	4b3d      	ldr	r3, [pc, #244]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4939      	ldr	r1, [pc, #228]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f2:	e03a      	b.n	800266a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025fc:	4b36      	ldr	r3, [pc, #216]	@ (80026d8 <HAL_RCC_OscConfig+0x270>)
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7fe fe31 	bl	8001268 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260a:	f7fe fe2d 	bl	8001268 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e1a1      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	4b2d      	ldr	r3, [pc, #180]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4b2a      	ldr	r3, [pc, #168]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4927      	ldr	r1, [pc, #156]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
 800263c:	e015      	b.n	800266a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263e:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <HAL_RCC_OscConfig+0x270>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fe10 	bl	8001268 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264c:	f7fe fe0c 	bl	8001268 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e180      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	4b1d      	ldr	r3, [pc, #116]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d03a      	beq.n	80026ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d019      	beq.n	80026b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267e:	4b17      	ldr	r3, [pc, #92]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 8002680:	2201      	movs	r2, #1
 8002682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002684:	f7fe fdf0 	bl	8001268 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268c:	f7fe fdec 	bl	8001268 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e160      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	4b0d      	ldr	r3, [pc, #52]	@ (80026d4 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f000 fa9c 	bl	8002be8 <RCC_Delay>
 80026b0:	e01c      	b.n	80026ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b2:	4b0a      	ldr	r3, [pc, #40]	@ (80026dc <HAL_RCC_OscConfig+0x274>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b8:	f7fe fdd6 	bl	8001268 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026be:	e00f      	b.n	80026e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c0:	f7fe fdd2 	bl	8001268 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d908      	bls.n	80026e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e146      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	42420000 	.word	0x42420000
 80026dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	4b92      	ldr	r3, [pc, #584]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1e9      	bne.n	80026c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80a6 	beq.w	8002846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fe:	4b8b      	ldr	r3, [pc, #556]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10d      	bne.n	8002726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	4b88      	ldr	r3, [pc, #544]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4a87      	ldr	r2, [pc, #540]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002714:	61d3      	str	r3, [r2, #28]
 8002716:	4b85      	ldr	r3, [pc, #532]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	4b82      	ldr	r3, [pc, #520]	@ (8002930 <HAL_RCC_OscConfig+0x4c8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d118      	bne.n	8002764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002732:	4b7f      	ldr	r3, [pc, #508]	@ (8002930 <HAL_RCC_OscConfig+0x4c8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a7e      	ldr	r2, [pc, #504]	@ (8002930 <HAL_RCC_OscConfig+0x4c8>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273e:	f7fe fd93 	bl	8001268 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002746:	f7fe fd8f 	bl	8001268 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b64      	cmp	r3, #100	@ 0x64
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e103      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	4b75      	ldr	r3, [pc, #468]	@ (8002930 <HAL_RCC_OscConfig+0x4c8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x312>
 800276c:	4b6f      	ldr	r3, [pc, #444]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4a6e      	ldr	r2, [pc, #440]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6213      	str	r3, [r2, #32]
 8002778:	e02d      	b.n	80027d6 <HAL_RCC_OscConfig+0x36e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x334>
 8002782:	4b6a      	ldr	r3, [pc, #424]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4a69      	ldr	r2, [pc, #420]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6213      	str	r3, [r2, #32]
 800278e:	4b67      	ldr	r3, [pc, #412]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a66      	ldr	r2, [pc, #408]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	6213      	str	r3, [r2, #32]
 800279a:	e01c      	b.n	80027d6 <HAL_RCC_OscConfig+0x36e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d10c      	bne.n	80027be <HAL_RCC_OscConfig+0x356>
 80027a4:	4b61      	ldr	r3, [pc, #388]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4a60      	ldr	r2, [pc, #384]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	6213      	str	r3, [r2, #32]
 80027b0:	4b5e      	ldr	r3, [pc, #376]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4a5d      	ldr	r2, [pc, #372]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6213      	str	r3, [r2, #32]
 80027bc:	e00b      	b.n	80027d6 <HAL_RCC_OscConfig+0x36e>
 80027be:	4b5b      	ldr	r3, [pc, #364]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4a5a      	ldr	r2, [pc, #360]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6213      	str	r3, [r2, #32]
 80027ca:	4b58      	ldr	r3, [pc, #352]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4a57      	ldr	r2, [pc, #348]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d015      	beq.n	800280a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027de:	f7fe fd43 	bl	8001268 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fe fd3f 	bl	8001268 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e0b1      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	4b4b      	ldr	r3, [pc, #300]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ee      	beq.n	80027e6 <HAL_RCC_OscConfig+0x37e>
 8002808:	e014      	b.n	8002834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800280a:	f7fe fd2d 	bl	8001268 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fe fd29 	bl	8001268 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e09b      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002828:	4b40      	ldr	r3, [pc, #256]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ee      	bne.n	8002812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d105      	bne.n	8002846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283a:	4b3c      	ldr	r3, [pc, #240]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	4a3b      	ldr	r2, [pc, #236]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 8002840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8087 	beq.w	800295e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002850:	4b36      	ldr	r3, [pc, #216]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b08      	cmp	r3, #8
 800285a:	d061      	beq.n	8002920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d146      	bne.n	80028f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002864:	4b33      	ldr	r3, [pc, #204]	@ (8002934 <HAL_RCC_OscConfig+0x4cc>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286a:	f7fe fcfd 	bl	8001268 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002872:	f7fe fcf9 	bl	8001268 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e06d      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	4b29      	ldr	r3, [pc, #164]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002898:	d108      	bne.n	80028ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800289a:	4b24      	ldr	r3, [pc, #144]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	4921      	ldr	r1, [pc, #132]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ac:	4b1f      	ldr	r3, [pc, #124]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a19      	ldr	r1, [r3, #32]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	430b      	orrs	r3, r1
 80028be:	491b      	ldr	r1, [pc, #108]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002934 <HAL_RCC_OscConfig+0x4cc>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ca:	f7fe fccd 	bl	8001268 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d2:	f7fe fcc9 	bl	8001268 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e03d      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e4:	4b11      	ldr	r3, [pc, #68]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x46a>
 80028f0:	e035      	b.n	800295e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b10      	ldr	r3, [pc, #64]	@ (8002934 <HAL_RCC_OscConfig+0x4cc>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe fcb6 	bl	8001268 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fcb2 	bl	8001268 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e026      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <HAL_RCC_OscConfig+0x4c4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x498>
 800291e:	e01e      	b.n	800295e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d107      	bne.n	8002938 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e019      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
 800292c:	40021000 	.word	0x40021000
 8002930:	40007000 	.word	0x40007000
 8002934:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002938:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <HAL_RCC_OscConfig+0x500>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	429a      	cmp	r2, r3
 800294a:	d106      	bne.n	800295a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000

0800296c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0d0      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002980:	4b6a      	ldr	r3, [pc, #424]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d910      	bls.n	80029b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b67      	ldr	r3, [pc, #412]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 0207 	bic.w	r2, r3, #7
 8002996:	4965      	ldr	r1, [pc, #404]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b63      	ldr	r3, [pc, #396]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0b8      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c8:	4b59      	ldr	r3, [pc, #356]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a58      	ldr	r2, [pc, #352]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e0:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a52      	ldr	r2, [pc, #328]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b50      	ldr	r3, [pc, #320]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	494d      	ldr	r1, [pc, #308]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d040      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d115      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e07f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2a:	4b41      	ldr	r3, [pc, #260]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e073      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e06b      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4a:	4b39      	ldr	r3, [pc, #228]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f023 0203 	bic.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4936      	ldr	r1, [pc, #216]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fc04 	bl	8001268 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a64:	f7fe fc00 	bl	8001268 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e053      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 020c 	and.w	r2, r3, #12
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1eb      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d210      	bcs.n	8002abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b24      	ldr	r3, [pc, #144]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 0207 	bic.w	r2, r3, #7
 8002aa2:	4922      	ldr	r1, [pc, #136]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b20      	ldr	r3, [pc, #128]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e032      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac8:	4b19      	ldr	r3, [pc, #100]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4916      	ldr	r1, [pc, #88]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ae6:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	490e      	ldr	r1, [pc, #56]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002afa:	f000 f821 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	490a      	ldr	r1, [pc, #40]	@ (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0c:	5ccb      	ldrb	r3, [r1, r3]
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	4a09      	ldr	r2, [pc, #36]	@ (8002b38 <HAL_RCC_ClockConfig+0x1cc>)
 8002b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b16:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <HAL_RCC_ClockConfig+0x1d0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fb62 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40021000 	.word	0x40021000
 8002b34:	080057e8 	.word	0x080057e8
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004

08002b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d002      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x30>
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x36>
 8002b6e:	e027      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b70:	4b19      	ldr	r3, [pc, #100]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b72:	613b      	str	r3, [r7, #16]
      break;
 8002b74:	e027      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	0c9b      	lsrs	r3, r3, #18
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	4a17      	ldr	r2, [pc, #92]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b80:	5cd3      	ldrb	r3, [r2, r3]
 8002b82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d010      	beq.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b8e:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	0c5b      	lsrs	r3, r3, #17
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	4a11      	ldr	r2, [pc, #68]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ba2:	fb03 f202 	mul.w	r2, r3, r2
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	e004      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002be4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	613b      	str	r3, [r7, #16]
      break;
 8002bbe:	e002      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bc2:	613b      	str	r3, [r7, #16]
      break;
 8002bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc6:	693b      	ldr	r3, [r7, #16]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	007a1200 	.word	0x007a1200
 8002bdc:	080057f8 	.word	0x080057f8
 8002be0:	08005808 	.word	0x08005808
 8002be4:	003d0900 	.word	0x003d0900

08002be8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002c1c <RCC_Delay+0x34>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8002c20 <RCC_Delay+0x38>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0a5b      	lsrs	r3, r3, #9
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c04:	bf00      	nop
  }
  while (Delay --);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e5a      	subs	r2, r3, #1
 8002c0a:	60fa      	str	r2, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f9      	bne.n	8002c04 <RCC_Delay+0x1c>
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	10624dd3 	.word	0x10624dd3

08002c24 <__cvt>:
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c2a:	461d      	mov	r5, r3
 8002c2c:	bfbb      	ittet	lt
 8002c2e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002c32:	461d      	movlt	r5, r3
 8002c34:	2300      	movge	r3, #0
 8002c36:	232d      	movlt	r3, #45	@ 0x2d
 8002c38:	b088      	sub	sp, #32
 8002c3a:	4614      	mov	r4, r2
 8002c3c:	bfb8      	it	lt
 8002c3e:	4614      	movlt	r4, r2
 8002c40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002c42:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002c44:	7013      	strb	r3, [r2, #0]
 8002c46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002c48:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002c4c:	f023 0820 	bic.w	r8, r3, #32
 8002c50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002c54:	d005      	beq.n	8002c62 <__cvt+0x3e>
 8002c56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002c5a:	d100      	bne.n	8002c5e <__cvt+0x3a>
 8002c5c:	3601      	adds	r6, #1
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e000      	b.n	8002c64 <__cvt+0x40>
 8002c62:	2303      	movs	r3, #3
 8002c64:	aa07      	add	r2, sp, #28
 8002c66:	9204      	str	r2, [sp, #16]
 8002c68:	aa06      	add	r2, sp, #24
 8002c6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002c6e:	e9cd 3600 	strd	r3, r6, [sp]
 8002c72:	4622      	mov	r2, r4
 8002c74:	462b      	mov	r3, r5
 8002c76:	f000 ff5b 	bl	8003b30 <_dtoa_r>
 8002c7a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002c7e:	4607      	mov	r7, r0
 8002c80:	d119      	bne.n	8002cb6 <__cvt+0x92>
 8002c82:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002c84:	07db      	lsls	r3, r3, #31
 8002c86:	d50e      	bpl.n	8002ca6 <__cvt+0x82>
 8002c88:	eb00 0906 	add.w	r9, r0, r6
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2300      	movs	r3, #0
 8002c90:	4620      	mov	r0, r4
 8002c92:	4629      	mov	r1, r5
 8002c94:	f7fd fe88 	bl	80009a8 <__aeabi_dcmpeq>
 8002c98:	b108      	cbz	r0, 8002c9e <__cvt+0x7a>
 8002c9a:	f8cd 901c 	str.w	r9, [sp, #28]
 8002c9e:	2230      	movs	r2, #48	@ 0x30
 8002ca0:	9b07      	ldr	r3, [sp, #28]
 8002ca2:	454b      	cmp	r3, r9
 8002ca4:	d31e      	bcc.n	8002ce4 <__cvt+0xc0>
 8002ca6:	4638      	mov	r0, r7
 8002ca8:	9b07      	ldr	r3, [sp, #28]
 8002caa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002cac:	1bdb      	subs	r3, r3, r7
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	b008      	add	sp, #32
 8002cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002cba:	eb00 0906 	add.w	r9, r0, r6
 8002cbe:	d1e5      	bne.n	8002c8c <__cvt+0x68>
 8002cc0:	7803      	ldrb	r3, [r0, #0]
 8002cc2:	2b30      	cmp	r3, #48	@ 0x30
 8002cc4:	d10a      	bne.n	8002cdc <__cvt+0xb8>
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2300      	movs	r3, #0
 8002cca:	4620      	mov	r0, r4
 8002ccc:	4629      	mov	r1, r5
 8002cce:	f7fd fe6b 	bl	80009a8 <__aeabi_dcmpeq>
 8002cd2:	b918      	cbnz	r0, 8002cdc <__cvt+0xb8>
 8002cd4:	f1c6 0601 	rsb	r6, r6, #1
 8002cd8:	f8ca 6000 	str.w	r6, [sl]
 8002cdc:	f8da 3000 	ldr.w	r3, [sl]
 8002ce0:	4499      	add	r9, r3
 8002ce2:	e7d3      	b.n	8002c8c <__cvt+0x68>
 8002ce4:	1c59      	adds	r1, r3, #1
 8002ce6:	9107      	str	r1, [sp, #28]
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e7d9      	b.n	8002ca0 <__cvt+0x7c>

08002cec <__exponent>:
 8002cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cee:	2900      	cmp	r1, #0
 8002cf0:	bfb6      	itet	lt
 8002cf2:	232d      	movlt	r3, #45	@ 0x2d
 8002cf4:	232b      	movge	r3, #43	@ 0x2b
 8002cf6:	4249      	neglt	r1, r1
 8002cf8:	2909      	cmp	r1, #9
 8002cfa:	7002      	strb	r2, [r0, #0]
 8002cfc:	7043      	strb	r3, [r0, #1]
 8002cfe:	dd29      	ble.n	8002d54 <__exponent+0x68>
 8002d00:	f10d 0307 	add.w	r3, sp, #7
 8002d04:	461d      	mov	r5, r3
 8002d06:	270a      	movs	r7, #10
 8002d08:	fbb1 f6f7 	udiv	r6, r1, r7
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	fb07 1416 	mls	r4, r7, r6, r1
 8002d12:	3430      	adds	r4, #48	@ 0x30
 8002d14:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002d18:	460c      	mov	r4, r1
 8002d1a:	2c63      	cmp	r4, #99	@ 0x63
 8002d1c:	4631      	mov	r1, r6
 8002d1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002d22:	dcf1      	bgt.n	8002d08 <__exponent+0x1c>
 8002d24:	3130      	adds	r1, #48	@ 0x30
 8002d26:	1e94      	subs	r4, r2, #2
 8002d28:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002d2c:	4623      	mov	r3, r4
 8002d2e:	1c41      	adds	r1, r0, #1
 8002d30:	42ab      	cmp	r3, r5
 8002d32:	d30a      	bcc.n	8002d4a <__exponent+0x5e>
 8002d34:	f10d 0309 	add.w	r3, sp, #9
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	42ac      	cmp	r4, r5
 8002d3c:	bf88      	it	hi
 8002d3e:	2300      	movhi	r3, #0
 8002d40:	3302      	adds	r3, #2
 8002d42:	4403      	add	r3, r0
 8002d44:	1a18      	subs	r0, r3, r0
 8002d46:	b003      	add	sp, #12
 8002d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d4a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002d4e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002d52:	e7ed      	b.n	8002d30 <__exponent+0x44>
 8002d54:	2330      	movs	r3, #48	@ 0x30
 8002d56:	3130      	adds	r1, #48	@ 0x30
 8002d58:	7083      	strb	r3, [r0, #2]
 8002d5a:	70c1      	strb	r1, [r0, #3]
 8002d5c:	1d03      	adds	r3, r0, #4
 8002d5e:	e7f1      	b.n	8002d44 <__exponent+0x58>

08002d60 <_printf_float>:
 8002d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d64:	b091      	sub	sp, #68	@ 0x44
 8002d66:	460c      	mov	r4, r1
 8002d68:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002d6c:	4616      	mov	r6, r2
 8002d6e:	461f      	mov	r7, r3
 8002d70:	4605      	mov	r5, r0
 8002d72:	f000 fdcd 	bl	8003910 <_localeconv_r>
 8002d76:	6803      	ldr	r3, [r0, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	9308      	str	r3, [sp, #32]
 8002d7c:	f7fd f9e8 	bl	8000150 <strlen>
 8002d80:	2300      	movs	r3, #0
 8002d82:	930e      	str	r3, [sp, #56]	@ 0x38
 8002d84:	f8d8 3000 	ldr.w	r3, [r8]
 8002d88:	9009      	str	r0, [sp, #36]	@ 0x24
 8002d8a:	3307      	adds	r3, #7
 8002d8c:	f023 0307 	bic.w	r3, r3, #7
 8002d90:	f103 0208 	add.w	r2, r3, #8
 8002d94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002d98:	f8d4 b000 	ldr.w	fp, [r4]
 8002d9c:	f8c8 2000 	str.w	r2, [r8]
 8002da0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002da4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002da8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002daa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002dae:	f04f 32ff 	mov.w	r2, #4294967295
 8002db2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002db6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002dba:	4b9c      	ldr	r3, [pc, #624]	@ (800302c <_printf_float+0x2cc>)
 8002dbc:	f7fd fe26 	bl	8000a0c <__aeabi_dcmpun>
 8002dc0:	bb70      	cbnz	r0, 8002e20 <_printf_float+0xc0>
 8002dc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dca:	4b98      	ldr	r3, [pc, #608]	@ (800302c <_printf_float+0x2cc>)
 8002dcc:	f7fd fe00 	bl	80009d0 <__aeabi_dcmple>
 8002dd0:	bb30      	cbnz	r0, 8002e20 <_printf_float+0xc0>
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	4640      	mov	r0, r8
 8002dd8:	4649      	mov	r1, r9
 8002dda:	f7fd fdef 	bl	80009bc <__aeabi_dcmplt>
 8002dde:	b110      	cbz	r0, 8002de6 <_printf_float+0x86>
 8002de0:	232d      	movs	r3, #45	@ 0x2d
 8002de2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002de6:	4a92      	ldr	r2, [pc, #584]	@ (8003030 <_printf_float+0x2d0>)
 8002de8:	4b92      	ldr	r3, [pc, #584]	@ (8003034 <_printf_float+0x2d4>)
 8002dea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002dee:	bf94      	ite	ls
 8002df0:	4690      	movls	r8, r2
 8002df2:	4698      	movhi	r8, r3
 8002df4:	2303      	movs	r3, #3
 8002df6:	f04f 0900 	mov.w	r9, #0
 8002dfa:	6123      	str	r3, [r4, #16]
 8002dfc:	f02b 0304 	bic.w	r3, fp, #4
 8002e00:	6023      	str	r3, [r4, #0]
 8002e02:	4633      	mov	r3, r6
 8002e04:	4621      	mov	r1, r4
 8002e06:	4628      	mov	r0, r5
 8002e08:	9700      	str	r7, [sp, #0]
 8002e0a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002e0c:	f000 f9d4 	bl	80031b8 <_printf_common>
 8002e10:	3001      	adds	r0, #1
 8002e12:	f040 8090 	bne.w	8002f36 <_printf_float+0x1d6>
 8002e16:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1a:	b011      	add	sp, #68	@ 0x44
 8002e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e20:	4642      	mov	r2, r8
 8002e22:	464b      	mov	r3, r9
 8002e24:	4640      	mov	r0, r8
 8002e26:	4649      	mov	r1, r9
 8002e28:	f7fd fdf0 	bl	8000a0c <__aeabi_dcmpun>
 8002e2c:	b148      	cbz	r0, 8002e42 <_printf_float+0xe2>
 8002e2e:	464b      	mov	r3, r9
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bfb8      	it	lt
 8002e34:	232d      	movlt	r3, #45	@ 0x2d
 8002e36:	4a80      	ldr	r2, [pc, #512]	@ (8003038 <_printf_float+0x2d8>)
 8002e38:	bfb8      	it	lt
 8002e3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800303c <_printf_float+0x2dc>)
 8002e40:	e7d3      	b.n	8002dea <_printf_float+0x8a>
 8002e42:	6863      	ldr	r3, [r4, #4]
 8002e44:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	d13f      	bne.n	8002ecc <_printf_float+0x16c>
 8002e4c:	2306      	movs	r3, #6
 8002e4e:	6063      	str	r3, [r4, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002e56:	6023      	str	r3, [r4, #0]
 8002e58:	9206      	str	r2, [sp, #24]
 8002e5a:	aa0e      	add	r2, sp, #56	@ 0x38
 8002e5c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002e60:	aa0d      	add	r2, sp, #52	@ 0x34
 8002e62:	9203      	str	r2, [sp, #12]
 8002e64:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002e68:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002e6c:	6863      	ldr	r3, [r4, #4]
 8002e6e:	4642      	mov	r2, r8
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	4628      	mov	r0, r5
 8002e74:	464b      	mov	r3, r9
 8002e76:	910a      	str	r1, [sp, #40]	@ 0x28
 8002e78:	f7ff fed4 	bl	8002c24 <__cvt>
 8002e7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002e7e:	4680      	mov	r8, r0
 8002e80:	2947      	cmp	r1, #71	@ 0x47
 8002e82:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002e84:	d128      	bne.n	8002ed8 <_printf_float+0x178>
 8002e86:	1cc8      	adds	r0, r1, #3
 8002e88:	db02      	blt.n	8002e90 <_printf_float+0x130>
 8002e8a:	6863      	ldr	r3, [r4, #4]
 8002e8c:	4299      	cmp	r1, r3
 8002e8e:	dd40      	ble.n	8002f12 <_printf_float+0x1b2>
 8002e90:	f1aa 0a02 	sub.w	sl, sl, #2
 8002e94:	fa5f fa8a 	uxtb.w	sl, sl
 8002e98:	4652      	mov	r2, sl
 8002e9a:	3901      	subs	r1, #1
 8002e9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002ea0:	910d      	str	r1, [sp, #52]	@ 0x34
 8002ea2:	f7ff ff23 	bl	8002cec <__exponent>
 8002ea6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002ea8:	4681      	mov	r9, r0
 8002eaa:	1813      	adds	r3, r2, r0
 8002eac:	2a01      	cmp	r2, #1
 8002eae:	6123      	str	r3, [r4, #16]
 8002eb0:	dc02      	bgt.n	8002eb8 <_printf_float+0x158>
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	07d2      	lsls	r2, r2, #31
 8002eb6:	d501      	bpl.n	8002ebc <_printf_float+0x15c>
 8002eb8:	3301      	adds	r3, #1
 8002eba:	6123      	str	r3, [r4, #16]
 8002ebc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d09e      	beq.n	8002e02 <_printf_float+0xa2>
 8002ec4:	232d      	movs	r3, #45	@ 0x2d
 8002ec6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002eca:	e79a      	b.n	8002e02 <_printf_float+0xa2>
 8002ecc:	2947      	cmp	r1, #71	@ 0x47
 8002ece:	d1bf      	bne.n	8002e50 <_printf_float+0xf0>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1bd      	bne.n	8002e50 <_printf_float+0xf0>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e7ba      	b.n	8002e4e <_printf_float+0xee>
 8002ed8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002edc:	d9dc      	bls.n	8002e98 <_printf_float+0x138>
 8002ede:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002ee2:	d118      	bne.n	8002f16 <_printf_float+0x1b6>
 8002ee4:	2900      	cmp	r1, #0
 8002ee6:	6863      	ldr	r3, [r4, #4]
 8002ee8:	dd0b      	ble.n	8002f02 <_printf_float+0x1a2>
 8002eea:	6121      	str	r1, [r4, #16]
 8002eec:	b913      	cbnz	r3, 8002ef4 <_printf_float+0x194>
 8002eee:	6822      	ldr	r2, [r4, #0]
 8002ef0:	07d0      	lsls	r0, r2, #31
 8002ef2:	d502      	bpl.n	8002efa <_printf_float+0x19a>
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	440b      	add	r3, r1
 8002ef8:	6123      	str	r3, [r4, #16]
 8002efa:	f04f 0900 	mov.w	r9, #0
 8002efe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002f00:	e7dc      	b.n	8002ebc <_printf_float+0x15c>
 8002f02:	b913      	cbnz	r3, 8002f0a <_printf_float+0x1aa>
 8002f04:	6822      	ldr	r2, [r4, #0]
 8002f06:	07d2      	lsls	r2, r2, #31
 8002f08:	d501      	bpl.n	8002f0e <_printf_float+0x1ae>
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	e7f4      	b.n	8002ef8 <_printf_float+0x198>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e7f2      	b.n	8002ef8 <_printf_float+0x198>
 8002f12:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002f16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f18:	4299      	cmp	r1, r3
 8002f1a:	db05      	blt.n	8002f28 <_printf_float+0x1c8>
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	6121      	str	r1, [r4, #16]
 8002f20:	07d8      	lsls	r0, r3, #31
 8002f22:	d5ea      	bpl.n	8002efa <_printf_float+0x19a>
 8002f24:	1c4b      	adds	r3, r1, #1
 8002f26:	e7e7      	b.n	8002ef8 <_printf_float+0x198>
 8002f28:	2900      	cmp	r1, #0
 8002f2a:	bfcc      	ite	gt
 8002f2c:	2201      	movgt	r2, #1
 8002f2e:	f1c1 0202 	rsble	r2, r1, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	e7e0      	b.n	8002ef8 <_printf_float+0x198>
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	055a      	lsls	r2, r3, #21
 8002f3a:	d407      	bmi.n	8002f4c <_printf_float+0x1ec>
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	4642      	mov	r2, r8
 8002f40:	4631      	mov	r1, r6
 8002f42:	4628      	mov	r0, r5
 8002f44:	47b8      	blx	r7
 8002f46:	3001      	adds	r0, #1
 8002f48:	d12b      	bne.n	8002fa2 <_printf_float+0x242>
 8002f4a:	e764      	b.n	8002e16 <_printf_float+0xb6>
 8002f4c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002f50:	f240 80dc 	bls.w	800310c <_printf_float+0x3ac>
 8002f54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f7fd fd24 	bl	80009a8 <__aeabi_dcmpeq>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d033      	beq.n	8002fcc <_printf_float+0x26c>
 8002f64:	2301      	movs	r3, #1
 8002f66:	4631      	mov	r1, r6
 8002f68:	4628      	mov	r0, r5
 8002f6a:	4a35      	ldr	r2, [pc, #212]	@ (8003040 <_printf_float+0x2e0>)
 8002f6c:	47b8      	blx	r7
 8002f6e:	3001      	adds	r0, #1
 8002f70:	f43f af51 	beq.w	8002e16 <_printf_float+0xb6>
 8002f74:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002f78:	4543      	cmp	r3, r8
 8002f7a:	db02      	blt.n	8002f82 <_printf_float+0x222>
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	07d8      	lsls	r0, r3, #31
 8002f80:	d50f      	bpl.n	8002fa2 <_printf_float+0x242>
 8002f82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002f86:	4631      	mov	r1, r6
 8002f88:	4628      	mov	r0, r5
 8002f8a:	47b8      	blx	r7
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	f43f af42 	beq.w	8002e16 <_printf_float+0xb6>
 8002f92:	f04f 0900 	mov.w	r9, #0
 8002f96:	f108 38ff 	add.w	r8, r8, #4294967295
 8002f9a:	f104 0a1a 	add.w	sl, r4, #26
 8002f9e:	45c8      	cmp	r8, r9
 8002fa0:	dc09      	bgt.n	8002fb6 <_printf_float+0x256>
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	079b      	lsls	r3, r3, #30
 8002fa6:	f100 8102 	bmi.w	80031ae <_printf_float+0x44e>
 8002faa:	68e0      	ldr	r0, [r4, #12]
 8002fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002fae:	4298      	cmp	r0, r3
 8002fb0:	bfb8      	it	lt
 8002fb2:	4618      	movlt	r0, r3
 8002fb4:	e731      	b.n	8002e1a <_printf_float+0xba>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	4652      	mov	r2, sl
 8002fba:	4631      	mov	r1, r6
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	47b8      	blx	r7
 8002fc0:	3001      	adds	r0, #1
 8002fc2:	f43f af28 	beq.w	8002e16 <_printf_float+0xb6>
 8002fc6:	f109 0901 	add.w	r9, r9, #1
 8002fca:	e7e8      	b.n	8002f9e <_printf_float+0x23e>
 8002fcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	dc38      	bgt.n	8003044 <_printf_float+0x2e4>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	4631      	mov	r1, r6
 8002fd6:	4628      	mov	r0, r5
 8002fd8:	4a19      	ldr	r2, [pc, #100]	@ (8003040 <_printf_float+0x2e0>)
 8002fda:	47b8      	blx	r7
 8002fdc:	3001      	adds	r0, #1
 8002fde:	f43f af1a 	beq.w	8002e16 <_printf_float+0xb6>
 8002fe2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002fe6:	ea59 0303 	orrs.w	r3, r9, r3
 8002fea:	d102      	bne.n	8002ff2 <_printf_float+0x292>
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	07d9      	lsls	r1, r3, #31
 8002ff0:	d5d7      	bpl.n	8002fa2 <_printf_float+0x242>
 8002ff2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002ff6:	4631      	mov	r1, r6
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	47b8      	blx	r7
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	f43f af0a 	beq.w	8002e16 <_printf_float+0xb6>
 8003002:	f04f 0a00 	mov.w	sl, #0
 8003006:	f104 0b1a 	add.w	fp, r4, #26
 800300a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800300c:	425b      	negs	r3, r3
 800300e:	4553      	cmp	r3, sl
 8003010:	dc01      	bgt.n	8003016 <_printf_float+0x2b6>
 8003012:	464b      	mov	r3, r9
 8003014:	e793      	b.n	8002f3e <_printf_float+0x1de>
 8003016:	2301      	movs	r3, #1
 8003018:	465a      	mov	r2, fp
 800301a:	4631      	mov	r1, r6
 800301c:	4628      	mov	r0, r5
 800301e:	47b8      	blx	r7
 8003020:	3001      	adds	r0, #1
 8003022:	f43f aef8 	beq.w	8002e16 <_printf_float+0xb6>
 8003026:	f10a 0a01 	add.w	sl, sl, #1
 800302a:	e7ee      	b.n	800300a <_printf_float+0x2aa>
 800302c:	7fefffff 	.word	0x7fefffff
 8003030:	0800580a 	.word	0x0800580a
 8003034:	0800580e 	.word	0x0800580e
 8003038:	08005812 	.word	0x08005812
 800303c:	08005816 	.word	0x08005816
 8003040:	0800581a 	.word	0x0800581a
 8003044:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003046:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800304a:	4553      	cmp	r3, sl
 800304c:	bfa8      	it	ge
 800304e:	4653      	movge	r3, sl
 8003050:	2b00      	cmp	r3, #0
 8003052:	4699      	mov	r9, r3
 8003054:	dc36      	bgt.n	80030c4 <_printf_float+0x364>
 8003056:	f04f 0b00 	mov.w	fp, #0
 800305a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800305e:	f104 021a 	add.w	r2, r4, #26
 8003062:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003064:	930a      	str	r3, [sp, #40]	@ 0x28
 8003066:	eba3 0309 	sub.w	r3, r3, r9
 800306a:	455b      	cmp	r3, fp
 800306c:	dc31      	bgt.n	80030d2 <_printf_float+0x372>
 800306e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003070:	459a      	cmp	sl, r3
 8003072:	dc3a      	bgt.n	80030ea <_printf_float+0x38a>
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	07da      	lsls	r2, r3, #31
 8003078:	d437      	bmi.n	80030ea <_printf_float+0x38a>
 800307a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800307c:	ebaa 0903 	sub.w	r9, sl, r3
 8003080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003082:	ebaa 0303 	sub.w	r3, sl, r3
 8003086:	4599      	cmp	r9, r3
 8003088:	bfa8      	it	ge
 800308a:	4699      	movge	r9, r3
 800308c:	f1b9 0f00 	cmp.w	r9, #0
 8003090:	dc33      	bgt.n	80030fa <_printf_float+0x39a>
 8003092:	f04f 0800 	mov.w	r8, #0
 8003096:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800309a:	f104 0b1a 	add.w	fp, r4, #26
 800309e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80030a0:	ebaa 0303 	sub.w	r3, sl, r3
 80030a4:	eba3 0309 	sub.w	r3, r3, r9
 80030a8:	4543      	cmp	r3, r8
 80030aa:	f77f af7a 	ble.w	8002fa2 <_printf_float+0x242>
 80030ae:	2301      	movs	r3, #1
 80030b0:	465a      	mov	r2, fp
 80030b2:	4631      	mov	r1, r6
 80030b4:	4628      	mov	r0, r5
 80030b6:	47b8      	blx	r7
 80030b8:	3001      	adds	r0, #1
 80030ba:	f43f aeac 	beq.w	8002e16 <_printf_float+0xb6>
 80030be:	f108 0801 	add.w	r8, r8, #1
 80030c2:	e7ec      	b.n	800309e <_printf_float+0x33e>
 80030c4:	4642      	mov	r2, r8
 80030c6:	4631      	mov	r1, r6
 80030c8:	4628      	mov	r0, r5
 80030ca:	47b8      	blx	r7
 80030cc:	3001      	adds	r0, #1
 80030ce:	d1c2      	bne.n	8003056 <_printf_float+0x2f6>
 80030d0:	e6a1      	b.n	8002e16 <_printf_float+0xb6>
 80030d2:	2301      	movs	r3, #1
 80030d4:	4631      	mov	r1, r6
 80030d6:	4628      	mov	r0, r5
 80030d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80030da:	47b8      	blx	r7
 80030dc:	3001      	adds	r0, #1
 80030de:	f43f ae9a 	beq.w	8002e16 <_printf_float+0xb6>
 80030e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80030e4:	f10b 0b01 	add.w	fp, fp, #1
 80030e8:	e7bb      	b.n	8003062 <_printf_float+0x302>
 80030ea:	4631      	mov	r1, r6
 80030ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80030f0:	4628      	mov	r0, r5
 80030f2:	47b8      	blx	r7
 80030f4:	3001      	adds	r0, #1
 80030f6:	d1c0      	bne.n	800307a <_printf_float+0x31a>
 80030f8:	e68d      	b.n	8002e16 <_printf_float+0xb6>
 80030fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80030fc:	464b      	mov	r3, r9
 80030fe:	4631      	mov	r1, r6
 8003100:	4628      	mov	r0, r5
 8003102:	4442      	add	r2, r8
 8003104:	47b8      	blx	r7
 8003106:	3001      	adds	r0, #1
 8003108:	d1c3      	bne.n	8003092 <_printf_float+0x332>
 800310a:	e684      	b.n	8002e16 <_printf_float+0xb6>
 800310c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003110:	f1ba 0f01 	cmp.w	sl, #1
 8003114:	dc01      	bgt.n	800311a <_printf_float+0x3ba>
 8003116:	07db      	lsls	r3, r3, #31
 8003118:	d536      	bpl.n	8003188 <_printf_float+0x428>
 800311a:	2301      	movs	r3, #1
 800311c:	4642      	mov	r2, r8
 800311e:	4631      	mov	r1, r6
 8003120:	4628      	mov	r0, r5
 8003122:	47b8      	blx	r7
 8003124:	3001      	adds	r0, #1
 8003126:	f43f ae76 	beq.w	8002e16 <_printf_float+0xb6>
 800312a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800312e:	4631      	mov	r1, r6
 8003130:	4628      	mov	r0, r5
 8003132:	47b8      	blx	r7
 8003134:	3001      	adds	r0, #1
 8003136:	f43f ae6e 	beq.w	8002e16 <_printf_float+0xb6>
 800313a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800313e:	2200      	movs	r2, #0
 8003140:	2300      	movs	r3, #0
 8003142:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003146:	f7fd fc2f 	bl	80009a8 <__aeabi_dcmpeq>
 800314a:	b9c0      	cbnz	r0, 800317e <_printf_float+0x41e>
 800314c:	4653      	mov	r3, sl
 800314e:	f108 0201 	add.w	r2, r8, #1
 8003152:	4631      	mov	r1, r6
 8003154:	4628      	mov	r0, r5
 8003156:	47b8      	blx	r7
 8003158:	3001      	adds	r0, #1
 800315a:	d10c      	bne.n	8003176 <_printf_float+0x416>
 800315c:	e65b      	b.n	8002e16 <_printf_float+0xb6>
 800315e:	2301      	movs	r3, #1
 8003160:	465a      	mov	r2, fp
 8003162:	4631      	mov	r1, r6
 8003164:	4628      	mov	r0, r5
 8003166:	47b8      	blx	r7
 8003168:	3001      	adds	r0, #1
 800316a:	f43f ae54 	beq.w	8002e16 <_printf_float+0xb6>
 800316e:	f108 0801 	add.w	r8, r8, #1
 8003172:	45d0      	cmp	r8, sl
 8003174:	dbf3      	blt.n	800315e <_printf_float+0x3fe>
 8003176:	464b      	mov	r3, r9
 8003178:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800317c:	e6e0      	b.n	8002f40 <_printf_float+0x1e0>
 800317e:	f04f 0800 	mov.w	r8, #0
 8003182:	f104 0b1a 	add.w	fp, r4, #26
 8003186:	e7f4      	b.n	8003172 <_printf_float+0x412>
 8003188:	2301      	movs	r3, #1
 800318a:	4642      	mov	r2, r8
 800318c:	e7e1      	b.n	8003152 <_printf_float+0x3f2>
 800318e:	2301      	movs	r3, #1
 8003190:	464a      	mov	r2, r9
 8003192:	4631      	mov	r1, r6
 8003194:	4628      	mov	r0, r5
 8003196:	47b8      	blx	r7
 8003198:	3001      	adds	r0, #1
 800319a:	f43f ae3c 	beq.w	8002e16 <_printf_float+0xb6>
 800319e:	f108 0801 	add.w	r8, r8, #1
 80031a2:	68e3      	ldr	r3, [r4, #12]
 80031a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80031a6:	1a5b      	subs	r3, r3, r1
 80031a8:	4543      	cmp	r3, r8
 80031aa:	dcf0      	bgt.n	800318e <_printf_float+0x42e>
 80031ac:	e6fd      	b.n	8002faa <_printf_float+0x24a>
 80031ae:	f04f 0800 	mov.w	r8, #0
 80031b2:	f104 0919 	add.w	r9, r4, #25
 80031b6:	e7f4      	b.n	80031a2 <_printf_float+0x442>

080031b8 <_printf_common>:
 80031b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	4616      	mov	r6, r2
 80031be:	4698      	mov	r8, r3
 80031c0:	688a      	ldr	r2, [r1, #8]
 80031c2:	690b      	ldr	r3, [r1, #16]
 80031c4:	4607      	mov	r7, r0
 80031c6:	4293      	cmp	r3, r2
 80031c8:	bfb8      	it	lt
 80031ca:	4613      	movlt	r3, r2
 80031cc:	6033      	str	r3, [r6, #0]
 80031ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031d2:	460c      	mov	r4, r1
 80031d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031d8:	b10a      	cbz	r2, 80031de <_printf_common+0x26>
 80031da:	3301      	adds	r3, #1
 80031dc:	6033      	str	r3, [r6, #0]
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	0699      	lsls	r1, r3, #26
 80031e2:	bf42      	ittt	mi
 80031e4:	6833      	ldrmi	r3, [r6, #0]
 80031e6:	3302      	addmi	r3, #2
 80031e8:	6033      	strmi	r3, [r6, #0]
 80031ea:	6825      	ldr	r5, [r4, #0]
 80031ec:	f015 0506 	ands.w	r5, r5, #6
 80031f0:	d106      	bne.n	8003200 <_printf_common+0x48>
 80031f2:	f104 0a19 	add.w	sl, r4, #25
 80031f6:	68e3      	ldr	r3, [r4, #12]
 80031f8:	6832      	ldr	r2, [r6, #0]
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	42ab      	cmp	r3, r5
 80031fe:	dc2b      	bgt.n	8003258 <_printf_common+0xa0>
 8003200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003204:	6822      	ldr	r2, [r4, #0]
 8003206:	3b00      	subs	r3, #0
 8003208:	bf18      	it	ne
 800320a:	2301      	movne	r3, #1
 800320c:	0692      	lsls	r2, r2, #26
 800320e:	d430      	bmi.n	8003272 <_printf_common+0xba>
 8003210:	4641      	mov	r1, r8
 8003212:	4638      	mov	r0, r7
 8003214:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003218:	47c8      	blx	r9
 800321a:	3001      	adds	r0, #1
 800321c:	d023      	beq.n	8003266 <_printf_common+0xae>
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	6922      	ldr	r2, [r4, #16]
 8003222:	f003 0306 	and.w	r3, r3, #6
 8003226:	2b04      	cmp	r3, #4
 8003228:	bf14      	ite	ne
 800322a:	2500      	movne	r5, #0
 800322c:	6833      	ldreq	r3, [r6, #0]
 800322e:	f04f 0600 	mov.w	r6, #0
 8003232:	bf08      	it	eq
 8003234:	68e5      	ldreq	r5, [r4, #12]
 8003236:	f104 041a 	add.w	r4, r4, #26
 800323a:	bf08      	it	eq
 800323c:	1aed      	subeq	r5, r5, r3
 800323e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003242:	bf08      	it	eq
 8003244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003248:	4293      	cmp	r3, r2
 800324a:	bfc4      	itt	gt
 800324c:	1a9b      	subgt	r3, r3, r2
 800324e:	18ed      	addgt	r5, r5, r3
 8003250:	42b5      	cmp	r5, r6
 8003252:	d11a      	bne.n	800328a <_printf_common+0xd2>
 8003254:	2000      	movs	r0, #0
 8003256:	e008      	b.n	800326a <_printf_common+0xb2>
 8003258:	2301      	movs	r3, #1
 800325a:	4652      	mov	r2, sl
 800325c:	4641      	mov	r1, r8
 800325e:	4638      	mov	r0, r7
 8003260:	47c8      	blx	r9
 8003262:	3001      	adds	r0, #1
 8003264:	d103      	bne.n	800326e <_printf_common+0xb6>
 8003266:	f04f 30ff 	mov.w	r0, #4294967295
 800326a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800326e:	3501      	adds	r5, #1
 8003270:	e7c1      	b.n	80031f6 <_printf_common+0x3e>
 8003272:	2030      	movs	r0, #48	@ 0x30
 8003274:	18e1      	adds	r1, r4, r3
 8003276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003280:	4422      	add	r2, r4
 8003282:	3302      	adds	r3, #2
 8003284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003288:	e7c2      	b.n	8003210 <_printf_common+0x58>
 800328a:	2301      	movs	r3, #1
 800328c:	4622      	mov	r2, r4
 800328e:	4641      	mov	r1, r8
 8003290:	4638      	mov	r0, r7
 8003292:	47c8      	blx	r9
 8003294:	3001      	adds	r0, #1
 8003296:	d0e6      	beq.n	8003266 <_printf_common+0xae>
 8003298:	3601      	adds	r6, #1
 800329a:	e7d9      	b.n	8003250 <_printf_common+0x98>

0800329c <_printf_i>:
 800329c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032a0:	7e0f      	ldrb	r7, [r1, #24]
 80032a2:	4691      	mov	r9, r2
 80032a4:	2f78      	cmp	r7, #120	@ 0x78
 80032a6:	4680      	mov	r8, r0
 80032a8:	460c      	mov	r4, r1
 80032aa:	469a      	mov	sl, r3
 80032ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80032ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80032b2:	d807      	bhi.n	80032c4 <_printf_i+0x28>
 80032b4:	2f62      	cmp	r7, #98	@ 0x62
 80032b6:	d80a      	bhi.n	80032ce <_printf_i+0x32>
 80032b8:	2f00      	cmp	r7, #0
 80032ba:	f000 80d3 	beq.w	8003464 <_printf_i+0x1c8>
 80032be:	2f58      	cmp	r7, #88	@ 0x58
 80032c0:	f000 80ba 	beq.w	8003438 <_printf_i+0x19c>
 80032c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032cc:	e03a      	b.n	8003344 <_printf_i+0xa8>
 80032ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032d2:	2b15      	cmp	r3, #21
 80032d4:	d8f6      	bhi.n	80032c4 <_printf_i+0x28>
 80032d6:	a101      	add	r1, pc, #4	@ (adr r1, 80032dc <_printf_i+0x40>)
 80032d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032dc:	08003335 	.word	0x08003335
 80032e0:	08003349 	.word	0x08003349
 80032e4:	080032c5 	.word	0x080032c5
 80032e8:	080032c5 	.word	0x080032c5
 80032ec:	080032c5 	.word	0x080032c5
 80032f0:	080032c5 	.word	0x080032c5
 80032f4:	08003349 	.word	0x08003349
 80032f8:	080032c5 	.word	0x080032c5
 80032fc:	080032c5 	.word	0x080032c5
 8003300:	080032c5 	.word	0x080032c5
 8003304:	080032c5 	.word	0x080032c5
 8003308:	0800344b 	.word	0x0800344b
 800330c:	08003373 	.word	0x08003373
 8003310:	08003405 	.word	0x08003405
 8003314:	080032c5 	.word	0x080032c5
 8003318:	080032c5 	.word	0x080032c5
 800331c:	0800346d 	.word	0x0800346d
 8003320:	080032c5 	.word	0x080032c5
 8003324:	08003373 	.word	0x08003373
 8003328:	080032c5 	.word	0x080032c5
 800332c:	080032c5 	.word	0x080032c5
 8003330:	0800340d 	.word	0x0800340d
 8003334:	6833      	ldr	r3, [r6, #0]
 8003336:	1d1a      	adds	r2, r3, #4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6032      	str	r2, [r6, #0]
 800333c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003344:	2301      	movs	r3, #1
 8003346:	e09e      	b.n	8003486 <_printf_i+0x1ea>
 8003348:	6833      	ldr	r3, [r6, #0]
 800334a:	6820      	ldr	r0, [r4, #0]
 800334c:	1d19      	adds	r1, r3, #4
 800334e:	6031      	str	r1, [r6, #0]
 8003350:	0606      	lsls	r6, r0, #24
 8003352:	d501      	bpl.n	8003358 <_printf_i+0xbc>
 8003354:	681d      	ldr	r5, [r3, #0]
 8003356:	e003      	b.n	8003360 <_printf_i+0xc4>
 8003358:	0645      	lsls	r5, r0, #25
 800335a:	d5fb      	bpl.n	8003354 <_printf_i+0xb8>
 800335c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003360:	2d00      	cmp	r5, #0
 8003362:	da03      	bge.n	800336c <_printf_i+0xd0>
 8003364:	232d      	movs	r3, #45	@ 0x2d
 8003366:	426d      	negs	r5, r5
 8003368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800336c:	230a      	movs	r3, #10
 800336e:	4859      	ldr	r0, [pc, #356]	@ (80034d4 <_printf_i+0x238>)
 8003370:	e011      	b.n	8003396 <_printf_i+0xfa>
 8003372:	6821      	ldr	r1, [r4, #0]
 8003374:	6833      	ldr	r3, [r6, #0]
 8003376:	0608      	lsls	r0, r1, #24
 8003378:	f853 5b04 	ldr.w	r5, [r3], #4
 800337c:	d402      	bmi.n	8003384 <_printf_i+0xe8>
 800337e:	0649      	lsls	r1, r1, #25
 8003380:	bf48      	it	mi
 8003382:	b2ad      	uxthmi	r5, r5
 8003384:	2f6f      	cmp	r7, #111	@ 0x6f
 8003386:	6033      	str	r3, [r6, #0]
 8003388:	bf14      	ite	ne
 800338a:	230a      	movne	r3, #10
 800338c:	2308      	moveq	r3, #8
 800338e:	4851      	ldr	r0, [pc, #324]	@ (80034d4 <_printf_i+0x238>)
 8003390:	2100      	movs	r1, #0
 8003392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003396:	6866      	ldr	r6, [r4, #4]
 8003398:	2e00      	cmp	r6, #0
 800339a:	bfa8      	it	ge
 800339c:	6821      	ldrge	r1, [r4, #0]
 800339e:	60a6      	str	r6, [r4, #8]
 80033a0:	bfa4      	itt	ge
 80033a2:	f021 0104 	bicge.w	r1, r1, #4
 80033a6:	6021      	strge	r1, [r4, #0]
 80033a8:	b90d      	cbnz	r5, 80033ae <_printf_i+0x112>
 80033aa:	2e00      	cmp	r6, #0
 80033ac:	d04b      	beq.n	8003446 <_printf_i+0x1aa>
 80033ae:	4616      	mov	r6, r2
 80033b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80033b4:	fb03 5711 	mls	r7, r3, r1, r5
 80033b8:	5dc7      	ldrb	r7, [r0, r7]
 80033ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033be:	462f      	mov	r7, r5
 80033c0:	42bb      	cmp	r3, r7
 80033c2:	460d      	mov	r5, r1
 80033c4:	d9f4      	bls.n	80033b0 <_printf_i+0x114>
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d10b      	bne.n	80033e2 <_printf_i+0x146>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	07df      	lsls	r7, r3, #31
 80033ce:	d508      	bpl.n	80033e2 <_printf_i+0x146>
 80033d0:	6923      	ldr	r3, [r4, #16]
 80033d2:	6861      	ldr	r1, [r4, #4]
 80033d4:	4299      	cmp	r1, r3
 80033d6:	bfde      	ittt	le
 80033d8:	2330      	movle	r3, #48	@ 0x30
 80033da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033e2:	1b92      	subs	r2, r2, r6
 80033e4:	6122      	str	r2, [r4, #16]
 80033e6:	464b      	mov	r3, r9
 80033e8:	4621      	mov	r1, r4
 80033ea:	4640      	mov	r0, r8
 80033ec:	f8cd a000 	str.w	sl, [sp]
 80033f0:	aa03      	add	r2, sp, #12
 80033f2:	f7ff fee1 	bl	80031b8 <_printf_common>
 80033f6:	3001      	adds	r0, #1
 80033f8:	d14a      	bne.n	8003490 <_printf_i+0x1f4>
 80033fa:	f04f 30ff 	mov.w	r0, #4294967295
 80033fe:	b004      	add	sp, #16
 8003400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	f043 0320 	orr.w	r3, r3, #32
 800340a:	6023      	str	r3, [r4, #0]
 800340c:	2778      	movs	r7, #120	@ 0x78
 800340e:	4832      	ldr	r0, [pc, #200]	@ (80034d8 <_printf_i+0x23c>)
 8003410:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	6831      	ldr	r1, [r6, #0]
 8003418:	061f      	lsls	r7, r3, #24
 800341a:	f851 5b04 	ldr.w	r5, [r1], #4
 800341e:	d402      	bmi.n	8003426 <_printf_i+0x18a>
 8003420:	065f      	lsls	r7, r3, #25
 8003422:	bf48      	it	mi
 8003424:	b2ad      	uxthmi	r5, r5
 8003426:	6031      	str	r1, [r6, #0]
 8003428:	07d9      	lsls	r1, r3, #31
 800342a:	bf44      	itt	mi
 800342c:	f043 0320 	orrmi.w	r3, r3, #32
 8003430:	6023      	strmi	r3, [r4, #0]
 8003432:	b11d      	cbz	r5, 800343c <_printf_i+0x1a0>
 8003434:	2310      	movs	r3, #16
 8003436:	e7ab      	b.n	8003390 <_printf_i+0xf4>
 8003438:	4826      	ldr	r0, [pc, #152]	@ (80034d4 <_printf_i+0x238>)
 800343a:	e7e9      	b.n	8003410 <_printf_i+0x174>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	f023 0320 	bic.w	r3, r3, #32
 8003442:	6023      	str	r3, [r4, #0]
 8003444:	e7f6      	b.n	8003434 <_printf_i+0x198>
 8003446:	4616      	mov	r6, r2
 8003448:	e7bd      	b.n	80033c6 <_printf_i+0x12a>
 800344a:	6833      	ldr	r3, [r6, #0]
 800344c:	6825      	ldr	r5, [r4, #0]
 800344e:	1d18      	adds	r0, r3, #4
 8003450:	6961      	ldr	r1, [r4, #20]
 8003452:	6030      	str	r0, [r6, #0]
 8003454:	062e      	lsls	r6, r5, #24
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	d501      	bpl.n	800345e <_printf_i+0x1c2>
 800345a:	6019      	str	r1, [r3, #0]
 800345c:	e002      	b.n	8003464 <_printf_i+0x1c8>
 800345e:	0668      	lsls	r0, r5, #25
 8003460:	d5fb      	bpl.n	800345a <_printf_i+0x1be>
 8003462:	8019      	strh	r1, [r3, #0]
 8003464:	2300      	movs	r3, #0
 8003466:	4616      	mov	r6, r2
 8003468:	6123      	str	r3, [r4, #16]
 800346a:	e7bc      	b.n	80033e6 <_printf_i+0x14a>
 800346c:	6833      	ldr	r3, [r6, #0]
 800346e:	2100      	movs	r1, #0
 8003470:	1d1a      	adds	r2, r3, #4
 8003472:	6032      	str	r2, [r6, #0]
 8003474:	681e      	ldr	r6, [r3, #0]
 8003476:	6862      	ldr	r2, [r4, #4]
 8003478:	4630      	mov	r0, r6
 800347a:	f000 fac0 	bl	80039fe <memchr>
 800347e:	b108      	cbz	r0, 8003484 <_printf_i+0x1e8>
 8003480:	1b80      	subs	r0, r0, r6
 8003482:	6060      	str	r0, [r4, #4]
 8003484:	6863      	ldr	r3, [r4, #4]
 8003486:	6123      	str	r3, [r4, #16]
 8003488:	2300      	movs	r3, #0
 800348a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800348e:	e7aa      	b.n	80033e6 <_printf_i+0x14a>
 8003490:	4632      	mov	r2, r6
 8003492:	4649      	mov	r1, r9
 8003494:	4640      	mov	r0, r8
 8003496:	6923      	ldr	r3, [r4, #16]
 8003498:	47d0      	blx	sl
 800349a:	3001      	adds	r0, #1
 800349c:	d0ad      	beq.n	80033fa <_printf_i+0x15e>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	079b      	lsls	r3, r3, #30
 80034a2:	d413      	bmi.n	80034cc <_printf_i+0x230>
 80034a4:	68e0      	ldr	r0, [r4, #12]
 80034a6:	9b03      	ldr	r3, [sp, #12]
 80034a8:	4298      	cmp	r0, r3
 80034aa:	bfb8      	it	lt
 80034ac:	4618      	movlt	r0, r3
 80034ae:	e7a6      	b.n	80033fe <_printf_i+0x162>
 80034b0:	2301      	movs	r3, #1
 80034b2:	4632      	mov	r2, r6
 80034b4:	4649      	mov	r1, r9
 80034b6:	4640      	mov	r0, r8
 80034b8:	47d0      	blx	sl
 80034ba:	3001      	adds	r0, #1
 80034bc:	d09d      	beq.n	80033fa <_printf_i+0x15e>
 80034be:	3501      	adds	r5, #1
 80034c0:	68e3      	ldr	r3, [r4, #12]
 80034c2:	9903      	ldr	r1, [sp, #12]
 80034c4:	1a5b      	subs	r3, r3, r1
 80034c6:	42ab      	cmp	r3, r5
 80034c8:	dcf2      	bgt.n	80034b0 <_printf_i+0x214>
 80034ca:	e7eb      	b.n	80034a4 <_printf_i+0x208>
 80034cc:	2500      	movs	r5, #0
 80034ce:	f104 0619 	add.w	r6, r4, #25
 80034d2:	e7f5      	b.n	80034c0 <_printf_i+0x224>
 80034d4:	0800581c 	.word	0x0800581c
 80034d8:	0800582d 	.word	0x0800582d

080034dc <std>:
 80034dc:	2300      	movs	r3, #0
 80034de:	b510      	push	{r4, lr}
 80034e0:	4604      	mov	r4, r0
 80034e2:	e9c0 3300 	strd	r3, r3, [r0]
 80034e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ea:	6083      	str	r3, [r0, #8]
 80034ec:	8181      	strh	r1, [r0, #12]
 80034ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80034f0:	81c2      	strh	r2, [r0, #14]
 80034f2:	6183      	str	r3, [r0, #24]
 80034f4:	4619      	mov	r1, r3
 80034f6:	2208      	movs	r2, #8
 80034f8:	305c      	adds	r0, #92	@ 0x5c
 80034fa:	f000 fa01 	bl	8003900 <memset>
 80034fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <std+0x58>)
 8003500:	6224      	str	r4, [r4, #32]
 8003502:	6263      	str	r3, [r4, #36]	@ 0x24
 8003504:	4b0c      	ldr	r3, [pc, #48]	@ (8003538 <std+0x5c>)
 8003506:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <std+0x60>)
 800350a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <std+0x64>)
 800350e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003510:	4b0c      	ldr	r3, [pc, #48]	@ (8003544 <std+0x68>)
 8003512:	429c      	cmp	r4, r3
 8003514:	d006      	beq.n	8003524 <std+0x48>
 8003516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800351a:	4294      	cmp	r4, r2
 800351c:	d002      	beq.n	8003524 <std+0x48>
 800351e:	33d0      	adds	r3, #208	@ 0xd0
 8003520:	429c      	cmp	r4, r3
 8003522:	d105      	bne.n	8003530 <std+0x54>
 8003524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800352c:	f000 ba64 	b.w	80039f8 <__retarget_lock_init_recursive>
 8003530:	bd10      	pop	{r4, pc}
 8003532:	bf00      	nop
 8003534:	08003751 	.word	0x08003751
 8003538:	08003773 	.word	0x08003773
 800353c:	080037ab 	.word	0x080037ab
 8003540:	080037cf 	.word	0x080037cf
 8003544:	20000268 	.word	0x20000268

08003548 <stdio_exit_handler>:
 8003548:	4a02      	ldr	r2, [pc, #8]	@ (8003554 <stdio_exit_handler+0xc>)
 800354a:	4903      	ldr	r1, [pc, #12]	@ (8003558 <stdio_exit_handler+0x10>)
 800354c:	4803      	ldr	r0, [pc, #12]	@ (800355c <stdio_exit_handler+0x14>)
 800354e:	f000 b869 	b.w	8003624 <_fwalk_sglue>
 8003552:	bf00      	nop
 8003554:	2000000c 	.word	0x2000000c
 8003558:	0800533d 	.word	0x0800533d
 800355c:	2000001c 	.word	0x2000001c

08003560 <cleanup_stdio>:
 8003560:	6841      	ldr	r1, [r0, #4]
 8003562:	4b0c      	ldr	r3, [pc, #48]	@ (8003594 <cleanup_stdio+0x34>)
 8003564:	b510      	push	{r4, lr}
 8003566:	4299      	cmp	r1, r3
 8003568:	4604      	mov	r4, r0
 800356a:	d001      	beq.n	8003570 <cleanup_stdio+0x10>
 800356c:	f001 fee6 	bl	800533c <_fflush_r>
 8003570:	68a1      	ldr	r1, [r4, #8]
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <cleanup_stdio+0x38>)
 8003574:	4299      	cmp	r1, r3
 8003576:	d002      	beq.n	800357e <cleanup_stdio+0x1e>
 8003578:	4620      	mov	r0, r4
 800357a:	f001 fedf 	bl	800533c <_fflush_r>
 800357e:	68e1      	ldr	r1, [r4, #12]
 8003580:	4b06      	ldr	r3, [pc, #24]	@ (800359c <cleanup_stdio+0x3c>)
 8003582:	4299      	cmp	r1, r3
 8003584:	d004      	beq.n	8003590 <cleanup_stdio+0x30>
 8003586:	4620      	mov	r0, r4
 8003588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800358c:	f001 bed6 	b.w	800533c <_fflush_r>
 8003590:	bd10      	pop	{r4, pc}
 8003592:	bf00      	nop
 8003594:	20000268 	.word	0x20000268
 8003598:	200002d0 	.word	0x200002d0
 800359c:	20000338 	.word	0x20000338

080035a0 <global_stdio_init.part.0>:
 80035a0:	b510      	push	{r4, lr}
 80035a2:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <global_stdio_init.part.0+0x30>)
 80035a4:	4c0b      	ldr	r4, [pc, #44]	@ (80035d4 <global_stdio_init.part.0+0x34>)
 80035a6:	4a0c      	ldr	r2, [pc, #48]	@ (80035d8 <global_stdio_init.part.0+0x38>)
 80035a8:	4620      	mov	r0, r4
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	2104      	movs	r1, #4
 80035ae:	2200      	movs	r2, #0
 80035b0:	f7ff ff94 	bl	80034dc <std>
 80035b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80035b8:	2201      	movs	r2, #1
 80035ba:	2109      	movs	r1, #9
 80035bc:	f7ff ff8e 	bl	80034dc <std>
 80035c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80035c4:	2202      	movs	r2, #2
 80035c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035ca:	2112      	movs	r1, #18
 80035cc:	f7ff bf86 	b.w	80034dc <std>
 80035d0:	200003a0 	.word	0x200003a0
 80035d4:	20000268 	.word	0x20000268
 80035d8:	08003549 	.word	0x08003549

080035dc <__sfp_lock_acquire>:
 80035dc:	4801      	ldr	r0, [pc, #4]	@ (80035e4 <__sfp_lock_acquire+0x8>)
 80035de:	f000 ba0c 	b.w	80039fa <__retarget_lock_acquire_recursive>
 80035e2:	bf00      	nop
 80035e4:	200003a9 	.word	0x200003a9

080035e8 <__sfp_lock_release>:
 80035e8:	4801      	ldr	r0, [pc, #4]	@ (80035f0 <__sfp_lock_release+0x8>)
 80035ea:	f000 ba07 	b.w	80039fc <__retarget_lock_release_recursive>
 80035ee:	bf00      	nop
 80035f0:	200003a9 	.word	0x200003a9

080035f4 <__sinit>:
 80035f4:	b510      	push	{r4, lr}
 80035f6:	4604      	mov	r4, r0
 80035f8:	f7ff fff0 	bl	80035dc <__sfp_lock_acquire>
 80035fc:	6a23      	ldr	r3, [r4, #32]
 80035fe:	b11b      	cbz	r3, 8003608 <__sinit+0x14>
 8003600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003604:	f7ff bff0 	b.w	80035e8 <__sfp_lock_release>
 8003608:	4b04      	ldr	r3, [pc, #16]	@ (800361c <__sinit+0x28>)
 800360a:	6223      	str	r3, [r4, #32]
 800360c:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <__sinit+0x2c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f5      	bne.n	8003600 <__sinit+0xc>
 8003614:	f7ff ffc4 	bl	80035a0 <global_stdio_init.part.0>
 8003618:	e7f2      	b.n	8003600 <__sinit+0xc>
 800361a:	bf00      	nop
 800361c:	08003561 	.word	0x08003561
 8003620:	200003a0 	.word	0x200003a0

08003624 <_fwalk_sglue>:
 8003624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003628:	4607      	mov	r7, r0
 800362a:	4688      	mov	r8, r1
 800362c:	4614      	mov	r4, r2
 800362e:	2600      	movs	r6, #0
 8003630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003634:	f1b9 0901 	subs.w	r9, r9, #1
 8003638:	d505      	bpl.n	8003646 <_fwalk_sglue+0x22>
 800363a:	6824      	ldr	r4, [r4, #0]
 800363c:	2c00      	cmp	r4, #0
 800363e:	d1f7      	bne.n	8003630 <_fwalk_sglue+0xc>
 8003640:	4630      	mov	r0, r6
 8003642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003646:	89ab      	ldrh	r3, [r5, #12]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d907      	bls.n	800365c <_fwalk_sglue+0x38>
 800364c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003650:	3301      	adds	r3, #1
 8003652:	d003      	beq.n	800365c <_fwalk_sglue+0x38>
 8003654:	4629      	mov	r1, r5
 8003656:	4638      	mov	r0, r7
 8003658:	47c0      	blx	r8
 800365a:	4306      	orrs	r6, r0
 800365c:	3568      	adds	r5, #104	@ 0x68
 800365e:	e7e9      	b.n	8003634 <_fwalk_sglue+0x10>

08003660 <iprintf>:
 8003660:	b40f      	push	{r0, r1, r2, r3}
 8003662:	b507      	push	{r0, r1, r2, lr}
 8003664:	4906      	ldr	r1, [pc, #24]	@ (8003680 <iprintf+0x20>)
 8003666:	ab04      	add	r3, sp, #16
 8003668:	6808      	ldr	r0, [r1, #0]
 800366a:	f853 2b04 	ldr.w	r2, [r3], #4
 800366e:	6881      	ldr	r1, [r0, #8]
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	f001 fccb 	bl	800500c <_vfiprintf_r>
 8003676:	b003      	add	sp, #12
 8003678:	f85d eb04 	ldr.w	lr, [sp], #4
 800367c:	b004      	add	sp, #16
 800367e:	4770      	bx	lr
 8003680:	20000018 	.word	0x20000018

08003684 <putchar>:
 8003684:	4b02      	ldr	r3, [pc, #8]	@ (8003690 <putchar+0xc>)
 8003686:	4601      	mov	r1, r0
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	6882      	ldr	r2, [r0, #8]
 800368c:	f001 bedf 	b.w	800544e <_putc_r>
 8003690:	20000018 	.word	0x20000018

08003694 <_puts_r>:
 8003694:	6a03      	ldr	r3, [r0, #32]
 8003696:	b570      	push	{r4, r5, r6, lr}
 8003698:	4605      	mov	r5, r0
 800369a:	460e      	mov	r6, r1
 800369c:	6884      	ldr	r4, [r0, #8]
 800369e:	b90b      	cbnz	r3, 80036a4 <_puts_r+0x10>
 80036a0:	f7ff ffa8 	bl	80035f4 <__sinit>
 80036a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036a6:	07db      	lsls	r3, r3, #31
 80036a8:	d405      	bmi.n	80036b6 <_puts_r+0x22>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	0598      	lsls	r0, r3, #22
 80036ae:	d402      	bmi.n	80036b6 <_puts_r+0x22>
 80036b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036b2:	f000 f9a2 	bl	80039fa <__retarget_lock_acquire_recursive>
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	0719      	lsls	r1, r3, #28
 80036ba:	d502      	bpl.n	80036c2 <_puts_r+0x2e>
 80036bc:	6923      	ldr	r3, [r4, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d135      	bne.n	800372e <_puts_r+0x9a>
 80036c2:	4621      	mov	r1, r4
 80036c4:	4628      	mov	r0, r5
 80036c6:	f000 f8c5 	bl	8003854 <__swsetup_r>
 80036ca:	b380      	cbz	r0, 800372e <_puts_r+0x9a>
 80036cc:	f04f 35ff 	mov.w	r5, #4294967295
 80036d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036d2:	07da      	lsls	r2, r3, #31
 80036d4:	d405      	bmi.n	80036e2 <_puts_r+0x4e>
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	059b      	lsls	r3, r3, #22
 80036da:	d402      	bmi.n	80036e2 <_puts_r+0x4e>
 80036dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036de:	f000 f98d 	bl	80039fc <__retarget_lock_release_recursive>
 80036e2:	4628      	mov	r0, r5
 80036e4:	bd70      	pop	{r4, r5, r6, pc}
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da04      	bge.n	80036f4 <_puts_r+0x60>
 80036ea:	69a2      	ldr	r2, [r4, #24]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	dc17      	bgt.n	8003720 <_puts_r+0x8c>
 80036f0:	290a      	cmp	r1, #10
 80036f2:	d015      	beq.n	8003720 <_puts_r+0x8c>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	6022      	str	r2, [r4, #0]
 80036fa:	7019      	strb	r1, [r3, #0]
 80036fc:	68a3      	ldr	r3, [r4, #8]
 80036fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003702:	3b01      	subs	r3, #1
 8003704:	60a3      	str	r3, [r4, #8]
 8003706:	2900      	cmp	r1, #0
 8003708:	d1ed      	bne.n	80036e6 <_puts_r+0x52>
 800370a:	2b00      	cmp	r3, #0
 800370c:	da11      	bge.n	8003732 <_puts_r+0x9e>
 800370e:	4622      	mov	r2, r4
 8003710:	210a      	movs	r1, #10
 8003712:	4628      	mov	r0, r5
 8003714:	f000 f85f 	bl	80037d6 <__swbuf_r>
 8003718:	3001      	adds	r0, #1
 800371a:	d0d7      	beq.n	80036cc <_puts_r+0x38>
 800371c:	250a      	movs	r5, #10
 800371e:	e7d7      	b.n	80036d0 <_puts_r+0x3c>
 8003720:	4622      	mov	r2, r4
 8003722:	4628      	mov	r0, r5
 8003724:	f000 f857 	bl	80037d6 <__swbuf_r>
 8003728:	3001      	adds	r0, #1
 800372a:	d1e7      	bne.n	80036fc <_puts_r+0x68>
 800372c:	e7ce      	b.n	80036cc <_puts_r+0x38>
 800372e:	3e01      	subs	r6, #1
 8003730:	e7e4      	b.n	80036fc <_puts_r+0x68>
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	6022      	str	r2, [r4, #0]
 8003738:	220a      	movs	r2, #10
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	e7ee      	b.n	800371c <_puts_r+0x88>
	...

08003740 <puts>:
 8003740:	4b02      	ldr	r3, [pc, #8]	@ (800374c <puts+0xc>)
 8003742:	4601      	mov	r1, r0
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	f7ff bfa5 	b.w	8003694 <_puts_r>
 800374a:	bf00      	nop
 800374c:	20000018 	.word	0x20000018

08003750 <__sread>:
 8003750:	b510      	push	{r4, lr}
 8003752:	460c      	mov	r4, r1
 8003754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003758:	f000 f900 	bl	800395c <_read_r>
 800375c:	2800      	cmp	r0, #0
 800375e:	bfab      	itete	ge
 8003760:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003762:	89a3      	ldrhlt	r3, [r4, #12]
 8003764:	181b      	addge	r3, r3, r0
 8003766:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800376a:	bfac      	ite	ge
 800376c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800376e:	81a3      	strhlt	r3, [r4, #12]
 8003770:	bd10      	pop	{r4, pc}

08003772 <__swrite>:
 8003772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003776:	461f      	mov	r7, r3
 8003778:	898b      	ldrh	r3, [r1, #12]
 800377a:	4605      	mov	r5, r0
 800377c:	05db      	lsls	r3, r3, #23
 800377e:	460c      	mov	r4, r1
 8003780:	4616      	mov	r6, r2
 8003782:	d505      	bpl.n	8003790 <__swrite+0x1e>
 8003784:	2302      	movs	r3, #2
 8003786:	2200      	movs	r2, #0
 8003788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800378c:	f000 f8d4 	bl	8003938 <_lseek_r>
 8003790:	89a3      	ldrh	r3, [r4, #12]
 8003792:	4632      	mov	r2, r6
 8003794:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003798:	81a3      	strh	r3, [r4, #12]
 800379a:	4628      	mov	r0, r5
 800379c:	463b      	mov	r3, r7
 800379e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037a6:	f000 b8eb 	b.w	8003980 <_write_r>

080037aa <__sseek>:
 80037aa:	b510      	push	{r4, lr}
 80037ac:	460c      	mov	r4, r1
 80037ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b2:	f000 f8c1 	bl	8003938 <_lseek_r>
 80037b6:	1c43      	adds	r3, r0, #1
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	bf15      	itete	ne
 80037bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80037be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80037c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80037c6:	81a3      	strheq	r3, [r4, #12]
 80037c8:	bf18      	it	ne
 80037ca:	81a3      	strhne	r3, [r4, #12]
 80037cc:	bd10      	pop	{r4, pc}

080037ce <__sclose>:
 80037ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d2:	f000 b8a1 	b.w	8003918 <_close_r>

080037d6 <__swbuf_r>:
 80037d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d8:	460e      	mov	r6, r1
 80037da:	4614      	mov	r4, r2
 80037dc:	4605      	mov	r5, r0
 80037de:	b118      	cbz	r0, 80037e8 <__swbuf_r+0x12>
 80037e0:	6a03      	ldr	r3, [r0, #32]
 80037e2:	b90b      	cbnz	r3, 80037e8 <__swbuf_r+0x12>
 80037e4:	f7ff ff06 	bl	80035f4 <__sinit>
 80037e8:	69a3      	ldr	r3, [r4, #24]
 80037ea:	60a3      	str	r3, [r4, #8]
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	071a      	lsls	r2, r3, #28
 80037f0:	d501      	bpl.n	80037f6 <__swbuf_r+0x20>
 80037f2:	6923      	ldr	r3, [r4, #16]
 80037f4:	b943      	cbnz	r3, 8003808 <__swbuf_r+0x32>
 80037f6:	4621      	mov	r1, r4
 80037f8:	4628      	mov	r0, r5
 80037fa:	f000 f82b 	bl	8003854 <__swsetup_r>
 80037fe:	b118      	cbz	r0, 8003808 <__swbuf_r+0x32>
 8003800:	f04f 37ff 	mov.w	r7, #4294967295
 8003804:	4638      	mov	r0, r7
 8003806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	6922      	ldr	r2, [r4, #16]
 800380c:	b2f6      	uxtb	r6, r6
 800380e:	1a98      	subs	r0, r3, r2
 8003810:	6963      	ldr	r3, [r4, #20]
 8003812:	4637      	mov	r7, r6
 8003814:	4283      	cmp	r3, r0
 8003816:	dc05      	bgt.n	8003824 <__swbuf_r+0x4e>
 8003818:	4621      	mov	r1, r4
 800381a:	4628      	mov	r0, r5
 800381c:	f001 fd8e 	bl	800533c <_fflush_r>
 8003820:	2800      	cmp	r0, #0
 8003822:	d1ed      	bne.n	8003800 <__swbuf_r+0x2a>
 8003824:	68a3      	ldr	r3, [r4, #8]
 8003826:	3b01      	subs	r3, #1
 8003828:	60a3      	str	r3, [r4, #8]
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	6022      	str	r2, [r4, #0]
 8003830:	701e      	strb	r6, [r3, #0]
 8003832:	6962      	ldr	r2, [r4, #20]
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	429a      	cmp	r2, r3
 8003838:	d004      	beq.n	8003844 <__swbuf_r+0x6e>
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	07db      	lsls	r3, r3, #31
 800383e:	d5e1      	bpl.n	8003804 <__swbuf_r+0x2e>
 8003840:	2e0a      	cmp	r6, #10
 8003842:	d1df      	bne.n	8003804 <__swbuf_r+0x2e>
 8003844:	4621      	mov	r1, r4
 8003846:	4628      	mov	r0, r5
 8003848:	f001 fd78 	bl	800533c <_fflush_r>
 800384c:	2800      	cmp	r0, #0
 800384e:	d0d9      	beq.n	8003804 <__swbuf_r+0x2e>
 8003850:	e7d6      	b.n	8003800 <__swbuf_r+0x2a>
	...

08003854 <__swsetup_r>:
 8003854:	b538      	push	{r3, r4, r5, lr}
 8003856:	4b29      	ldr	r3, [pc, #164]	@ (80038fc <__swsetup_r+0xa8>)
 8003858:	4605      	mov	r5, r0
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	460c      	mov	r4, r1
 800385e:	b118      	cbz	r0, 8003868 <__swsetup_r+0x14>
 8003860:	6a03      	ldr	r3, [r0, #32]
 8003862:	b90b      	cbnz	r3, 8003868 <__swsetup_r+0x14>
 8003864:	f7ff fec6 	bl	80035f4 <__sinit>
 8003868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800386c:	0719      	lsls	r1, r3, #28
 800386e:	d422      	bmi.n	80038b6 <__swsetup_r+0x62>
 8003870:	06da      	lsls	r2, r3, #27
 8003872:	d407      	bmi.n	8003884 <__swsetup_r+0x30>
 8003874:	2209      	movs	r2, #9
 8003876:	602a      	str	r2, [r5, #0]
 8003878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	81a3      	strh	r3, [r4, #12]
 8003882:	e033      	b.n	80038ec <__swsetup_r+0x98>
 8003884:	0758      	lsls	r0, r3, #29
 8003886:	d512      	bpl.n	80038ae <__swsetup_r+0x5a>
 8003888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800388a:	b141      	cbz	r1, 800389e <__swsetup_r+0x4a>
 800388c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003890:	4299      	cmp	r1, r3
 8003892:	d002      	beq.n	800389a <__swsetup_r+0x46>
 8003894:	4628      	mov	r0, r5
 8003896:	f000 ff13 	bl	80046c0 <_free_r>
 800389a:	2300      	movs	r3, #0
 800389c:	6363      	str	r3, [r4, #52]	@ 0x34
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80038a4:	81a3      	strh	r3, [r4, #12]
 80038a6:	2300      	movs	r3, #0
 80038a8:	6063      	str	r3, [r4, #4]
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	6023      	str	r3, [r4, #0]
 80038ae:	89a3      	ldrh	r3, [r4, #12]
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	81a3      	strh	r3, [r4, #12]
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	b94b      	cbnz	r3, 80038ce <__swsetup_r+0x7a>
 80038ba:	89a3      	ldrh	r3, [r4, #12]
 80038bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80038c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c4:	d003      	beq.n	80038ce <__swsetup_r+0x7a>
 80038c6:	4621      	mov	r1, r4
 80038c8:	4628      	mov	r0, r5
 80038ca:	f001 fd84 	bl	80053d6 <__smakebuf_r>
 80038ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038d2:	f013 0201 	ands.w	r2, r3, #1
 80038d6:	d00a      	beq.n	80038ee <__swsetup_r+0x9a>
 80038d8:	2200      	movs	r2, #0
 80038da:	60a2      	str	r2, [r4, #8]
 80038dc:	6962      	ldr	r2, [r4, #20]
 80038de:	4252      	negs	r2, r2
 80038e0:	61a2      	str	r2, [r4, #24]
 80038e2:	6922      	ldr	r2, [r4, #16]
 80038e4:	b942      	cbnz	r2, 80038f8 <__swsetup_r+0xa4>
 80038e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80038ea:	d1c5      	bne.n	8003878 <__swsetup_r+0x24>
 80038ec:	bd38      	pop	{r3, r4, r5, pc}
 80038ee:	0799      	lsls	r1, r3, #30
 80038f0:	bf58      	it	pl
 80038f2:	6962      	ldrpl	r2, [r4, #20]
 80038f4:	60a2      	str	r2, [r4, #8]
 80038f6:	e7f4      	b.n	80038e2 <__swsetup_r+0x8e>
 80038f8:	2000      	movs	r0, #0
 80038fa:	e7f7      	b.n	80038ec <__swsetup_r+0x98>
 80038fc:	20000018 	.word	0x20000018

08003900 <memset>:
 8003900:	4603      	mov	r3, r0
 8003902:	4402      	add	r2, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <_localeconv_r>:
 8003910:	4800      	ldr	r0, [pc, #0]	@ (8003914 <_localeconv_r+0x4>)
 8003912:	4770      	bx	lr
 8003914:	20000158 	.word	0x20000158

08003918 <_close_r>:
 8003918:	b538      	push	{r3, r4, r5, lr}
 800391a:	2300      	movs	r3, #0
 800391c:	4d05      	ldr	r5, [pc, #20]	@ (8003934 <_close_r+0x1c>)
 800391e:	4604      	mov	r4, r0
 8003920:	4608      	mov	r0, r1
 8003922:	602b      	str	r3, [r5, #0]
 8003924:	f7fd fbb5 	bl	8001092 <_close>
 8003928:	1c43      	adds	r3, r0, #1
 800392a:	d102      	bne.n	8003932 <_close_r+0x1a>
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	b103      	cbz	r3, 8003932 <_close_r+0x1a>
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	bd38      	pop	{r3, r4, r5, pc}
 8003934:	200003a4 	.word	0x200003a4

08003938 <_lseek_r>:
 8003938:	b538      	push	{r3, r4, r5, lr}
 800393a:	4604      	mov	r4, r0
 800393c:	4608      	mov	r0, r1
 800393e:	4611      	mov	r1, r2
 8003940:	2200      	movs	r2, #0
 8003942:	4d05      	ldr	r5, [pc, #20]	@ (8003958 <_lseek_r+0x20>)
 8003944:	602a      	str	r2, [r5, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	f7fd fbc7 	bl	80010da <_lseek>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	d102      	bne.n	8003956 <_lseek_r+0x1e>
 8003950:	682b      	ldr	r3, [r5, #0]
 8003952:	b103      	cbz	r3, 8003956 <_lseek_r+0x1e>
 8003954:	6023      	str	r3, [r4, #0]
 8003956:	bd38      	pop	{r3, r4, r5, pc}
 8003958:	200003a4 	.word	0x200003a4

0800395c <_read_r>:
 800395c:	b538      	push	{r3, r4, r5, lr}
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	4611      	mov	r1, r2
 8003964:	2200      	movs	r2, #0
 8003966:	4d05      	ldr	r5, [pc, #20]	@ (800397c <_read_r+0x20>)
 8003968:	602a      	str	r2, [r5, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	f7fd fb74 	bl	8001058 <_read>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d102      	bne.n	800397a <_read_r+0x1e>
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	b103      	cbz	r3, 800397a <_read_r+0x1e>
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	200003a4 	.word	0x200003a4

08003980 <_write_r>:
 8003980:	b538      	push	{r3, r4, r5, lr}
 8003982:	4604      	mov	r4, r0
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	2200      	movs	r2, #0
 800398a:	4d05      	ldr	r5, [pc, #20]	@ (80039a0 <_write_r+0x20>)
 800398c:	602a      	str	r2, [r5, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	f7fd f8a0 	bl	8000ad4 <_write>
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	d102      	bne.n	800399e <_write_r+0x1e>
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	b103      	cbz	r3, 800399e <_write_r+0x1e>
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	bd38      	pop	{r3, r4, r5, pc}
 80039a0:	200003a4 	.word	0x200003a4

080039a4 <__errno>:
 80039a4:	4b01      	ldr	r3, [pc, #4]	@ (80039ac <__errno+0x8>)
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000018 	.word	0x20000018

080039b0 <__libc_init_array>:
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	2600      	movs	r6, #0
 80039b4:	4d0c      	ldr	r5, [pc, #48]	@ (80039e8 <__libc_init_array+0x38>)
 80039b6:	4c0d      	ldr	r4, [pc, #52]	@ (80039ec <__libc_init_array+0x3c>)
 80039b8:	1b64      	subs	r4, r4, r5
 80039ba:	10a4      	asrs	r4, r4, #2
 80039bc:	42a6      	cmp	r6, r4
 80039be:	d109      	bne.n	80039d4 <__libc_init_array+0x24>
 80039c0:	f001 fe6a 	bl	8005698 <_init>
 80039c4:	2600      	movs	r6, #0
 80039c6:	4d0a      	ldr	r5, [pc, #40]	@ (80039f0 <__libc_init_array+0x40>)
 80039c8:	4c0a      	ldr	r4, [pc, #40]	@ (80039f4 <__libc_init_array+0x44>)
 80039ca:	1b64      	subs	r4, r4, r5
 80039cc:	10a4      	asrs	r4, r4, #2
 80039ce:	42a6      	cmp	r6, r4
 80039d0:	d105      	bne.n	80039de <__libc_init_array+0x2e>
 80039d2:	bd70      	pop	{r4, r5, r6, pc}
 80039d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d8:	4798      	blx	r3
 80039da:	3601      	adds	r6, #1
 80039dc:	e7ee      	b.n	80039bc <__libc_init_array+0xc>
 80039de:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e2:	4798      	blx	r3
 80039e4:	3601      	adds	r6, #1
 80039e6:	e7f2      	b.n	80039ce <__libc_init_array+0x1e>
 80039e8:	08005b80 	.word	0x08005b80
 80039ec:	08005b80 	.word	0x08005b80
 80039f0:	08005b80 	.word	0x08005b80
 80039f4:	08005b84 	.word	0x08005b84

080039f8 <__retarget_lock_init_recursive>:
 80039f8:	4770      	bx	lr

080039fa <__retarget_lock_acquire_recursive>:
 80039fa:	4770      	bx	lr

080039fc <__retarget_lock_release_recursive>:
 80039fc:	4770      	bx	lr

080039fe <memchr>:
 80039fe:	4603      	mov	r3, r0
 8003a00:	b510      	push	{r4, lr}
 8003a02:	b2c9      	uxtb	r1, r1
 8003a04:	4402      	add	r2, r0
 8003a06:	4293      	cmp	r3, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	d101      	bne.n	8003a10 <memchr+0x12>
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	e003      	b.n	8003a18 <memchr+0x1a>
 8003a10:	7804      	ldrb	r4, [r0, #0]
 8003a12:	3301      	adds	r3, #1
 8003a14:	428c      	cmp	r4, r1
 8003a16:	d1f6      	bne.n	8003a06 <memchr+0x8>
 8003a18:	bd10      	pop	{r4, pc}

08003a1a <quorem>:
 8003a1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a1e:	6903      	ldr	r3, [r0, #16]
 8003a20:	690c      	ldr	r4, [r1, #16]
 8003a22:	4607      	mov	r7, r0
 8003a24:	42a3      	cmp	r3, r4
 8003a26:	db7e      	blt.n	8003b26 <quorem+0x10c>
 8003a28:	3c01      	subs	r4, #1
 8003a2a:	00a3      	lsls	r3, r4, #2
 8003a2c:	f100 0514 	add.w	r5, r0, #20
 8003a30:	f101 0814 	add.w	r8, r1, #20
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003a40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a44:	3301      	adds	r3, #1
 8003a46:	429a      	cmp	r2, r3
 8003a48:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003a50:	d32e      	bcc.n	8003ab0 <quorem+0x96>
 8003a52:	f04f 0a00 	mov.w	sl, #0
 8003a56:	46c4      	mov	ip, r8
 8003a58:	46ae      	mov	lr, r5
 8003a5a:	46d3      	mov	fp, sl
 8003a5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003a60:	b298      	uxth	r0, r3
 8003a62:	fb06 a000 	mla	r0, r6, r0, sl
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	0c02      	lsrs	r2, r0, #16
 8003a6a:	fb06 2303 	mla	r3, r6, r3, r2
 8003a6e:	f8de 2000 	ldr.w	r2, [lr]
 8003a72:	b280      	uxth	r0, r0
 8003a74:	b292      	uxth	r2, r2
 8003a76:	1a12      	subs	r2, r2, r0
 8003a78:	445a      	add	r2, fp
 8003a7a:	f8de 0000 	ldr.w	r0, [lr]
 8003a7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003a88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003a8c:	b292      	uxth	r2, r2
 8003a8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003a92:	45e1      	cmp	r9, ip
 8003a94:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003a98:	f84e 2b04 	str.w	r2, [lr], #4
 8003a9c:	d2de      	bcs.n	8003a5c <quorem+0x42>
 8003a9e:	9b00      	ldr	r3, [sp, #0]
 8003aa0:	58eb      	ldr	r3, [r5, r3]
 8003aa2:	b92b      	cbnz	r3, 8003ab0 <quorem+0x96>
 8003aa4:	9b01      	ldr	r3, [sp, #4]
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	429d      	cmp	r5, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	d32f      	bcc.n	8003b0e <quorem+0xf4>
 8003aae:	613c      	str	r4, [r7, #16]
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f001 f97b 	bl	8004dac <__mcmp>
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	db25      	blt.n	8003b06 <quorem+0xec>
 8003aba:	4629      	mov	r1, r5
 8003abc:	2000      	movs	r0, #0
 8003abe:	f858 2b04 	ldr.w	r2, [r8], #4
 8003ac2:	f8d1 c000 	ldr.w	ip, [r1]
 8003ac6:	fa1f fe82 	uxth.w	lr, r2
 8003aca:	fa1f f38c 	uxth.w	r3, ip
 8003ace:	eba3 030e 	sub.w	r3, r3, lr
 8003ad2:	4403      	add	r3, r0
 8003ad4:	0c12      	lsrs	r2, r2, #16
 8003ad6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003ada:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ae4:	45c1      	cmp	r9, r8
 8003ae6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003aea:	f841 3b04 	str.w	r3, [r1], #4
 8003aee:	d2e6      	bcs.n	8003abe <quorem+0xa4>
 8003af0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003af4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003af8:	b922      	cbnz	r2, 8003b04 <quorem+0xea>
 8003afa:	3b04      	subs	r3, #4
 8003afc:	429d      	cmp	r5, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	d30b      	bcc.n	8003b1a <quorem+0x100>
 8003b02:	613c      	str	r4, [r7, #16]
 8003b04:	3601      	adds	r6, #1
 8003b06:	4630      	mov	r0, r6
 8003b08:	b003      	add	sp, #12
 8003b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	3b04      	subs	r3, #4
 8003b12:	2a00      	cmp	r2, #0
 8003b14:	d1cb      	bne.n	8003aae <quorem+0x94>
 8003b16:	3c01      	subs	r4, #1
 8003b18:	e7c6      	b.n	8003aa8 <quorem+0x8e>
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	3b04      	subs	r3, #4
 8003b1e:	2a00      	cmp	r2, #0
 8003b20:	d1ef      	bne.n	8003b02 <quorem+0xe8>
 8003b22:	3c01      	subs	r4, #1
 8003b24:	e7ea      	b.n	8003afc <quorem+0xe2>
 8003b26:	2000      	movs	r0, #0
 8003b28:	e7ee      	b.n	8003b08 <quorem+0xee>
 8003b2a:	0000      	movs	r0, r0
 8003b2c:	0000      	movs	r0, r0
	...

08003b30 <_dtoa_r>:
 8003b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b34:	4614      	mov	r4, r2
 8003b36:	461d      	mov	r5, r3
 8003b38:	69c7      	ldr	r7, [r0, #28]
 8003b3a:	b097      	sub	sp, #92	@ 0x5c
 8003b3c:	4683      	mov	fp, r0
 8003b3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003b42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003b44:	b97f      	cbnz	r7, 8003b66 <_dtoa_r+0x36>
 8003b46:	2010      	movs	r0, #16
 8003b48:	f000 fe02 	bl	8004750 <malloc>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	f8cb 001c 	str.w	r0, [fp, #28]
 8003b52:	b920      	cbnz	r0, 8003b5e <_dtoa_r+0x2e>
 8003b54:	21ef      	movs	r1, #239	@ 0xef
 8003b56:	4ba8      	ldr	r3, [pc, #672]	@ (8003df8 <_dtoa_r+0x2c8>)
 8003b58:	48a8      	ldr	r0, [pc, #672]	@ (8003dfc <_dtoa_r+0x2cc>)
 8003b5a:	f001 fced 	bl	8005538 <__assert_func>
 8003b5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003b62:	6007      	str	r7, [r0, #0]
 8003b64:	60c7      	str	r7, [r0, #12]
 8003b66:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	b159      	cbz	r1, 8003b86 <_dtoa_r+0x56>
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	2301      	movs	r3, #1
 8003b72:	4093      	lsls	r3, r2
 8003b74:	604a      	str	r2, [r1, #4]
 8003b76:	608b      	str	r3, [r1, #8]
 8003b78:	4658      	mov	r0, fp
 8003b7a:	f000 fedf 	bl	800493c <_Bfree>
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	1e2b      	subs	r3, r5, #0
 8003b88:	bfaf      	iteee	ge
 8003b8a:	2300      	movge	r3, #0
 8003b8c:	2201      	movlt	r2, #1
 8003b8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003b92:	9303      	strlt	r3, [sp, #12]
 8003b94:	bfa8      	it	ge
 8003b96:	6033      	strge	r3, [r6, #0]
 8003b98:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003b9c:	4b98      	ldr	r3, [pc, #608]	@ (8003e00 <_dtoa_r+0x2d0>)
 8003b9e:	bfb8      	it	lt
 8003ba0:	6032      	strlt	r2, [r6, #0]
 8003ba2:	ea33 0308 	bics.w	r3, r3, r8
 8003ba6:	d112      	bne.n	8003bce <_dtoa_r+0x9e>
 8003ba8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003bac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003bb4:	4323      	orrs	r3, r4
 8003bb6:	f000 8550 	beq.w	800465a <_dtoa_r+0xb2a>
 8003bba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003bbc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003e04 <_dtoa_r+0x2d4>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8552 	beq.w	800466a <_dtoa_r+0xb3a>
 8003bc6:	f10a 0303 	add.w	r3, sl, #3
 8003bca:	f000 bd4c 	b.w	8004666 <_dtoa_r+0xb36>
 8003bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f7fc fee3 	bl	80009a8 <__aeabi_dcmpeq>
 8003be2:	4607      	mov	r7, r0
 8003be4:	b158      	cbz	r0, 8003bfe <_dtoa_r+0xce>
 8003be6:	2301      	movs	r3, #1
 8003be8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003bee:	b113      	cbz	r3, 8003bf6 <_dtoa_r+0xc6>
 8003bf0:	4b85      	ldr	r3, [pc, #532]	@ (8003e08 <_dtoa_r+0x2d8>)
 8003bf2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003e0c <_dtoa_r+0x2dc>
 8003bfa:	f000 bd36 	b.w	800466a <_dtoa_r+0xb3a>
 8003bfe:	ab14      	add	r3, sp, #80	@ 0x50
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	ab15      	add	r3, sp, #84	@ 0x54
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	4658      	mov	r0, fp
 8003c08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003c0c:	f001 f97e 	bl	8004f0c <__d2b>
 8003c10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003c14:	4681      	mov	r9, r0
 8003c16:	2e00      	cmp	r6, #0
 8003c18:	d077      	beq.n	8003d0a <_dtoa_r+0x1da>
 8003c1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003c2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003c30:	9712      	str	r7, [sp, #72]	@ 0x48
 8003c32:	4619      	mov	r1, r3
 8003c34:	2200      	movs	r2, #0
 8003c36:	4b76      	ldr	r3, [pc, #472]	@ (8003e10 <_dtoa_r+0x2e0>)
 8003c38:	f7fc fa96 	bl	8000168 <__aeabi_dsub>
 8003c3c:	a368      	add	r3, pc, #416	@ (adr r3, 8003de0 <_dtoa_r+0x2b0>)
 8003c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c42:	f7fc fc49 	bl	80004d8 <__aeabi_dmul>
 8003c46:	a368      	add	r3, pc, #416	@ (adr r3, 8003de8 <_dtoa_r+0x2b8>)
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f7fc fa8e 	bl	800016c <__adddf3>
 8003c50:	4604      	mov	r4, r0
 8003c52:	4630      	mov	r0, r6
 8003c54:	460d      	mov	r5, r1
 8003c56:	f7fc fbd5 	bl	8000404 <__aeabi_i2d>
 8003c5a:	a365      	add	r3, pc, #404	@ (adr r3, 8003df0 <_dtoa_r+0x2c0>)
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f7fc fc3a 	bl	80004d8 <__aeabi_dmul>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fa7e 	bl	800016c <__adddf3>
 8003c70:	4604      	mov	r4, r0
 8003c72:	460d      	mov	r5, r1
 8003c74:	f7fc fee0 	bl	8000a38 <__aeabi_d2iz>
 8003c78:	2200      	movs	r2, #0
 8003c7a:	4607      	mov	r7, r0
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4620      	mov	r0, r4
 8003c80:	4629      	mov	r1, r5
 8003c82:	f7fc fe9b 	bl	80009bc <__aeabi_dcmplt>
 8003c86:	b140      	cbz	r0, 8003c9a <_dtoa_r+0x16a>
 8003c88:	4638      	mov	r0, r7
 8003c8a:	f7fc fbbb 	bl	8000404 <__aeabi_i2d>
 8003c8e:	4622      	mov	r2, r4
 8003c90:	462b      	mov	r3, r5
 8003c92:	f7fc fe89 	bl	80009a8 <__aeabi_dcmpeq>
 8003c96:	b900      	cbnz	r0, 8003c9a <_dtoa_r+0x16a>
 8003c98:	3f01      	subs	r7, #1
 8003c9a:	2f16      	cmp	r7, #22
 8003c9c:	d853      	bhi.n	8003d46 <_dtoa_r+0x216>
 8003c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e14 <_dtoa_r+0x2e4>)
 8003ca4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f7fc fe86 	bl	80009bc <__aeabi_dcmplt>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	d04a      	beq.n	8003d4a <_dtoa_r+0x21a>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	3f01      	subs	r7, #1
 8003cb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003cba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003cbc:	1b9b      	subs	r3, r3, r6
 8003cbe:	1e5a      	subs	r2, r3, #1
 8003cc0:	bf46      	itte	mi
 8003cc2:	f1c3 0801 	rsbmi	r8, r3, #1
 8003cc6:	2300      	movmi	r3, #0
 8003cc8:	f04f 0800 	movpl.w	r8, #0
 8003ccc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003cce:	bf48      	it	mi
 8003cd0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003cd2:	2f00      	cmp	r7, #0
 8003cd4:	db3b      	blt.n	8003d4e <_dtoa_r+0x21e>
 8003cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cd8:	970e      	str	r7, [sp, #56]	@ 0x38
 8003cda:	443b      	add	r3, r7
 8003cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cde:	2300      	movs	r3, #0
 8003ce0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ce2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003ce4:	2b09      	cmp	r3, #9
 8003ce6:	d866      	bhi.n	8003db6 <_dtoa_r+0x286>
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	bfc4      	itt	gt
 8003cec:	3b04      	subgt	r3, #4
 8003cee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003cf0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003cf2:	bfc8      	it	gt
 8003cf4:	2400      	movgt	r4, #0
 8003cf6:	f1a3 0302 	sub.w	r3, r3, #2
 8003cfa:	bfd8      	it	le
 8003cfc:	2401      	movle	r4, #1
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d864      	bhi.n	8003dcc <_dtoa_r+0x29c>
 8003d02:	e8df f003 	tbb	[pc, r3]
 8003d06:	382b      	.short	0x382b
 8003d08:	5636      	.short	0x5636
 8003d0a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003d0e:	441e      	add	r6, r3
 8003d10:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	bfc1      	itttt	gt
 8003d18:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003d1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003d20:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003d24:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003d28:	bfd6      	itet	le
 8003d2a:	f1c3 0320 	rsble	r3, r3, #32
 8003d2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003d32:	fa04 f003 	lslle.w	r0, r4, r3
 8003d36:	f7fc fb55 	bl	80003e4 <__aeabi_ui2d>
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003d40:	3e01      	subs	r6, #1
 8003d42:	9212      	str	r2, [sp, #72]	@ 0x48
 8003d44:	e775      	b.n	8003c32 <_dtoa_r+0x102>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e7b6      	b.n	8003cb8 <_dtoa_r+0x188>
 8003d4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003d4c:	e7b5      	b.n	8003cba <_dtoa_r+0x18a>
 8003d4e:	427b      	negs	r3, r7
 8003d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d52:	2300      	movs	r3, #0
 8003d54:	eba8 0807 	sub.w	r8, r8, r7
 8003d58:	930e      	str	r3, [sp, #56]	@ 0x38
 8003d5a:	e7c2      	b.n	8003ce2 <_dtoa_r+0x1b2>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	dc35      	bgt.n	8003dd2 <_dtoa_r+0x2a2>
 8003d66:	2301      	movs	r3, #1
 8003d68:	461a      	mov	r2, r3
 8003d6a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003d6e:	9221      	str	r2, [sp, #132]	@ 0x84
 8003d70:	e00b      	b.n	8003d8a <_dtoa_r+0x25a>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e7f3      	b.n	8003d5e <_dtoa_r+0x22e>
 8003d76:	2300      	movs	r3, #0
 8003d78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	9308      	str	r3, [sp, #32]
 8003d80:	3301      	adds	r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	9307      	str	r3, [sp, #28]
 8003d86:	bfb8      	it	lt
 8003d88:	2301      	movlt	r3, #1
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003d92:	f102 0514 	add.w	r5, r2, #20
 8003d96:	429d      	cmp	r5, r3
 8003d98:	d91f      	bls.n	8003dda <_dtoa_r+0x2aa>
 8003d9a:	6041      	str	r1, [r0, #4]
 8003d9c:	4658      	mov	r0, fp
 8003d9e:	f000 fd8d 	bl	80048bc <_Balloc>
 8003da2:	4682      	mov	sl, r0
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d139      	bne.n	8003e1c <_dtoa_r+0x2ec>
 8003da8:	4602      	mov	r2, r0
 8003daa:	f240 11af 	movw	r1, #431	@ 0x1af
 8003dae:	4b1a      	ldr	r3, [pc, #104]	@ (8003e18 <_dtoa_r+0x2e8>)
 8003db0:	e6d2      	b.n	8003b58 <_dtoa_r+0x28>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e7e0      	b.n	8003d78 <_dtoa_r+0x248>
 8003db6:	2401      	movs	r4, #1
 8003db8:	2300      	movs	r3, #0
 8003dba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003dbc:	9320      	str	r3, [sp, #128]	@ 0x80
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003dc8:	2312      	movs	r3, #18
 8003dca:	e7d0      	b.n	8003d6e <_dtoa_r+0x23e>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003dd0:	e7f5      	b.n	8003dbe <_dtoa_r+0x28e>
 8003dd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003dd4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003dd8:	e7d7      	b.n	8003d8a <_dtoa_r+0x25a>
 8003dda:	3101      	adds	r1, #1
 8003ddc:	0052      	lsls	r2, r2, #1
 8003dde:	e7d8      	b.n	8003d92 <_dtoa_r+0x262>
 8003de0:	636f4361 	.word	0x636f4361
 8003de4:	3fd287a7 	.word	0x3fd287a7
 8003de8:	8b60c8b3 	.word	0x8b60c8b3
 8003dec:	3fc68a28 	.word	0x3fc68a28
 8003df0:	509f79fb 	.word	0x509f79fb
 8003df4:	3fd34413 	.word	0x3fd34413
 8003df8:	0800584b 	.word	0x0800584b
 8003dfc:	08005862 	.word	0x08005862
 8003e00:	7ff00000 	.word	0x7ff00000
 8003e04:	08005847 	.word	0x08005847
 8003e08:	0800581b 	.word	0x0800581b
 8003e0c:	0800581a 	.word	0x0800581a
 8003e10:	3ff80000 	.word	0x3ff80000
 8003e14:	08005958 	.word	0x08005958
 8003e18:	080058ba 	.word	0x080058ba
 8003e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003e20:	6018      	str	r0, [r3, #0]
 8003e22:	9b07      	ldr	r3, [sp, #28]
 8003e24:	2b0e      	cmp	r3, #14
 8003e26:	f200 80a4 	bhi.w	8003f72 <_dtoa_r+0x442>
 8003e2a:	2c00      	cmp	r4, #0
 8003e2c:	f000 80a1 	beq.w	8003f72 <_dtoa_r+0x442>
 8003e30:	2f00      	cmp	r7, #0
 8003e32:	dd33      	ble.n	8003e9c <_dtoa_r+0x36c>
 8003e34:	4b86      	ldr	r3, [pc, #536]	@ (8004050 <_dtoa_r+0x520>)
 8003e36:	f007 020f 	and.w	r2, r7, #15
 8003e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e3e:	05f8      	lsls	r0, r7, #23
 8003e40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003e48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003e4c:	d516      	bpl.n	8003e7c <_dtoa_r+0x34c>
 8003e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e52:	4b80      	ldr	r3, [pc, #512]	@ (8004054 <_dtoa_r+0x524>)
 8003e54:	2603      	movs	r6, #3
 8003e56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e5a:	f7fc fc67 	bl	800072c <__aeabi_ddiv>
 8003e5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e62:	f004 040f 	and.w	r4, r4, #15
 8003e66:	4d7b      	ldr	r5, [pc, #492]	@ (8004054 <_dtoa_r+0x524>)
 8003e68:	b954      	cbnz	r4, 8003e80 <_dtoa_r+0x350>
 8003e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e72:	f7fc fc5b 	bl	800072c <__aeabi_ddiv>
 8003e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e7a:	e028      	b.n	8003ece <_dtoa_r+0x39e>
 8003e7c:	2602      	movs	r6, #2
 8003e7e:	e7f2      	b.n	8003e66 <_dtoa_r+0x336>
 8003e80:	07e1      	lsls	r1, r4, #31
 8003e82:	d508      	bpl.n	8003e96 <_dtoa_r+0x366>
 8003e84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e8c:	f7fc fb24 	bl	80004d8 <__aeabi_dmul>
 8003e90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e94:	3601      	adds	r6, #1
 8003e96:	1064      	asrs	r4, r4, #1
 8003e98:	3508      	adds	r5, #8
 8003e9a:	e7e5      	b.n	8003e68 <_dtoa_r+0x338>
 8003e9c:	f000 80d2 	beq.w	8004044 <_dtoa_r+0x514>
 8003ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ea4:	427c      	negs	r4, r7
 8003ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8004050 <_dtoa_r+0x520>)
 8003ea8:	f004 020f 	and.w	r2, r4, #15
 8003eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f7fc fb10 	bl	80004d8 <__aeabi_dmul>
 8003eb8:	2602      	movs	r6, #2
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ec0:	4d64      	ldr	r5, [pc, #400]	@ (8004054 <_dtoa_r+0x524>)
 8003ec2:	1124      	asrs	r4, r4, #4
 8003ec4:	2c00      	cmp	r4, #0
 8003ec6:	f040 80b2 	bne.w	800402e <_dtoa_r+0x4fe>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1d3      	bne.n	8003e76 <_dtoa_r+0x346>
 8003ece:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003ed2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80b7 	beq.w	8004048 <_dtoa_r+0x518>
 8003eda:	2200      	movs	r2, #0
 8003edc:	4620      	mov	r0, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	4b5d      	ldr	r3, [pc, #372]	@ (8004058 <_dtoa_r+0x528>)
 8003ee2:	f7fc fd6b 	bl	80009bc <__aeabi_dcmplt>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	f000 80ae 	beq.w	8004048 <_dtoa_r+0x518>
 8003eec:	9b07      	ldr	r3, [sp, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80aa 	beq.w	8004048 <_dtoa_r+0x518>
 8003ef4:	9b08      	ldr	r3, [sp, #32]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	dd37      	ble.n	8003f6a <_dtoa_r+0x43a>
 8003efa:	1e7b      	subs	r3, r7, #1
 8003efc:	4620      	mov	r0, r4
 8003efe:	9304      	str	r3, [sp, #16]
 8003f00:	2200      	movs	r2, #0
 8003f02:	4629      	mov	r1, r5
 8003f04:	4b55      	ldr	r3, [pc, #340]	@ (800405c <_dtoa_r+0x52c>)
 8003f06:	f7fc fae7 	bl	80004d8 <__aeabi_dmul>
 8003f0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f0e:	9c08      	ldr	r4, [sp, #32]
 8003f10:	3601      	adds	r6, #1
 8003f12:	4630      	mov	r0, r6
 8003f14:	f7fc fa76 	bl	8000404 <__aeabi_i2d>
 8003f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f1c:	f7fc fadc 	bl	80004d8 <__aeabi_dmul>
 8003f20:	2200      	movs	r2, #0
 8003f22:	4b4f      	ldr	r3, [pc, #316]	@ (8004060 <_dtoa_r+0x530>)
 8003f24:	f7fc f922 	bl	800016c <__adddf3>
 8003f28:	4605      	mov	r5, r0
 8003f2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003f2e:	2c00      	cmp	r4, #0
 8003f30:	f040 809a 	bne.w	8004068 <_dtoa_r+0x538>
 8003f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004064 <_dtoa_r+0x534>)
 8003f3c:	f7fc f914 	bl	8000168 <__aeabi_dsub>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f48:	462a      	mov	r2, r5
 8003f4a:	4633      	mov	r3, r6
 8003f4c:	f7fc fd54 	bl	80009f8 <__aeabi_dcmpgt>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	f040 828e 	bne.w	8004472 <_dtoa_r+0x942>
 8003f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f5a:	462a      	mov	r2, r5
 8003f5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003f60:	f7fc fd2c 	bl	80009bc <__aeabi_dcmplt>
 8003f64:	2800      	cmp	r0, #0
 8003f66:	f040 8127 	bne.w	80041b8 <_dtoa_r+0x688>
 8003f6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003f6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003f72:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f2c0 8163 	blt.w	8004240 <_dtoa_r+0x710>
 8003f7a:	2f0e      	cmp	r7, #14
 8003f7c:	f300 8160 	bgt.w	8004240 <_dtoa_r+0x710>
 8003f80:	4b33      	ldr	r3, [pc, #204]	@ (8004050 <_dtoa_r+0x520>)
 8003f82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003f86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f8a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	da03      	bge.n	8003f9c <_dtoa_r+0x46c>
 8003f94:	9b07      	ldr	r3, [sp, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f340 8100 	ble.w	800419c <_dtoa_r+0x66c>
 8003f9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003fa0:	4656      	mov	r6, sl
 8003fa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	4629      	mov	r1, r5
 8003faa:	f7fc fbbf 	bl	800072c <__aeabi_ddiv>
 8003fae:	f7fc fd43 	bl	8000a38 <__aeabi_d2iz>
 8003fb2:	4680      	mov	r8, r0
 8003fb4:	f7fc fa26 	bl	8000404 <__aeabi_i2d>
 8003fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fbc:	f7fc fa8c 	bl	80004d8 <__aeabi_dmul>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	f7fc f8ce 	bl	8000168 <__aeabi_dsub>
 8003fcc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003fd0:	9d07      	ldr	r5, [sp, #28]
 8003fd2:	f806 4b01 	strb.w	r4, [r6], #1
 8003fd6:	eba6 040a 	sub.w	r4, r6, sl
 8003fda:	42a5      	cmp	r5, r4
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	f040 8116 	bne.w	8004210 <_dtoa_r+0x6e0>
 8003fe4:	f7fc f8c2 	bl	800016c <__adddf3>
 8003fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fec:	4604      	mov	r4, r0
 8003fee:	460d      	mov	r5, r1
 8003ff0:	f7fc fd02 	bl	80009f8 <__aeabi_dcmpgt>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	f040 80f8 	bne.w	80041ea <_dtoa_r+0x6ba>
 8003ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ffe:	4620      	mov	r0, r4
 8004000:	4629      	mov	r1, r5
 8004002:	f7fc fcd1 	bl	80009a8 <__aeabi_dcmpeq>
 8004006:	b118      	cbz	r0, 8004010 <_dtoa_r+0x4e0>
 8004008:	f018 0f01 	tst.w	r8, #1
 800400c:	f040 80ed 	bne.w	80041ea <_dtoa_r+0x6ba>
 8004010:	4649      	mov	r1, r9
 8004012:	4658      	mov	r0, fp
 8004014:	f000 fc92 	bl	800493c <_Bfree>
 8004018:	2300      	movs	r3, #0
 800401a:	7033      	strb	r3, [r6, #0]
 800401c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800401e:	3701      	adds	r7, #1
 8004020:	601f      	str	r7, [r3, #0]
 8004022:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8320 	beq.w	800466a <_dtoa_r+0xb3a>
 800402a:	601e      	str	r6, [r3, #0]
 800402c:	e31d      	b.n	800466a <_dtoa_r+0xb3a>
 800402e:	07e2      	lsls	r2, r4, #31
 8004030:	d505      	bpl.n	800403e <_dtoa_r+0x50e>
 8004032:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004036:	f7fc fa4f 	bl	80004d8 <__aeabi_dmul>
 800403a:	2301      	movs	r3, #1
 800403c:	3601      	adds	r6, #1
 800403e:	1064      	asrs	r4, r4, #1
 8004040:	3508      	adds	r5, #8
 8004042:	e73f      	b.n	8003ec4 <_dtoa_r+0x394>
 8004044:	2602      	movs	r6, #2
 8004046:	e742      	b.n	8003ece <_dtoa_r+0x39e>
 8004048:	9c07      	ldr	r4, [sp, #28]
 800404a:	9704      	str	r7, [sp, #16]
 800404c:	e761      	b.n	8003f12 <_dtoa_r+0x3e2>
 800404e:	bf00      	nop
 8004050:	08005958 	.word	0x08005958
 8004054:	08005930 	.word	0x08005930
 8004058:	3ff00000 	.word	0x3ff00000
 800405c:	40240000 	.word	0x40240000
 8004060:	401c0000 	.word	0x401c0000
 8004064:	40140000 	.word	0x40140000
 8004068:	4b70      	ldr	r3, [pc, #448]	@ (800422c <_dtoa_r+0x6fc>)
 800406a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800406c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004070:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004074:	4454      	add	r4, sl
 8004076:	2900      	cmp	r1, #0
 8004078:	d045      	beq.n	8004106 <_dtoa_r+0x5d6>
 800407a:	2000      	movs	r0, #0
 800407c:	496c      	ldr	r1, [pc, #432]	@ (8004230 <_dtoa_r+0x700>)
 800407e:	f7fc fb55 	bl	800072c <__aeabi_ddiv>
 8004082:	4633      	mov	r3, r6
 8004084:	462a      	mov	r2, r5
 8004086:	f7fc f86f 	bl	8000168 <__aeabi_dsub>
 800408a:	4656      	mov	r6, sl
 800408c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004094:	f7fc fcd0 	bl	8000a38 <__aeabi_d2iz>
 8004098:	4605      	mov	r5, r0
 800409a:	f7fc f9b3 	bl	8000404 <__aeabi_i2d>
 800409e:	4602      	mov	r2, r0
 80040a0:	460b      	mov	r3, r1
 80040a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040a6:	f7fc f85f 	bl	8000168 <__aeabi_dsub>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	3530      	adds	r5, #48	@ 0x30
 80040b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80040b8:	f806 5b01 	strb.w	r5, [r6], #1
 80040bc:	f7fc fc7e 	bl	80009bc <__aeabi_dcmplt>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d163      	bne.n	800418c <_dtoa_r+0x65c>
 80040c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80040c8:	2000      	movs	r0, #0
 80040ca:	495a      	ldr	r1, [pc, #360]	@ (8004234 <_dtoa_r+0x704>)
 80040cc:	f7fc f84c 	bl	8000168 <__aeabi_dsub>
 80040d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80040d4:	f7fc fc72 	bl	80009bc <__aeabi_dcmplt>
 80040d8:	2800      	cmp	r0, #0
 80040da:	f040 8087 	bne.w	80041ec <_dtoa_r+0x6bc>
 80040de:	42a6      	cmp	r6, r4
 80040e0:	f43f af43 	beq.w	8003f6a <_dtoa_r+0x43a>
 80040e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80040e8:	2200      	movs	r2, #0
 80040ea:	4b53      	ldr	r3, [pc, #332]	@ (8004238 <_dtoa_r+0x708>)
 80040ec:	f7fc f9f4 	bl	80004d8 <__aeabi_dmul>
 80040f0:	2200      	movs	r2, #0
 80040f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80040f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004238 <_dtoa_r+0x708>)
 80040fc:	f7fc f9ec 	bl	80004d8 <__aeabi_dmul>
 8004100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004104:	e7c4      	b.n	8004090 <_dtoa_r+0x560>
 8004106:	4631      	mov	r1, r6
 8004108:	4628      	mov	r0, r5
 800410a:	f7fc f9e5 	bl	80004d8 <__aeabi_dmul>
 800410e:	4656      	mov	r6, sl
 8004110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004114:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800411a:	f7fc fc8d 	bl	8000a38 <__aeabi_d2iz>
 800411e:	4605      	mov	r5, r0
 8004120:	f7fc f970 	bl	8000404 <__aeabi_i2d>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800412c:	f7fc f81c 	bl	8000168 <__aeabi_dsub>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	3530      	adds	r5, #48	@ 0x30
 8004136:	f806 5b01 	strb.w	r5, [r6], #1
 800413a:	42a6      	cmp	r6, r4
 800413c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	d124      	bne.n	8004190 <_dtoa_r+0x660>
 8004146:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800414a:	4b39      	ldr	r3, [pc, #228]	@ (8004230 <_dtoa_r+0x700>)
 800414c:	f7fc f80e 	bl	800016c <__adddf3>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004158:	f7fc fc4e 	bl	80009f8 <__aeabi_dcmpgt>
 800415c:	2800      	cmp	r0, #0
 800415e:	d145      	bne.n	80041ec <_dtoa_r+0x6bc>
 8004160:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004164:	2000      	movs	r0, #0
 8004166:	4932      	ldr	r1, [pc, #200]	@ (8004230 <_dtoa_r+0x700>)
 8004168:	f7fb fffe 	bl	8000168 <__aeabi_dsub>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004174:	f7fc fc22 	bl	80009bc <__aeabi_dcmplt>
 8004178:	2800      	cmp	r0, #0
 800417a:	f43f aef6 	beq.w	8003f6a <_dtoa_r+0x43a>
 800417e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004180:	1e73      	subs	r3, r6, #1
 8004182:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004184:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004188:	2b30      	cmp	r3, #48	@ 0x30
 800418a:	d0f8      	beq.n	800417e <_dtoa_r+0x64e>
 800418c:	9f04      	ldr	r7, [sp, #16]
 800418e:	e73f      	b.n	8004010 <_dtoa_r+0x4e0>
 8004190:	4b29      	ldr	r3, [pc, #164]	@ (8004238 <_dtoa_r+0x708>)
 8004192:	f7fc f9a1 	bl	80004d8 <__aeabi_dmul>
 8004196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800419a:	e7bc      	b.n	8004116 <_dtoa_r+0x5e6>
 800419c:	d10c      	bne.n	80041b8 <_dtoa_r+0x688>
 800419e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041a2:	2200      	movs	r2, #0
 80041a4:	4b25      	ldr	r3, [pc, #148]	@ (800423c <_dtoa_r+0x70c>)
 80041a6:	f7fc f997 	bl	80004d8 <__aeabi_dmul>
 80041aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041ae:	f7fc fc19 	bl	80009e4 <__aeabi_dcmpge>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	f000 815b 	beq.w	800446e <_dtoa_r+0x93e>
 80041b8:	2400      	movs	r4, #0
 80041ba:	4625      	mov	r5, r4
 80041bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80041be:	4656      	mov	r6, sl
 80041c0:	43db      	mvns	r3, r3
 80041c2:	9304      	str	r3, [sp, #16]
 80041c4:	2700      	movs	r7, #0
 80041c6:	4621      	mov	r1, r4
 80041c8:	4658      	mov	r0, fp
 80041ca:	f000 fbb7 	bl	800493c <_Bfree>
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	d0dc      	beq.n	800418c <_dtoa_r+0x65c>
 80041d2:	b12f      	cbz	r7, 80041e0 <_dtoa_r+0x6b0>
 80041d4:	42af      	cmp	r7, r5
 80041d6:	d003      	beq.n	80041e0 <_dtoa_r+0x6b0>
 80041d8:	4639      	mov	r1, r7
 80041da:	4658      	mov	r0, fp
 80041dc:	f000 fbae 	bl	800493c <_Bfree>
 80041e0:	4629      	mov	r1, r5
 80041e2:	4658      	mov	r0, fp
 80041e4:	f000 fbaa 	bl	800493c <_Bfree>
 80041e8:	e7d0      	b.n	800418c <_dtoa_r+0x65c>
 80041ea:	9704      	str	r7, [sp, #16]
 80041ec:	4633      	mov	r3, r6
 80041ee:	461e      	mov	r6, r3
 80041f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80041f4:	2a39      	cmp	r2, #57	@ 0x39
 80041f6:	d107      	bne.n	8004208 <_dtoa_r+0x6d8>
 80041f8:	459a      	cmp	sl, r3
 80041fa:	d1f8      	bne.n	80041ee <_dtoa_r+0x6be>
 80041fc:	9a04      	ldr	r2, [sp, #16]
 80041fe:	3201      	adds	r2, #1
 8004200:	9204      	str	r2, [sp, #16]
 8004202:	2230      	movs	r2, #48	@ 0x30
 8004204:	f88a 2000 	strb.w	r2, [sl]
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	3201      	adds	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e7bd      	b.n	800418c <_dtoa_r+0x65c>
 8004210:	2200      	movs	r2, #0
 8004212:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <_dtoa_r+0x708>)
 8004214:	f7fc f960 	bl	80004d8 <__aeabi_dmul>
 8004218:	2200      	movs	r2, #0
 800421a:	2300      	movs	r3, #0
 800421c:	4604      	mov	r4, r0
 800421e:	460d      	mov	r5, r1
 8004220:	f7fc fbc2 	bl	80009a8 <__aeabi_dcmpeq>
 8004224:	2800      	cmp	r0, #0
 8004226:	f43f aebc 	beq.w	8003fa2 <_dtoa_r+0x472>
 800422a:	e6f1      	b.n	8004010 <_dtoa_r+0x4e0>
 800422c:	08005958 	.word	0x08005958
 8004230:	3fe00000 	.word	0x3fe00000
 8004234:	3ff00000 	.word	0x3ff00000
 8004238:	40240000 	.word	0x40240000
 800423c:	40140000 	.word	0x40140000
 8004240:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004242:	2a00      	cmp	r2, #0
 8004244:	f000 80db 	beq.w	80043fe <_dtoa_r+0x8ce>
 8004248:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800424a:	2a01      	cmp	r2, #1
 800424c:	f300 80bf 	bgt.w	80043ce <_dtoa_r+0x89e>
 8004250:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004252:	2a00      	cmp	r2, #0
 8004254:	f000 80b7 	beq.w	80043c6 <_dtoa_r+0x896>
 8004258:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800425c:	4646      	mov	r6, r8
 800425e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004260:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004262:	2101      	movs	r1, #1
 8004264:	441a      	add	r2, r3
 8004266:	4658      	mov	r0, fp
 8004268:	4498      	add	r8, r3
 800426a:	9209      	str	r2, [sp, #36]	@ 0x24
 800426c:	f000 fc1a 	bl	8004aa4 <__i2b>
 8004270:	4605      	mov	r5, r0
 8004272:	b15e      	cbz	r6, 800428c <_dtoa_r+0x75c>
 8004274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	dd08      	ble.n	800428c <_dtoa_r+0x75c>
 800427a:	42b3      	cmp	r3, r6
 800427c:	bfa8      	it	ge
 800427e:	4633      	movge	r3, r6
 8004280:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004282:	eba8 0803 	sub.w	r8, r8, r3
 8004286:	1af6      	subs	r6, r6, r3
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	9309      	str	r3, [sp, #36]	@ 0x24
 800428c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800428e:	b1f3      	cbz	r3, 80042ce <_dtoa_r+0x79e>
 8004290:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80b7 	beq.w	8004406 <_dtoa_r+0x8d6>
 8004298:	b18c      	cbz	r4, 80042be <_dtoa_r+0x78e>
 800429a:	4629      	mov	r1, r5
 800429c:	4622      	mov	r2, r4
 800429e:	4658      	mov	r0, fp
 80042a0:	f000 fcbe 	bl	8004c20 <__pow5mult>
 80042a4:	464a      	mov	r2, r9
 80042a6:	4601      	mov	r1, r0
 80042a8:	4605      	mov	r5, r0
 80042aa:	4658      	mov	r0, fp
 80042ac:	f000 fc10 	bl	8004ad0 <__multiply>
 80042b0:	4649      	mov	r1, r9
 80042b2:	9004      	str	r0, [sp, #16]
 80042b4:	4658      	mov	r0, fp
 80042b6:	f000 fb41 	bl	800493c <_Bfree>
 80042ba:	9b04      	ldr	r3, [sp, #16]
 80042bc:	4699      	mov	r9, r3
 80042be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042c0:	1b1a      	subs	r2, r3, r4
 80042c2:	d004      	beq.n	80042ce <_dtoa_r+0x79e>
 80042c4:	4649      	mov	r1, r9
 80042c6:	4658      	mov	r0, fp
 80042c8:	f000 fcaa 	bl	8004c20 <__pow5mult>
 80042cc:	4681      	mov	r9, r0
 80042ce:	2101      	movs	r1, #1
 80042d0:	4658      	mov	r0, fp
 80042d2:	f000 fbe7 	bl	8004aa4 <__i2b>
 80042d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80042d8:	4604      	mov	r4, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 81c9 	beq.w	8004672 <_dtoa_r+0xb42>
 80042e0:	461a      	mov	r2, r3
 80042e2:	4601      	mov	r1, r0
 80042e4:	4658      	mov	r0, fp
 80042e6:	f000 fc9b 	bl	8004c20 <__pow5mult>
 80042ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80042ec:	4604      	mov	r4, r0
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	f300 808f 	bgt.w	8004412 <_dtoa_r+0x8e2>
 80042f4:	9b02      	ldr	r3, [sp, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 8087 	bne.w	800440a <_dtoa_r+0x8da>
 80042fc:	9b03      	ldr	r3, [sp, #12]
 80042fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004302:	2b00      	cmp	r3, #0
 8004304:	f040 8083 	bne.w	800440e <_dtoa_r+0x8de>
 8004308:	9b03      	ldr	r3, [sp, #12]
 800430a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800430e:	0d1b      	lsrs	r3, r3, #20
 8004310:	051b      	lsls	r3, r3, #20
 8004312:	b12b      	cbz	r3, 8004320 <_dtoa_r+0x7f0>
 8004314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004316:	f108 0801 	add.w	r8, r8, #1
 800431a:	3301      	adds	r3, #1
 800431c:	9309      	str	r3, [sp, #36]	@ 0x24
 800431e:	2301      	movs	r3, #1
 8004320:	930a      	str	r3, [sp, #40]	@ 0x28
 8004322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 81aa 	beq.w	800467e <_dtoa_r+0xb4e>
 800432a:	6923      	ldr	r3, [r4, #16]
 800432c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004330:	6918      	ldr	r0, [r3, #16]
 8004332:	f000 fb6b 	bl	8004a0c <__hi0bits>
 8004336:	f1c0 0020 	rsb	r0, r0, #32
 800433a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800433c:	4418      	add	r0, r3
 800433e:	f010 001f 	ands.w	r0, r0, #31
 8004342:	d071      	beq.n	8004428 <_dtoa_r+0x8f8>
 8004344:	f1c0 0320 	rsb	r3, r0, #32
 8004348:	2b04      	cmp	r3, #4
 800434a:	dd65      	ble.n	8004418 <_dtoa_r+0x8e8>
 800434c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800434e:	f1c0 001c 	rsb	r0, r0, #28
 8004352:	4403      	add	r3, r0
 8004354:	4480      	add	r8, r0
 8004356:	4406      	add	r6, r0
 8004358:	9309      	str	r3, [sp, #36]	@ 0x24
 800435a:	f1b8 0f00 	cmp.w	r8, #0
 800435e:	dd05      	ble.n	800436c <_dtoa_r+0x83c>
 8004360:	4649      	mov	r1, r9
 8004362:	4642      	mov	r2, r8
 8004364:	4658      	mov	r0, fp
 8004366:	f000 fcb5 	bl	8004cd4 <__lshift>
 800436a:	4681      	mov	r9, r0
 800436c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800436e:	2b00      	cmp	r3, #0
 8004370:	dd05      	ble.n	800437e <_dtoa_r+0x84e>
 8004372:	4621      	mov	r1, r4
 8004374:	461a      	mov	r2, r3
 8004376:	4658      	mov	r0, fp
 8004378:	f000 fcac 	bl	8004cd4 <__lshift>
 800437c:	4604      	mov	r4, r0
 800437e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d053      	beq.n	800442c <_dtoa_r+0x8fc>
 8004384:	4621      	mov	r1, r4
 8004386:	4648      	mov	r0, r9
 8004388:	f000 fd10 	bl	8004dac <__mcmp>
 800438c:	2800      	cmp	r0, #0
 800438e:	da4d      	bge.n	800442c <_dtoa_r+0x8fc>
 8004390:	1e7b      	subs	r3, r7, #1
 8004392:	4649      	mov	r1, r9
 8004394:	9304      	str	r3, [sp, #16]
 8004396:	220a      	movs	r2, #10
 8004398:	2300      	movs	r3, #0
 800439a:	4658      	mov	r0, fp
 800439c:	f000 faf0 	bl	8004980 <__multadd>
 80043a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80043a2:	4681      	mov	r9, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 816c 	beq.w	8004682 <_dtoa_r+0xb52>
 80043aa:	2300      	movs	r3, #0
 80043ac:	4629      	mov	r1, r5
 80043ae:	220a      	movs	r2, #10
 80043b0:	4658      	mov	r0, fp
 80043b2:	f000 fae5 	bl	8004980 <__multadd>
 80043b6:	9b08      	ldr	r3, [sp, #32]
 80043b8:	4605      	mov	r5, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	dc61      	bgt.n	8004482 <_dtoa_r+0x952>
 80043be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	dc3b      	bgt.n	800443c <_dtoa_r+0x90c>
 80043c4:	e05d      	b.n	8004482 <_dtoa_r+0x952>
 80043c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80043c8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80043cc:	e746      	b.n	800425c <_dtoa_r+0x72c>
 80043ce:	9b07      	ldr	r3, [sp, #28]
 80043d0:	1e5c      	subs	r4, r3, #1
 80043d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043d4:	42a3      	cmp	r3, r4
 80043d6:	bfbf      	itttt	lt
 80043d8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80043da:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80043dc:	1ae3      	sublt	r3, r4, r3
 80043de:	18d2      	addlt	r2, r2, r3
 80043e0:	bfa8      	it	ge
 80043e2:	1b1c      	subge	r4, r3, r4
 80043e4:	9b07      	ldr	r3, [sp, #28]
 80043e6:	bfbe      	ittt	lt
 80043e8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80043ea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80043ec:	2400      	movlt	r4, #0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	bfb5      	itete	lt
 80043f2:	eba8 0603 	sublt.w	r6, r8, r3
 80043f6:	4646      	movge	r6, r8
 80043f8:	2300      	movlt	r3, #0
 80043fa:	9b07      	ldrge	r3, [sp, #28]
 80043fc:	e730      	b.n	8004260 <_dtoa_r+0x730>
 80043fe:	4646      	mov	r6, r8
 8004400:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004402:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004404:	e735      	b.n	8004272 <_dtoa_r+0x742>
 8004406:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004408:	e75c      	b.n	80042c4 <_dtoa_r+0x794>
 800440a:	2300      	movs	r3, #0
 800440c:	e788      	b.n	8004320 <_dtoa_r+0x7f0>
 800440e:	9b02      	ldr	r3, [sp, #8]
 8004410:	e786      	b.n	8004320 <_dtoa_r+0x7f0>
 8004412:	2300      	movs	r3, #0
 8004414:	930a      	str	r3, [sp, #40]	@ 0x28
 8004416:	e788      	b.n	800432a <_dtoa_r+0x7fa>
 8004418:	d09f      	beq.n	800435a <_dtoa_r+0x82a>
 800441a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800441c:	331c      	adds	r3, #28
 800441e:	441a      	add	r2, r3
 8004420:	4498      	add	r8, r3
 8004422:	441e      	add	r6, r3
 8004424:	9209      	str	r2, [sp, #36]	@ 0x24
 8004426:	e798      	b.n	800435a <_dtoa_r+0x82a>
 8004428:	4603      	mov	r3, r0
 800442a:	e7f6      	b.n	800441a <_dtoa_r+0x8ea>
 800442c:	9b07      	ldr	r3, [sp, #28]
 800442e:	9704      	str	r7, [sp, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	dc20      	bgt.n	8004476 <_dtoa_r+0x946>
 8004434:	9308      	str	r3, [sp, #32]
 8004436:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004438:	2b02      	cmp	r3, #2
 800443a:	dd1e      	ble.n	800447a <_dtoa_r+0x94a>
 800443c:	9b08      	ldr	r3, [sp, #32]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f47f aebc 	bne.w	80041bc <_dtoa_r+0x68c>
 8004444:	4621      	mov	r1, r4
 8004446:	2205      	movs	r2, #5
 8004448:	4658      	mov	r0, fp
 800444a:	f000 fa99 	bl	8004980 <__multadd>
 800444e:	4601      	mov	r1, r0
 8004450:	4604      	mov	r4, r0
 8004452:	4648      	mov	r0, r9
 8004454:	f000 fcaa 	bl	8004dac <__mcmp>
 8004458:	2800      	cmp	r0, #0
 800445a:	f77f aeaf 	ble.w	80041bc <_dtoa_r+0x68c>
 800445e:	2331      	movs	r3, #49	@ 0x31
 8004460:	4656      	mov	r6, sl
 8004462:	f806 3b01 	strb.w	r3, [r6], #1
 8004466:	9b04      	ldr	r3, [sp, #16]
 8004468:	3301      	adds	r3, #1
 800446a:	9304      	str	r3, [sp, #16]
 800446c:	e6aa      	b.n	80041c4 <_dtoa_r+0x694>
 800446e:	9c07      	ldr	r4, [sp, #28]
 8004470:	9704      	str	r7, [sp, #16]
 8004472:	4625      	mov	r5, r4
 8004474:	e7f3      	b.n	800445e <_dtoa_r+0x92e>
 8004476:	9b07      	ldr	r3, [sp, #28]
 8004478:	9308      	str	r3, [sp, #32]
 800447a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8104 	beq.w	800468a <_dtoa_r+0xb5a>
 8004482:	2e00      	cmp	r6, #0
 8004484:	dd05      	ble.n	8004492 <_dtoa_r+0x962>
 8004486:	4629      	mov	r1, r5
 8004488:	4632      	mov	r2, r6
 800448a:	4658      	mov	r0, fp
 800448c:	f000 fc22 	bl	8004cd4 <__lshift>
 8004490:	4605      	mov	r5, r0
 8004492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	d05a      	beq.n	800454e <_dtoa_r+0xa1e>
 8004498:	4658      	mov	r0, fp
 800449a:	6869      	ldr	r1, [r5, #4]
 800449c:	f000 fa0e 	bl	80048bc <_Balloc>
 80044a0:	4606      	mov	r6, r0
 80044a2:	b928      	cbnz	r0, 80044b0 <_dtoa_r+0x980>
 80044a4:	4602      	mov	r2, r0
 80044a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80044aa:	4b83      	ldr	r3, [pc, #524]	@ (80046b8 <_dtoa_r+0xb88>)
 80044ac:	f7ff bb54 	b.w	8003b58 <_dtoa_r+0x28>
 80044b0:	692a      	ldr	r2, [r5, #16]
 80044b2:	f105 010c 	add.w	r1, r5, #12
 80044b6:	3202      	adds	r2, #2
 80044b8:	0092      	lsls	r2, r2, #2
 80044ba:	300c      	adds	r0, #12
 80044bc:	f001 f82e 	bl	800551c <memcpy>
 80044c0:	2201      	movs	r2, #1
 80044c2:	4631      	mov	r1, r6
 80044c4:	4658      	mov	r0, fp
 80044c6:	f000 fc05 	bl	8004cd4 <__lshift>
 80044ca:	462f      	mov	r7, r5
 80044cc:	4605      	mov	r5, r0
 80044ce:	f10a 0301 	add.w	r3, sl, #1
 80044d2:	9307      	str	r3, [sp, #28]
 80044d4:	9b08      	ldr	r3, [sp, #32]
 80044d6:	4453      	add	r3, sl
 80044d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80044da:	9b02      	ldr	r3, [sp, #8]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80044e2:	9b07      	ldr	r3, [sp, #28]
 80044e4:	4621      	mov	r1, r4
 80044e6:	3b01      	subs	r3, #1
 80044e8:	4648      	mov	r0, r9
 80044ea:	9302      	str	r3, [sp, #8]
 80044ec:	f7ff fa95 	bl	8003a1a <quorem>
 80044f0:	4639      	mov	r1, r7
 80044f2:	9008      	str	r0, [sp, #32]
 80044f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80044f8:	4648      	mov	r0, r9
 80044fa:	f000 fc57 	bl	8004dac <__mcmp>
 80044fe:	462a      	mov	r2, r5
 8004500:	9009      	str	r0, [sp, #36]	@ 0x24
 8004502:	4621      	mov	r1, r4
 8004504:	4658      	mov	r0, fp
 8004506:	f000 fc6d 	bl	8004de4 <__mdiff>
 800450a:	68c2      	ldr	r2, [r0, #12]
 800450c:	4606      	mov	r6, r0
 800450e:	bb02      	cbnz	r2, 8004552 <_dtoa_r+0xa22>
 8004510:	4601      	mov	r1, r0
 8004512:	4648      	mov	r0, r9
 8004514:	f000 fc4a 	bl	8004dac <__mcmp>
 8004518:	4602      	mov	r2, r0
 800451a:	4631      	mov	r1, r6
 800451c:	4658      	mov	r0, fp
 800451e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004520:	f000 fa0c 	bl	800493c <_Bfree>
 8004524:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004526:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004528:	9e07      	ldr	r6, [sp, #28]
 800452a:	ea43 0102 	orr.w	r1, r3, r2
 800452e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004530:	4319      	orrs	r1, r3
 8004532:	d110      	bne.n	8004556 <_dtoa_r+0xa26>
 8004534:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004538:	d029      	beq.n	800458e <_dtoa_r+0xa5e>
 800453a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	dd02      	ble.n	8004546 <_dtoa_r+0xa16>
 8004540:	9b08      	ldr	r3, [sp, #32]
 8004542:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004546:	9b02      	ldr	r3, [sp, #8]
 8004548:	f883 8000 	strb.w	r8, [r3]
 800454c:	e63b      	b.n	80041c6 <_dtoa_r+0x696>
 800454e:	4628      	mov	r0, r5
 8004550:	e7bb      	b.n	80044ca <_dtoa_r+0x99a>
 8004552:	2201      	movs	r2, #1
 8004554:	e7e1      	b.n	800451a <_dtoa_r+0x9ea>
 8004556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004558:	2b00      	cmp	r3, #0
 800455a:	db04      	blt.n	8004566 <_dtoa_r+0xa36>
 800455c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800455e:	430b      	orrs	r3, r1
 8004560:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004562:	430b      	orrs	r3, r1
 8004564:	d120      	bne.n	80045a8 <_dtoa_r+0xa78>
 8004566:	2a00      	cmp	r2, #0
 8004568:	dded      	ble.n	8004546 <_dtoa_r+0xa16>
 800456a:	4649      	mov	r1, r9
 800456c:	2201      	movs	r2, #1
 800456e:	4658      	mov	r0, fp
 8004570:	f000 fbb0 	bl	8004cd4 <__lshift>
 8004574:	4621      	mov	r1, r4
 8004576:	4681      	mov	r9, r0
 8004578:	f000 fc18 	bl	8004dac <__mcmp>
 800457c:	2800      	cmp	r0, #0
 800457e:	dc03      	bgt.n	8004588 <_dtoa_r+0xa58>
 8004580:	d1e1      	bne.n	8004546 <_dtoa_r+0xa16>
 8004582:	f018 0f01 	tst.w	r8, #1
 8004586:	d0de      	beq.n	8004546 <_dtoa_r+0xa16>
 8004588:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800458c:	d1d8      	bne.n	8004540 <_dtoa_r+0xa10>
 800458e:	2339      	movs	r3, #57	@ 0x39
 8004590:	9a02      	ldr	r2, [sp, #8]
 8004592:	7013      	strb	r3, [r2, #0]
 8004594:	4633      	mov	r3, r6
 8004596:	461e      	mov	r6, r3
 8004598:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800459c:	3b01      	subs	r3, #1
 800459e:	2a39      	cmp	r2, #57	@ 0x39
 80045a0:	d052      	beq.n	8004648 <_dtoa_r+0xb18>
 80045a2:	3201      	adds	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e60e      	b.n	80041c6 <_dtoa_r+0x696>
 80045a8:	2a00      	cmp	r2, #0
 80045aa:	dd07      	ble.n	80045bc <_dtoa_r+0xa8c>
 80045ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80045b0:	d0ed      	beq.n	800458e <_dtoa_r+0xa5e>
 80045b2:	9a02      	ldr	r2, [sp, #8]
 80045b4:	f108 0301 	add.w	r3, r8, #1
 80045b8:	7013      	strb	r3, [r2, #0]
 80045ba:	e604      	b.n	80041c6 <_dtoa_r+0x696>
 80045bc:	9b07      	ldr	r3, [sp, #28]
 80045be:	9a07      	ldr	r2, [sp, #28]
 80045c0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80045c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d028      	beq.n	800461c <_dtoa_r+0xaec>
 80045ca:	4649      	mov	r1, r9
 80045cc:	2300      	movs	r3, #0
 80045ce:	220a      	movs	r2, #10
 80045d0:	4658      	mov	r0, fp
 80045d2:	f000 f9d5 	bl	8004980 <__multadd>
 80045d6:	42af      	cmp	r7, r5
 80045d8:	4681      	mov	r9, r0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	f04f 020a 	mov.w	r2, #10
 80045e2:	4639      	mov	r1, r7
 80045e4:	4658      	mov	r0, fp
 80045e6:	d107      	bne.n	80045f8 <_dtoa_r+0xac8>
 80045e8:	f000 f9ca 	bl	8004980 <__multadd>
 80045ec:	4607      	mov	r7, r0
 80045ee:	4605      	mov	r5, r0
 80045f0:	9b07      	ldr	r3, [sp, #28]
 80045f2:	3301      	adds	r3, #1
 80045f4:	9307      	str	r3, [sp, #28]
 80045f6:	e774      	b.n	80044e2 <_dtoa_r+0x9b2>
 80045f8:	f000 f9c2 	bl	8004980 <__multadd>
 80045fc:	4629      	mov	r1, r5
 80045fe:	4607      	mov	r7, r0
 8004600:	2300      	movs	r3, #0
 8004602:	220a      	movs	r2, #10
 8004604:	4658      	mov	r0, fp
 8004606:	f000 f9bb 	bl	8004980 <__multadd>
 800460a:	4605      	mov	r5, r0
 800460c:	e7f0      	b.n	80045f0 <_dtoa_r+0xac0>
 800460e:	9b08      	ldr	r3, [sp, #32]
 8004610:	2700      	movs	r7, #0
 8004612:	2b00      	cmp	r3, #0
 8004614:	bfcc      	ite	gt
 8004616:	461e      	movgt	r6, r3
 8004618:	2601      	movle	r6, #1
 800461a:	4456      	add	r6, sl
 800461c:	4649      	mov	r1, r9
 800461e:	2201      	movs	r2, #1
 8004620:	4658      	mov	r0, fp
 8004622:	f000 fb57 	bl	8004cd4 <__lshift>
 8004626:	4621      	mov	r1, r4
 8004628:	4681      	mov	r9, r0
 800462a:	f000 fbbf 	bl	8004dac <__mcmp>
 800462e:	2800      	cmp	r0, #0
 8004630:	dcb0      	bgt.n	8004594 <_dtoa_r+0xa64>
 8004632:	d102      	bne.n	800463a <_dtoa_r+0xb0a>
 8004634:	f018 0f01 	tst.w	r8, #1
 8004638:	d1ac      	bne.n	8004594 <_dtoa_r+0xa64>
 800463a:	4633      	mov	r3, r6
 800463c:	461e      	mov	r6, r3
 800463e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004642:	2a30      	cmp	r2, #48	@ 0x30
 8004644:	d0fa      	beq.n	800463c <_dtoa_r+0xb0c>
 8004646:	e5be      	b.n	80041c6 <_dtoa_r+0x696>
 8004648:	459a      	cmp	sl, r3
 800464a:	d1a4      	bne.n	8004596 <_dtoa_r+0xa66>
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	3301      	adds	r3, #1
 8004650:	9304      	str	r3, [sp, #16]
 8004652:	2331      	movs	r3, #49	@ 0x31
 8004654:	f88a 3000 	strb.w	r3, [sl]
 8004658:	e5b5      	b.n	80041c6 <_dtoa_r+0x696>
 800465a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800465c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80046bc <_dtoa_r+0xb8c>
 8004660:	b11b      	cbz	r3, 800466a <_dtoa_r+0xb3a>
 8004662:	f10a 0308 	add.w	r3, sl, #8
 8004666:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	4650      	mov	r0, sl
 800466c:	b017      	add	sp, #92	@ 0x5c
 800466e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004672:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004674:	2b01      	cmp	r3, #1
 8004676:	f77f ae3d 	ble.w	80042f4 <_dtoa_r+0x7c4>
 800467a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800467c:	930a      	str	r3, [sp, #40]	@ 0x28
 800467e:	2001      	movs	r0, #1
 8004680:	e65b      	b.n	800433a <_dtoa_r+0x80a>
 8004682:	9b08      	ldr	r3, [sp, #32]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f77f aed6 	ble.w	8004436 <_dtoa_r+0x906>
 800468a:	4656      	mov	r6, sl
 800468c:	4621      	mov	r1, r4
 800468e:	4648      	mov	r0, r9
 8004690:	f7ff f9c3 	bl	8003a1a <quorem>
 8004694:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004698:	9b08      	ldr	r3, [sp, #32]
 800469a:	f806 8b01 	strb.w	r8, [r6], #1
 800469e:	eba6 020a 	sub.w	r2, r6, sl
 80046a2:	4293      	cmp	r3, r2
 80046a4:	ddb3      	ble.n	800460e <_dtoa_r+0xade>
 80046a6:	4649      	mov	r1, r9
 80046a8:	2300      	movs	r3, #0
 80046aa:	220a      	movs	r2, #10
 80046ac:	4658      	mov	r0, fp
 80046ae:	f000 f967 	bl	8004980 <__multadd>
 80046b2:	4681      	mov	r9, r0
 80046b4:	e7ea      	b.n	800468c <_dtoa_r+0xb5c>
 80046b6:	bf00      	nop
 80046b8:	080058ba 	.word	0x080058ba
 80046bc:	0800583e 	.word	0x0800583e

080046c0 <_free_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4605      	mov	r5, r0
 80046c4:	2900      	cmp	r1, #0
 80046c6:	d040      	beq.n	800474a <_free_r+0x8a>
 80046c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046cc:	1f0c      	subs	r4, r1, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bfb8      	it	lt
 80046d2:	18e4      	addlt	r4, r4, r3
 80046d4:	f000 f8e6 	bl	80048a4 <__malloc_lock>
 80046d8:	4a1c      	ldr	r2, [pc, #112]	@ (800474c <_free_r+0x8c>)
 80046da:	6813      	ldr	r3, [r2, #0]
 80046dc:	b933      	cbnz	r3, 80046ec <_free_r+0x2c>
 80046de:	6063      	str	r3, [r4, #4]
 80046e0:	6014      	str	r4, [r2, #0]
 80046e2:	4628      	mov	r0, r5
 80046e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046e8:	f000 b8e2 	b.w	80048b0 <__malloc_unlock>
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	d908      	bls.n	8004702 <_free_r+0x42>
 80046f0:	6820      	ldr	r0, [r4, #0]
 80046f2:	1821      	adds	r1, r4, r0
 80046f4:	428b      	cmp	r3, r1
 80046f6:	bf01      	itttt	eq
 80046f8:	6819      	ldreq	r1, [r3, #0]
 80046fa:	685b      	ldreq	r3, [r3, #4]
 80046fc:	1809      	addeq	r1, r1, r0
 80046fe:	6021      	streq	r1, [r4, #0]
 8004700:	e7ed      	b.n	80046de <_free_r+0x1e>
 8004702:	461a      	mov	r2, r3
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	b10b      	cbz	r3, 800470c <_free_r+0x4c>
 8004708:	42a3      	cmp	r3, r4
 800470a:	d9fa      	bls.n	8004702 <_free_r+0x42>
 800470c:	6811      	ldr	r1, [r2, #0]
 800470e:	1850      	adds	r0, r2, r1
 8004710:	42a0      	cmp	r0, r4
 8004712:	d10b      	bne.n	800472c <_free_r+0x6c>
 8004714:	6820      	ldr	r0, [r4, #0]
 8004716:	4401      	add	r1, r0
 8004718:	1850      	adds	r0, r2, r1
 800471a:	4283      	cmp	r3, r0
 800471c:	6011      	str	r1, [r2, #0]
 800471e:	d1e0      	bne.n	80046e2 <_free_r+0x22>
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4408      	add	r0, r1
 8004726:	6010      	str	r0, [r2, #0]
 8004728:	6053      	str	r3, [r2, #4]
 800472a:	e7da      	b.n	80046e2 <_free_r+0x22>
 800472c:	d902      	bls.n	8004734 <_free_r+0x74>
 800472e:	230c      	movs	r3, #12
 8004730:	602b      	str	r3, [r5, #0]
 8004732:	e7d6      	b.n	80046e2 <_free_r+0x22>
 8004734:	6820      	ldr	r0, [r4, #0]
 8004736:	1821      	adds	r1, r4, r0
 8004738:	428b      	cmp	r3, r1
 800473a:	bf01      	itttt	eq
 800473c:	6819      	ldreq	r1, [r3, #0]
 800473e:	685b      	ldreq	r3, [r3, #4]
 8004740:	1809      	addeq	r1, r1, r0
 8004742:	6021      	streq	r1, [r4, #0]
 8004744:	6063      	str	r3, [r4, #4]
 8004746:	6054      	str	r4, [r2, #4]
 8004748:	e7cb      	b.n	80046e2 <_free_r+0x22>
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	200003b0 	.word	0x200003b0

08004750 <malloc>:
 8004750:	4b02      	ldr	r3, [pc, #8]	@ (800475c <malloc+0xc>)
 8004752:	4601      	mov	r1, r0
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	f000 b825 	b.w	80047a4 <_malloc_r>
 800475a:	bf00      	nop
 800475c:	20000018 	.word	0x20000018

08004760 <sbrk_aligned>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	4e0f      	ldr	r6, [pc, #60]	@ (80047a0 <sbrk_aligned+0x40>)
 8004764:	460c      	mov	r4, r1
 8004766:	6831      	ldr	r1, [r6, #0]
 8004768:	4605      	mov	r5, r0
 800476a:	b911      	cbnz	r1, 8004772 <sbrk_aligned+0x12>
 800476c:	f000 fec6 	bl	80054fc <_sbrk_r>
 8004770:	6030      	str	r0, [r6, #0]
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 fec1 	bl	80054fc <_sbrk_r>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d103      	bne.n	8004786 <sbrk_aligned+0x26>
 800477e:	f04f 34ff 	mov.w	r4, #4294967295
 8004782:	4620      	mov	r0, r4
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	1cc4      	adds	r4, r0, #3
 8004788:	f024 0403 	bic.w	r4, r4, #3
 800478c:	42a0      	cmp	r0, r4
 800478e:	d0f8      	beq.n	8004782 <sbrk_aligned+0x22>
 8004790:	1a21      	subs	r1, r4, r0
 8004792:	4628      	mov	r0, r5
 8004794:	f000 feb2 	bl	80054fc <_sbrk_r>
 8004798:	3001      	adds	r0, #1
 800479a:	d1f2      	bne.n	8004782 <sbrk_aligned+0x22>
 800479c:	e7ef      	b.n	800477e <sbrk_aligned+0x1e>
 800479e:	bf00      	nop
 80047a0:	200003ac 	.word	0x200003ac

080047a4 <_malloc_r>:
 80047a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047a8:	1ccd      	adds	r5, r1, #3
 80047aa:	f025 0503 	bic.w	r5, r5, #3
 80047ae:	3508      	adds	r5, #8
 80047b0:	2d0c      	cmp	r5, #12
 80047b2:	bf38      	it	cc
 80047b4:	250c      	movcc	r5, #12
 80047b6:	2d00      	cmp	r5, #0
 80047b8:	4606      	mov	r6, r0
 80047ba:	db01      	blt.n	80047c0 <_malloc_r+0x1c>
 80047bc:	42a9      	cmp	r1, r5
 80047be:	d904      	bls.n	80047ca <_malloc_r+0x26>
 80047c0:	230c      	movs	r3, #12
 80047c2:	6033      	str	r3, [r6, #0]
 80047c4:	2000      	movs	r0, #0
 80047c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048a0 <_malloc_r+0xfc>
 80047ce:	f000 f869 	bl	80048a4 <__malloc_lock>
 80047d2:	f8d8 3000 	ldr.w	r3, [r8]
 80047d6:	461c      	mov	r4, r3
 80047d8:	bb44      	cbnz	r4, 800482c <_malloc_r+0x88>
 80047da:	4629      	mov	r1, r5
 80047dc:	4630      	mov	r0, r6
 80047de:	f7ff ffbf 	bl	8004760 <sbrk_aligned>
 80047e2:	1c43      	adds	r3, r0, #1
 80047e4:	4604      	mov	r4, r0
 80047e6:	d158      	bne.n	800489a <_malloc_r+0xf6>
 80047e8:	f8d8 4000 	ldr.w	r4, [r8]
 80047ec:	4627      	mov	r7, r4
 80047ee:	2f00      	cmp	r7, #0
 80047f0:	d143      	bne.n	800487a <_malloc_r+0xd6>
 80047f2:	2c00      	cmp	r4, #0
 80047f4:	d04b      	beq.n	800488e <_malloc_r+0xea>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	4639      	mov	r1, r7
 80047fa:	4630      	mov	r0, r6
 80047fc:	eb04 0903 	add.w	r9, r4, r3
 8004800:	f000 fe7c 	bl	80054fc <_sbrk_r>
 8004804:	4581      	cmp	r9, r0
 8004806:	d142      	bne.n	800488e <_malloc_r+0xea>
 8004808:	6821      	ldr	r1, [r4, #0]
 800480a:	4630      	mov	r0, r6
 800480c:	1a6d      	subs	r5, r5, r1
 800480e:	4629      	mov	r1, r5
 8004810:	f7ff ffa6 	bl	8004760 <sbrk_aligned>
 8004814:	3001      	adds	r0, #1
 8004816:	d03a      	beq.n	800488e <_malloc_r+0xea>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	442b      	add	r3, r5
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	f8d8 3000 	ldr.w	r3, [r8]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	bb62      	cbnz	r2, 8004880 <_malloc_r+0xdc>
 8004826:	f8c8 7000 	str.w	r7, [r8]
 800482a:	e00f      	b.n	800484c <_malloc_r+0xa8>
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	1b52      	subs	r2, r2, r5
 8004830:	d420      	bmi.n	8004874 <_malloc_r+0xd0>
 8004832:	2a0b      	cmp	r2, #11
 8004834:	d917      	bls.n	8004866 <_malloc_r+0xc2>
 8004836:	1961      	adds	r1, r4, r5
 8004838:	42a3      	cmp	r3, r4
 800483a:	6025      	str	r5, [r4, #0]
 800483c:	bf18      	it	ne
 800483e:	6059      	strne	r1, [r3, #4]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	bf08      	it	eq
 8004844:	f8c8 1000 	streq.w	r1, [r8]
 8004848:	5162      	str	r2, [r4, r5]
 800484a:	604b      	str	r3, [r1, #4]
 800484c:	4630      	mov	r0, r6
 800484e:	f000 f82f 	bl	80048b0 <__malloc_unlock>
 8004852:	f104 000b 	add.w	r0, r4, #11
 8004856:	1d23      	adds	r3, r4, #4
 8004858:	f020 0007 	bic.w	r0, r0, #7
 800485c:	1ac2      	subs	r2, r0, r3
 800485e:	bf1c      	itt	ne
 8004860:	1a1b      	subne	r3, r3, r0
 8004862:	50a3      	strne	r3, [r4, r2]
 8004864:	e7af      	b.n	80047c6 <_malloc_r+0x22>
 8004866:	6862      	ldr	r2, [r4, #4]
 8004868:	42a3      	cmp	r3, r4
 800486a:	bf0c      	ite	eq
 800486c:	f8c8 2000 	streq.w	r2, [r8]
 8004870:	605a      	strne	r2, [r3, #4]
 8004872:	e7eb      	b.n	800484c <_malloc_r+0xa8>
 8004874:	4623      	mov	r3, r4
 8004876:	6864      	ldr	r4, [r4, #4]
 8004878:	e7ae      	b.n	80047d8 <_malloc_r+0x34>
 800487a:	463c      	mov	r4, r7
 800487c:	687f      	ldr	r7, [r7, #4]
 800487e:	e7b6      	b.n	80047ee <_malloc_r+0x4a>
 8004880:	461a      	mov	r2, r3
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	42a3      	cmp	r3, r4
 8004886:	d1fb      	bne.n	8004880 <_malloc_r+0xdc>
 8004888:	2300      	movs	r3, #0
 800488a:	6053      	str	r3, [r2, #4]
 800488c:	e7de      	b.n	800484c <_malloc_r+0xa8>
 800488e:	230c      	movs	r3, #12
 8004890:	4630      	mov	r0, r6
 8004892:	6033      	str	r3, [r6, #0]
 8004894:	f000 f80c 	bl	80048b0 <__malloc_unlock>
 8004898:	e794      	b.n	80047c4 <_malloc_r+0x20>
 800489a:	6005      	str	r5, [r0, #0]
 800489c:	e7d6      	b.n	800484c <_malloc_r+0xa8>
 800489e:	bf00      	nop
 80048a0:	200003b0 	.word	0x200003b0

080048a4 <__malloc_lock>:
 80048a4:	4801      	ldr	r0, [pc, #4]	@ (80048ac <__malloc_lock+0x8>)
 80048a6:	f7ff b8a8 	b.w	80039fa <__retarget_lock_acquire_recursive>
 80048aa:	bf00      	nop
 80048ac:	200003a8 	.word	0x200003a8

080048b0 <__malloc_unlock>:
 80048b0:	4801      	ldr	r0, [pc, #4]	@ (80048b8 <__malloc_unlock+0x8>)
 80048b2:	f7ff b8a3 	b.w	80039fc <__retarget_lock_release_recursive>
 80048b6:	bf00      	nop
 80048b8:	200003a8 	.word	0x200003a8

080048bc <_Balloc>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	69c6      	ldr	r6, [r0, #28]
 80048c0:	4604      	mov	r4, r0
 80048c2:	460d      	mov	r5, r1
 80048c4:	b976      	cbnz	r6, 80048e4 <_Balloc+0x28>
 80048c6:	2010      	movs	r0, #16
 80048c8:	f7ff ff42 	bl	8004750 <malloc>
 80048cc:	4602      	mov	r2, r0
 80048ce:	61e0      	str	r0, [r4, #28]
 80048d0:	b920      	cbnz	r0, 80048dc <_Balloc+0x20>
 80048d2:	216b      	movs	r1, #107	@ 0x6b
 80048d4:	4b17      	ldr	r3, [pc, #92]	@ (8004934 <_Balloc+0x78>)
 80048d6:	4818      	ldr	r0, [pc, #96]	@ (8004938 <_Balloc+0x7c>)
 80048d8:	f000 fe2e 	bl	8005538 <__assert_func>
 80048dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048e0:	6006      	str	r6, [r0, #0]
 80048e2:	60c6      	str	r6, [r0, #12]
 80048e4:	69e6      	ldr	r6, [r4, #28]
 80048e6:	68f3      	ldr	r3, [r6, #12]
 80048e8:	b183      	cbz	r3, 800490c <_Balloc+0x50>
 80048ea:	69e3      	ldr	r3, [r4, #28]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80048f2:	b9b8      	cbnz	r0, 8004924 <_Balloc+0x68>
 80048f4:	2101      	movs	r1, #1
 80048f6:	fa01 f605 	lsl.w	r6, r1, r5
 80048fa:	1d72      	adds	r2, r6, #5
 80048fc:	4620      	mov	r0, r4
 80048fe:	0092      	lsls	r2, r2, #2
 8004900:	f000 fe38 	bl	8005574 <_calloc_r>
 8004904:	b160      	cbz	r0, 8004920 <_Balloc+0x64>
 8004906:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800490a:	e00e      	b.n	800492a <_Balloc+0x6e>
 800490c:	2221      	movs	r2, #33	@ 0x21
 800490e:	2104      	movs	r1, #4
 8004910:	4620      	mov	r0, r4
 8004912:	f000 fe2f 	bl	8005574 <_calloc_r>
 8004916:	69e3      	ldr	r3, [r4, #28]
 8004918:	60f0      	str	r0, [r6, #12]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e4      	bne.n	80048ea <_Balloc+0x2e>
 8004920:	2000      	movs	r0, #0
 8004922:	bd70      	pop	{r4, r5, r6, pc}
 8004924:	6802      	ldr	r2, [r0, #0]
 8004926:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800492a:	2300      	movs	r3, #0
 800492c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004930:	e7f7      	b.n	8004922 <_Balloc+0x66>
 8004932:	bf00      	nop
 8004934:	0800584b 	.word	0x0800584b
 8004938:	080058cb 	.word	0x080058cb

0800493c <_Bfree>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	69c6      	ldr	r6, [r0, #28]
 8004940:	4605      	mov	r5, r0
 8004942:	460c      	mov	r4, r1
 8004944:	b976      	cbnz	r6, 8004964 <_Bfree+0x28>
 8004946:	2010      	movs	r0, #16
 8004948:	f7ff ff02 	bl	8004750 <malloc>
 800494c:	4602      	mov	r2, r0
 800494e:	61e8      	str	r0, [r5, #28]
 8004950:	b920      	cbnz	r0, 800495c <_Bfree+0x20>
 8004952:	218f      	movs	r1, #143	@ 0x8f
 8004954:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <_Bfree+0x3c>)
 8004956:	4809      	ldr	r0, [pc, #36]	@ (800497c <_Bfree+0x40>)
 8004958:	f000 fdee 	bl	8005538 <__assert_func>
 800495c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004960:	6006      	str	r6, [r0, #0]
 8004962:	60c6      	str	r6, [r0, #12]
 8004964:	b13c      	cbz	r4, 8004976 <_Bfree+0x3a>
 8004966:	69eb      	ldr	r3, [r5, #28]
 8004968:	6862      	ldr	r2, [r4, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004970:	6021      	str	r1, [r4, #0]
 8004972:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004976:	bd70      	pop	{r4, r5, r6, pc}
 8004978:	0800584b 	.word	0x0800584b
 800497c:	080058cb 	.word	0x080058cb

08004980 <__multadd>:
 8004980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004984:	4607      	mov	r7, r0
 8004986:	460c      	mov	r4, r1
 8004988:	461e      	mov	r6, r3
 800498a:	2000      	movs	r0, #0
 800498c:	690d      	ldr	r5, [r1, #16]
 800498e:	f101 0c14 	add.w	ip, r1, #20
 8004992:	f8dc 3000 	ldr.w	r3, [ip]
 8004996:	3001      	adds	r0, #1
 8004998:	b299      	uxth	r1, r3
 800499a:	fb02 6101 	mla	r1, r2, r1, r6
 800499e:	0c1e      	lsrs	r6, r3, #16
 80049a0:	0c0b      	lsrs	r3, r1, #16
 80049a2:	fb02 3306 	mla	r3, r2, r6, r3
 80049a6:	b289      	uxth	r1, r1
 80049a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80049ac:	4285      	cmp	r5, r0
 80049ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80049b2:	f84c 1b04 	str.w	r1, [ip], #4
 80049b6:	dcec      	bgt.n	8004992 <__multadd+0x12>
 80049b8:	b30e      	cbz	r6, 80049fe <__multadd+0x7e>
 80049ba:	68a3      	ldr	r3, [r4, #8]
 80049bc:	42ab      	cmp	r3, r5
 80049be:	dc19      	bgt.n	80049f4 <__multadd+0x74>
 80049c0:	6861      	ldr	r1, [r4, #4]
 80049c2:	4638      	mov	r0, r7
 80049c4:	3101      	adds	r1, #1
 80049c6:	f7ff ff79 	bl	80048bc <_Balloc>
 80049ca:	4680      	mov	r8, r0
 80049cc:	b928      	cbnz	r0, 80049da <__multadd+0x5a>
 80049ce:	4602      	mov	r2, r0
 80049d0:	21ba      	movs	r1, #186	@ 0xba
 80049d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004a04 <__multadd+0x84>)
 80049d4:	480c      	ldr	r0, [pc, #48]	@ (8004a08 <__multadd+0x88>)
 80049d6:	f000 fdaf 	bl	8005538 <__assert_func>
 80049da:	6922      	ldr	r2, [r4, #16]
 80049dc:	f104 010c 	add.w	r1, r4, #12
 80049e0:	3202      	adds	r2, #2
 80049e2:	0092      	lsls	r2, r2, #2
 80049e4:	300c      	adds	r0, #12
 80049e6:	f000 fd99 	bl	800551c <memcpy>
 80049ea:	4621      	mov	r1, r4
 80049ec:	4638      	mov	r0, r7
 80049ee:	f7ff ffa5 	bl	800493c <_Bfree>
 80049f2:	4644      	mov	r4, r8
 80049f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80049f8:	3501      	adds	r5, #1
 80049fa:	615e      	str	r6, [r3, #20]
 80049fc:	6125      	str	r5, [r4, #16]
 80049fe:	4620      	mov	r0, r4
 8004a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a04:	080058ba 	.word	0x080058ba
 8004a08:	080058cb 	.word	0x080058cb

08004a0c <__hi0bits>:
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004a12:	bf3a      	itte	cc
 8004a14:	0403      	lslcc	r3, r0, #16
 8004a16:	2010      	movcc	r0, #16
 8004a18:	2000      	movcs	r0, #0
 8004a1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a1e:	bf3c      	itt	cc
 8004a20:	021b      	lslcc	r3, r3, #8
 8004a22:	3008      	addcc	r0, #8
 8004a24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a28:	bf3c      	itt	cc
 8004a2a:	011b      	lslcc	r3, r3, #4
 8004a2c:	3004      	addcc	r0, #4
 8004a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a32:	bf3c      	itt	cc
 8004a34:	009b      	lslcc	r3, r3, #2
 8004a36:	3002      	addcc	r0, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	db05      	blt.n	8004a48 <__hi0bits+0x3c>
 8004a3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004a40:	f100 0001 	add.w	r0, r0, #1
 8004a44:	bf08      	it	eq
 8004a46:	2020      	moveq	r0, #32
 8004a48:	4770      	bx	lr

08004a4a <__lo0bits>:
 8004a4a:	6803      	ldr	r3, [r0, #0]
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	f013 0007 	ands.w	r0, r3, #7
 8004a52:	d00b      	beq.n	8004a6c <__lo0bits+0x22>
 8004a54:	07d9      	lsls	r1, r3, #31
 8004a56:	d421      	bmi.n	8004a9c <__lo0bits+0x52>
 8004a58:	0798      	lsls	r0, r3, #30
 8004a5a:	bf49      	itett	mi
 8004a5c:	085b      	lsrmi	r3, r3, #1
 8004a5e:	089b      	lsrpl	r3, r3, #2
 8004a60:	2001      	movmi	r0, #1
 8004a62:	6013      	strmi	r3, [r2, #0]
 8004a64:	bf5c      	itt	pl
 8004a66:	2002      	movpl	r0, #2
 8004a68:	6013      	strpl	r3, [r2, #0]
 8004a6a:	4770      	bx	lr
 8004a6c:	b299      	uxth	r1, r3
 8004a6e:	b909      	cbnz	r1, 8004a74 <__lo0bits+0x2a>
 8004a70:	2010      	movs	r0, #16
 8004a72:	0c1b      	lsrs	r3, r3, #16
 8004a74:	b2d9      	uxtb	r1, r3
 8004a76:	b909      	cbnz	r1, 8004a7c <__lo0bits+0x32>
 8004a78:	3008      	adds	r0, #8
 8004a7a:	0a1b      	lsrs	r3, r3, #8
 8004a7c:	0719      	lsls	r1, r3, #28
 8004a7e:	bf04      	itt	eq
 8004a80:	091b      	lsreq	r3, r3, #4
 8004a82:	3004      	addeq	r0, #4
 8004a84:	0799      	lsls	r1, r3, #30
 8004a86:	bf04      	itt	eq
 8004a88:	089b      	lsreq	r3, r3, #2
 8004a8a:	3002      	addeq	r0, #2
 8004a8c:	07d9      	lsls	r1, r3, #31
 8004a8e:	d403      	bmi.n	8004a98 <__lo0bits+0x4e>
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	f100 0001 	add.w	r0, r0, #1
 8004a96:	d003      	beq.n	8004aa0 <__lo0bits+0x56>
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4770      	bx	lr
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	4770      	bx	lr
 8004aa0:	2020      	movs	r0, #32
 8004aa2:	4770      	bx	lr

08004aa4 <__i2b>:
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	f7ff ff07 	bl	80048bc <_Balloc>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	b928      	cbnz	r0, 8004abe <__i2b+0x1a>
 8004ab2:	f240 1145 	movw	r1, #325	@ 0x145
 8004ab6:	4b04      	ldr	r3, [pc, #16]	@ (8004ac8 <__i2b+0x24>)
 8004ab8:	4804      	ldr	r0, [pc, #16]	@ (8004acc <__i2b+0x28>)
 8004aba:	f000 fd3d 	bl	8005538 <__assert_func>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	6144      	str	r4, [r0, #20]
 8004ac2:	6103      	str	r3, [r0, #16]
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	bf00      	nop
 8004ac8:	080058ba 	.word	0x080058ba
 8004acc:	080058cb 	.word	0x080058cb

08004ad0 <__multiply>:
 8004ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	690a      	ldr	r2, [r1, #16]
 8004ad8:	6923      	ldr	r3, [r4, #16]
 8004ada:	460f      	mov	r7, r1
 8004adc:	429a      	cmp	r2, r3
 8004ade:	bfa2      	ittt	ge
 8004ae0:	4623      	movge	r3, r4
 8004ae2:	460c      	movge	r4, r1
 8004ae4:	461f      	movge	r7, r3
 8004ae6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004aea:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004aee:	68a3      	ldr	r3, [r4, #8]
 8004af0:	6861      	ldr	r1, [r4, #4]
 8004af2:	eb0a 0609 	add.w	r6, sl, r9
 8004af6:	42b3      	cmp	r3, r6
 8004af8:	b085      	sub	sp, #20
 8004afa:	bfb8      	it	lt
 8004afc:	3101      	addlt	r1, #1
 8004afe:	f7ff fedd 	bl	80048bc <_Balloc>
 8004b02:	b930      	cbnz	r0, 8004b12 <__multiply+0x42>
 8004b04:	4602      	mov	r2, r0
 8004b06:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004b0a:	4b43      	ldr	r3, [pc, #268]	@ (8004c18 <__multiply+0x148>)
 8004b0c:	4843      	ldr	r0, [pc, #268]	@ (8004c1c <__multiply+0x14c>)
 8004b0e:	f000 fd13 	bl	8005538 <__assert_func>
 8004b12:	f100 0514 	add.w	r5, r0, #20
 8004b16:	462b      	mov	r3, r5
 8004b18:	2200      	movs	r2, #0
 8004b1a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004b1e:	4543      	cmp	r3, r8
 8004b20:	d321      	bcc.n	8004b66 <__multiply+0x96>
 8004b22:	f107 0114 	add.w	r1, r7, #20
 8004b26:	f104 0214 	add.w	r2, r4, #20
 8004b2a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004b2e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004b32:	9302      	str	r3, [sp, #8]
 8004b34:	1b13      	subs	r3, r2, r4
 8004b36:	3b15      	subs	r3, #21
 8004b38:	f023 0303 	bic.w	r3, r3, #3
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	f104 0715 	add.w	r7, r4, #21
 8004b42:	42ba      	cmp	r2, r7
 8004b44:	bf38      	it	cc
 8004b46:	2304      	movcc	r3, #4
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	9b02      	ldr	r3, [sp, #8]
 8004b4c:	9103      	str	r1, [sp, #12]
 8004b4e:	428b      	cmp	r3, r1
 8004b50:	d80c      	bhi.n	8004b6c <__multiply+0x9c>
 8004b52:	2e00      	cmp	r6, #0
 8004b54:	dd03      	ble.n	8004b5e <__multiply+0x8e>
 8004b56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d05a      	beq.n	8004c14 <__multiply+0x144>
 8004b5e:	6106      	str	r6, [r0, #16]
 8004b60:	b005      	add	sp, #20
 8004b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b66:	f843 2b04 	str.w	r2, [r3], #4
 8004b6a:	e7d8      	b.n	8004b1e <__multiply+0x4e>
 8004b6c:	f8b1 a000 	ldrh.w	sl, [r1]
 8004b70:	f1ba 0f00 	cmp.w	sl, #0
 8004b74:	d023      	beq.n	8004bbe <__multiply+0xee>
 8004b76:	46a9      	mov	r9, r5
 8004b78:	f04f 0c00 	mov.w	ip, #0
 8004b7c:	f104 0e14 	add.w	lr, r4, #20
 8004b80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004b84:	f8d9 3000 	ldr.w	r3, [r9]
 8004b88:	fa1f fb87 	uxth.w	fp, r7
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	fb0a 330b 	mla	r3, sl, fp, r3
 8004b92:	4463      	add	r3, ip
 8004b94:	f8d9 c000 	ldr.w	ip, [r9]
 8004b98:	0c3f      	lsrs	r7, r7, #16
 8004b9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004b9e:	fb0a c707 	mla	r7, sl, r7, ip
 8004ba2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004bac:	4572      	cmp	r2, lr
 8004bae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004bb2:	f849 3b04 	str.w	r3, [r9], #4
 8004bb6:	d8e3      	bhi.n	8004b80 <__multiply+0xb0>
 8004bb8:	9b01      	ldr	r3, [sp, #4]
 8004bba:	f845 c003 	str.w	ip, [r5, r3]
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	3104      	adds	r1, #4
 8004bc2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004bc6:	f1b9 0f00 	cmp.w	r9, #0
 8004bca:	d021      	beq.n	8004c10 <__multiply+0x140>
 8004bcc:	46ae      	mov	lr, r5
 8004bce:	f04f 0a00 	mov.w	sl, #0
 8004bd2:	682b      	ldr	r3, [r5, #0]
 8004bd4:	f104 0c14 	add.w	ip, r4, #20
 8004bd8:	f8bc b000 	ldrh.w	fp, [ip]
 8004bdc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	fb09 770b 	mla	r7, r9, fp, r7
 8004be6:	4457      	add	r7, sl
 8004be8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004bec:	f84e 3b04 	str.w	r3, [lr], #4
 8004bf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004bf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004bf8:	f8be 3000 	ldrh.w	r3, [lr]
 8004bfc:	4562      	cmp	r2, ip
 8004bfe:	fb09 330a 	mla	r3, r9, sl, r3
 8004c02:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004c06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c0a:	d8e5      	bhi.n	8004bd8 <__multiply+0x108>
 8004c0c:	9f01      	ldr	r7, [sp, #4]
 8004c0e:	51eb      	str	r3, [r5, r7]
 8004c10:	3504      	adds	r5, #4
 8004c12:	e79a      	b.n	8004b4a <__multiply+0x7a>
 8004c14:	3e01      	subs	r6, #1
 8004c16:	e79c      	b.n	8004b52 <__multiply+0x82>
 8004c18:	080058ba 	.word	0x080058ba
 8004c1c:	080058cb 	.word	0x080058cb

08004c20 <__pow5mult>:
 8004c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c24:	4615      	mov	r5, r2
 8004c26:	f012 0203 	ands.w	r2, r2, #3
 8004c2a:	4607      	mov	r7, r0
 8004c2c:	460e      	mov	r6, r1
 8004c2e:	d007      	beq.n	8004c40 <__pow5mult+0x20>
 8004c30:	4c25      	ldr	r4, [pc, #148]	@ (8004cc8 <__pow5mult+0xa8>)
 8004c32:	3a01      	subs	r2, #1
 8004c34:	2300      	movs	r3, #0
 8004c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c3a:	f7ff fea1 	bl	8004980 <__multadd>
 8004c3e:	4606      	mov	r6, r0
 8004c40:	10ad      	asrs	r5, r5, #2
 8004c42:	d03d      	beq.n	8004cc0 <__pow5mult+0xa0>
 8004c44:	69fc      	ldr	r4, [r7, #28]
 8004c46:	b97c      	cbnz	r4, 8004c68 <__pow5mult+0x48>
 8004c48:	2010      	movs	r0, #16
 8004c4a:	f7ff fd81 	bl	8004750 <malloc>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	61f8      	str	r0, [r7, #28]
 8004c52:	b928      	cbnz	r0, 8004c60 <__pow5mult+0x40>
 8004c54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004c58:	4b1c      	ldr	r3, [pc, #112]	@ (8004ccc <__pow5mult+0xac>)
 8004c5a:	481d      	ldr	r0, [pc, #116]	@ (8004cd0 <__pow5mult+0xb0>)
 8004c5c:	f000 fc6c 	bl	8005538 <__assert_func>
 8004c60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c64:	6004      	str	r4, [r0, #0]
 8004c66:	60c4      	str	r4, [r0, #12]
 8004c68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004c6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c70:	b94c      	cbnz	r4, 8004c86 <__pow5mult+0x66>
 8004c72:	f240 2171 	movw	r1, #625	@ 0x271
 8004c76:	4638      	mov	r0, r7
 8004c78:	f7ff ff14 	bl	8004aa4 <__i2b>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c84:	6003      	str	r3, [r0, #0]
 8004c86:	f04f 0900 	mov.w	r9, #0
 8004c8a:	07eb      	lsls	r3, r5, #31
 8004c8c:	d50a      	bpl.n	8004ca4 <__pow5mult+0x84>
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4622      	mov	r2, r4
 8004c92:	4638      	mov	r0, r7
 8004c94:	f7ff ff1c 	bl	8004ad0 <__multiply>
 8004c98:	4680      	mov	r8, r0
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	f7ff fe4d 	bl	800493c <_Bfree>
 8004ca2:	4646      	mov	r6, r8
 8004ca4:	106d      	asrs	r5, r5, #1
 8004ca6:	d00b      	beq.n	8004cc0 <__pow5mult+0xa0>
 8004ca8:	6820      	ldr	r0, [r4, #0]
 8004caa:	b938      	cbnz	r0, 8004cbc <__pow5mult+0x9c>
 8004cac:	4622      	mov	r2, r4
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	f7ff ff0d 	bl	8004ad0 <__multiply>
 8004cb6:	6020      	str	r0, [r4, #0]
 8004cb8:	f8c0 9000 	str.w	r9, [r0]
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	e7e4      	b.n	8004c8a <__pow5mult+0x6a>
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cc6:	bf00      	nop
 8004cc8:	08005924 	.word	0x08005924
 8004ccc:	0800584b 	.word	0x0800584b
 8004cd0:	080058cb 	.word	0x080058cb

08004cd4 <__lshift>:
 8004cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	460c      	mov	r4, r1
 8004cda:	4607      	mov	r7, r0
 8004cdc:	4691      	mov	r9, r2
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	6849      	ldr	r1, [r1, #4]
 8004ce2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ce6:	68a3      	ldr	r3, [r4, #8]
 8004ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004cec:	f108 0601 	add.w	r6, r8, #1
 8004cf0:	42b3      	cmp	r3, r6
 8004cf2:	db0b      	blt.n	8004d0c <__lshift+0x38>
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	f7ff fde1 	bl	80048bc <_Balloc>
 8004cfa:	4605      	mov	r5, r0
 8004cfc:	b948      	cbnz	r0, 8004d12 <__lshift+0x3e>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004d04:	4b27      	ldr	r3, [pc, #156]	@ (8004da4 <__lshift+0xd0>)
 8004d06:	4828      	ldr	r0, [pc, #160]	@ (8004da8 <__lshift+0xd4>)
 8004d08:	f000 fc16 	bl	8005538 <__assert_func>
 8004d0c:	3101      	adds	r1, #1
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	e7ee      	b.n	8004cf0 <__lshift+0x1c>
 8004d12:	2300      	movs	r3, #0
 8004d14:	f100 0114 	add.w	r1, r0, #20
 8004d18:	f100 0210 	add.w	r2, r0, #16
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	4553      	cmp	r3, sl
 8004d20:	db33      	blt.n	8004d8a <__lshift+0xb6>
 8004d22:	6920      	ldr	r0, [r4, #16]
 8004d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d28:	f104 0314 	add.w	r3, r4, #20
 8004d2c:	f019 091f 	ands.w	r9, r9, #31
 8004d30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d38:	d02b      	beq.n	8004d92 <__lshift+0xbe>
 8004d3a:	468a      	mov	sl, r1
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f1c9 0e20 	rsb	lr, r9, #32
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	fa00 f009 	lsl.w	r0, r0, r9
 8004d48:	4310      	orrs	r0, r2
 8004d4a:	f84a 0b04 	str.w	r0, [sl], #4
 8004d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d52:	459c      	cmp	ip, r3
 8004d54:	fa22 f20e 	lsr.w	r2, r2, lr
 8004d58:	d8f3      	bhi.n	8004d42 <__lshift+0x6e>
 8004d5a:	ebac 0304 	sub.w	r3, ip, r4
 8004d5e:	3b15      	subs	r3, #21
 8004d60:	f023 0303 	bic.w	r3, r3, #3
 8004d64:	3304      	adds	r3, #4
 8004d66:	f104 0015 	add.w	r0, r4, #21
 8004d6a:	4584      	cmp	ip, r0
 8004d6c:	bf38      	it	cc
 8004d6e:	2304      	movcc	r3, #4
 8004d70:	50ca      	str	r2, [r1, r3]
 8004d72:	b10a      	cbz	r2, 8004d78 <__lshift+0xa4>
 8004d74:	f108 0602 	add.w	r6, r8, #2
 8004d78:	3e01      	subs	r6, #1
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	612e      	str	r6, [r5, #16]
 8004d80:	f7ff fddc 	bl	800493c <_Bfree>
 8004d84:	4628      	mov	r0, r5
 8004d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d8e:	3301      	adds	r3, #1
 8004d90:	e7c5      	b.n	8004d1e <__lshift+0x4a>
 8004d92:	3904      	subs	r1, #4
 8004d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d98:	459c      	cmp	ip, r3
 8004d9a:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d9e:	d8f9      	bhi.n	8004d94 <__lshift+0xc0>
 8004da0:	e7ea      	b.n	8004d78 <__lshift+0xa4>
 8004da2:	bf00      	nop
 8004da4:	080058ba 	.word	0x080058ba
 8004da8:	080058cb 	.word	0x080058cb

08004dac <__mcmp>:
 8004dac:	4603      	mov	r3, r0
 8004dae:	690a      	ldr	r2, [r1, #16]
 8004db0:	6900      	ldr	r0, [r0, #16]
 8004db2:	b530      	push	{r4, r5, lr}
 8004db4:	1a80      	subs	r0, r0, r2
 8004db6:	d10e      	bne.n	8004dd6 <__mcmp+0x2a>
 8004db8:	3314      	adds	r3, #20
 8004dba:	3114      	adds	r1, #20
 8004dbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004dc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004dc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004dc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004dcc:	4295      	cmp	r5, r2
 8004dce:	d003      	beq.n	8004dd8 <__mcmp+0x2c>
 8004dd0:	d205      	bcs.n	8004dde <__mcmp+0x32>
 8004dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd6:	bd30      	pop	{r4, r5, pc}
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d3f3      	bcc.n	8004dc4 <__mcmp+0x18>
 8004ddc:	e7fb      	b.n	8004dd6 <__mcmp+0x2a>
 8004dde:	2001      	movs	r0, #1
 8004de0:	e7f9      	b.n	8004dd6 <__mcmp+0x2a>
	...

08004de4 <__mdiff>:
 8004de4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de8:	4689      	mov	r9, r1
 8004dea:	4606      	mov	r6, r0
 8004dec:	4611      	mov	r1, r2
 8004dee:	4648      	mov	r0, r9
 8004df0:	4614      	mov	r4, r2
 8004df2:	f7ff ffdb 	bl	8004dac <__mcmp>
 8004df6:	1e05      	subs	r5, r0, #0
 8004df8:	d112      	bne.n	8004e20 <__mdiff+0x3c>
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f7ff fd5d 	bl	80048bc <_Balloc>
 8004e02:	4602      	mov	r2, r0
 8004e04:	b928      	cbnz	r0, 8004e12 <__mdiff+0x2e>
 8004e06:	f240 2137 	movw	r1, #567	@ 0x237
 8004e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f04 <__mdiff+0x120>)
 8004e0c:	483e      	ldr	r0, [pc, #248]	@ (8004f08 <__mdiff+0x124>)
 8004e0e:	f000 fb93 	bl	8005538 <__assert_func>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e18:	4610      	mov	r0, r2
 8004e1a:	b003      	add	sp, #12
 8004e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e20:	bfbc      	itt	lt
 8004e22:	464b      	movlt	r3, r9
 8004e24:	46a1      	movlt	r9, r4
 8004e26:	4630      	mov	r0, r6
 8004e28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004e2c:	bfba      	itte	lt
 8004e2e:	461c      	movlt	r4, r3
 8004e30:	2501      	movlt	r5, #1
 8004e32:	2500      	movge	r5, #0
 8004e34:	f7ff fd42 	bl	80048bc <_Balloc>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	b918      	cbnz	r0, 8004e44 <__mdiff+0x60>
 8004e3c:	f240 2145 	movw	r1, #581	@ 0x245
 8004e40:	4b30      	ldr	r3, [pc, #192]	@ (8004f04 <__mdiff+0x120>)
 8004e42:	e7e3      	b.n	8004e0c <__mdiff+0x28>
 8004e44:	f100 0b14 	add.w	fp, r0, #20
 8004e48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004e4c:	f109 0310 	add.w	r3, r9, #16
 8004e50:	60c5      	str	r5, [r0, #12]
 8004e52:	f04f 0c00 	mov.w	ip, #0
 8004e56:	f109 0514 	add.w	r5, r9, #20
 8004e5a:	46d9      	mov	r9, fp
 8004e5c:	6926      	ldr	r6, [r4, #16]
 8004e5e:	f104 0e14 	add.w	lr, r4, #20
 8004e62:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004e66:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	9b01      	ldr	r3, [sp, #4]
 8004e6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004e72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004e76:	b281      	uxth	r1, r0
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	fa1f f38a 	uxth.w	r3, sl
 8004e7e:	1a5b      	subs	r3, r3, r1
 8004e80:	0c00      	lsrs	r0, r0, #16
 8004e82:	4463      	add	r3, ip
 8004e84:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004e88:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004e92:	4576      	cmp	r6, lr
 8004e94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004e98:	f849 3b04 	str.w	r3, [r9], #4
 8004e9c:	d8e6      	bhi.n	8004e6c <__mdiff+0x88>
 8004e9e:	1b33      	subs	r3, r6, r4
 8004ea0:	3b15      	subs	r3, #21
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	3415      	adds	r4, #21
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	42a6      	cmp	r6, r4
 8004eac:	bf38      	it	cc
 8004eae:	2304      	movcc	r3, #4
 8004eb0:	441d      	add	r5, r3
 8004eb2:	445b      	add	r3, fp
 8004eb4:	461e      	mov	r6, r3
 8004eb6:	462c      	mov	r4, r5
 8004eb8:	4544      	cmp	r4, r8
 8004eba:	d30e      	bcc.n	8004eda <__mdiff+0xf6>
 8004ebc:	f108 0103 	add.w	r1, r8, #3
 8004ec0:	1b49      	subs	r1, r1, r5
 8004ec2:	f021 0103 	bic.w	r1, r1, #3
 8004ec6:	3d03      	subs	r5, #3
 8004ec8:	45a8      	cmp	r8, r5
 8004eca:	bf38      	it	cc
 8004ecc:	2100      	movcc	r1, #0
 8004ece:	440b      	add	r3, r1
 8004ed0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ed4:	b199      	cbz	r1, 8004efe <__mdiff+0x11a>
 8004ed6:	6117      	str	r7, [r2, #16]
 8004ed8:	e79e      	b.n	8004e18 <__mdiff+0x34>
 8004eda:	46e6      	mov	lr, ip
 8004edc:	f854 1b04 	ldr.w	r1, [r4], #4
 8004ee0:	fa1f fc81 	uxth.w	ip, r1
 8004ee4:	44f4      	add	ip, lr
 8004ee6:	0c08      	lsrs	r0, r1, #16
 8004ee8:	4471      	add	r1, lr
 8004eea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004eee:	b289      	uxth	r1, r1
 8004ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004ef4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004ef8:	f846 1b04 	str.w	r1, [r6], #4
 8004efc:	e7dc      	b.n	8004eb8 <__mdiff+0xd4>
 8004efe:	3f01      	subs	r7, #1
 8004f00:	e7e6      	b.n	8004ed0 <__mdiff+0xec>
 8004f02:	bf00      	nop
 8004f04:	080058ba 	.word	0x080058ba
 8004f08:	080058cb 	.word	0x080058cb

08004f0c <__d2b>:
 8004f0c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004f10:	2101      	movs	r1, #1
 8004f12:	4690      	mov	r8, r2
 8004f14:	4699      	mov	r9, r3
 8004f16:	9e08      	ldr	r6, [sp, #32]
 8004f18:	f7ff fcd0 	bl	80048bc <_Balloc>
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	b930      	cbnz	r0, 8004f2e <__d2b+0x22>
 8004f20:	4602      	mov	r2, r0
 8004f22:	f240 310f 	movw	r1, #783	@ 0x30f
 8004f26:	4b23      	ldr	r3, [pc, #140]	@ (8004fb4 <__d2b+0xa8>)
 8004f28:	4823      	ldr	r0, [pc, #140]	@ (8004fb8 <__d2b+0xac>)
 8004f2a:	f000 fb05 	bl	8005538 <__assert_func>
 8004f2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004f32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f36:	b10d      	cbz	r5, 8004f3c <__d2b+0x30>
 8004f38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	f1b8 0300 	subs.w	r3, r8, #0
 8004f42:	d024      	beq.n	8004f8e <__d2b+0x82>
 8004f44:	4668      	mov	r0, sp
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	f7ff fd7f 	bl	8004a4a <__lo0bits>
 8004f4c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004f50:	b1d8      	cbz	r0, 8004f8a <__d2b+0x7e>
 8004f52:	f1c0 0320 	rsb	r3, r0, #32
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	430b      	orrs	r3, r1
 8004f5c:	40c2      	lsrs	r2, r0
 8004f5e:	6163      	str	r3, [r4, #20]
 8004f60:	9201      	str	r2, [sp, #4]
 8004f62:	9b01      	ldr	r3, [sp, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bf0c      	ite	eq
 8004f68:	2201      	moveq	r2, #1
 8004f6a:	2202      	movne	r2, #2
 8004f6c:	61a3      	str	r3, [r4, #24]
 8004f6e:	6122      	str	r2, [r4, #16]
 8004f70:	b1ad      	cbz	r5, 8004f9e <__d2b+0x92>
 8004f72:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004f76:	4405      	add	r5, r0
 8004f78:	6035      	str	r5, [r6, #0]
 8004f7a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f80:	6018      	str	r0, [r3, #0]
 8004f82:	4620      	mov	r0, r4
 8004f84:	b002      	add	sp, #8
 8004f86:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8004f8a:	6161      	str	r1, [r4, #20]
 8004f8c:	e7e9      	b.n	8004f62 <__d2b+0x56>
 8004f8e:	a801      	add	r0, sp, #4
 8004f90:	f7ff fd5b 	bl	8004a4a <__lo0bits>
 8004f94:	9b01      	ldr	r3, [sp, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	6163      	str	r3, [r4, #20]
 8004f9a:	3020      	adds	r0, #32
 8004f9c:	e7e7      	b.n	8004f6e <__d2b+0x62>
 8004f9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004fa2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004fa6:	6030      	str	r0, [r6, #0]
 8004fa8:	6918      	ldr	r0, [r3, #16]
 8004faa:	f7ff fd2f 	bl	8004a0c <__hi0bits>
 8004fae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004fb2:	e7e4      	b.n	8004f7e <__d2b+0x72>
 8004fb4:	080058ba 	.word	0x080058ba
 8004fb8:	080058cb 	.word	0x080058cb

08004fbc <__sfputc_r>:
 8004fbc:	6893      	ldr	r3, [r2, #8]
 8004fbe:	b410      	push	{r4}
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	6093      	str	r3, [r2, #8]
 8004fc6:	da07      	bge.n	8004fd8 <__sfputc_r+0x1c>
 8004fc8:	6994      	ldr	r4, [r2, #24]
 8004fca:	42a3      	cmp	r3, r4
 8004fcc:	db01      	blt.n	8004fd2 <__sfputc_r+0x16>
 8004fce:	290a      	cmp	r1, #10
 8004fd0:	d102      	bne.n	8004fd8 <__sfputc_r+0x1c>
 8004fd2:	bc10      	pop	{r4}
 8004fd4:	f7fe bbff 	b.w	80037d6 <__swbuf_r>
 8004fd8:	6813      	ldr	r3, [r2, #0]
 8004fda:	1c58      	adds	r0, r3, #1
 8004fdc:	6010      	str	r0, [r2, #0]
 8004fde:	7019      	strb	r1, [r3, #0]
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	bc10      	pop	{r4}
 8004fe4:	4770      	bx	lr

08004fe6 <__sfputs_r>:
 8004fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe8:	4606      	mov	r6, r0
 8004fea:	460f      	mov	r7, r1
 8004fec:	4614      	mov	r4, r2
 8004fee:	18d5      	adds	r5, r2, r3
 8004ff0:	42ac      	cmp	r4, r5
 8004ff2:	d101      	bne.n	8004ff8 <__sfputs_r+0x12>
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	e007      	b.n	8005008 <__sfputs_r+0x22>
 8004ff8:	463a      	mov	r2, r7
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005000:	f7ff ffdc 	bl	8004fbc <__sfputc_r>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d1f3      	bne.n	8004ff0 <__sfputs_r+0xa>
 8005008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800500c <_vfiprintf_r>:
 800500c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005010:	460d      	mov	r5, r1
 8005012:	4614      	mov	r4, r2
 8005014:	4698      	mov	r8, r3
 8005016:	4606      	mov	r6, r0
 8005018:	b09d      	sub	sp, #116	@ 0x74
 800501a:	b118      	cbz	r0, 8005024 <_vfiprintf_r+0x18>
 800501c:	6a03      	ldr	r3, [r0, #32]
 800501e:	b90b      	cbnz	r3, 8005024 <_vfiprintf_r+0x18>
 8005020:	f7fe fae8 	bl	80035f4 <__sinit>
 8005024:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005026:	07d9      	lsls	r1, r3, #31
 8005028:	d405      	bmi.n	8005036 <_vfiprintf_r+0x2a>
 800502a:	89ab      	ldrh	r3, [r5, #12]
 800502c:	059a      	lsls	r2, r3, #22
 800502e:	d402      	bmi.n	8005036 <_vfiprintf_r+0x2a>
 8005030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005032:	f7fe fce2 	bl	80039fa <__retarget_lock_acquire_recursive>
 8005036:	89ab      	ldrh	r3, [r5, #12]
 8005038:	071b      	lsls	r3, r3, #28
 800503a:	d501      	bpl.n	8005040 <_vfiprintf_r+0x34>
 800503c:	692b      	ldr	r3, [r5, #16]
 800503e:	b99b      	cbnz	r3, 8005068 <_vfiprintf_r+0x5c>
 8005040:	4629      	mov	r1, r5
 8005042:	4630      	mov	r0, r6
 8005044:	f7fe fc06 	bl	8003854 <__swsetup_r>
 8005048:	b170      	cbz	r0, 8005068 <_vfiprintf_r+0x5c>
 800504a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800504c:	07dc      	lsls	r4, r3, #31
 800504e:	d504      	bpl.n	800505a <_vfiprintf_r+0x4e>
 8005050:	f04f 30ff 	mov.w	r0, #4294967295
 8005054:	b01d      	add	sp, #116	@ 0x74
 8005056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505a:	89ab      	ldrh	r3, [r5, #12]
 800505c:	0598      	lsls	r0, r3, #22
 800505e:	d4f7      	bmi.n	8005050 <_vfiprintf_r+0x44>
 8005060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005062:	f7fe fccb 	bl	80039fc <__retarget_lock_release_recursive>
 8005066:	e7f3      	b.n	8005050 <_vfiprintf_r+0x44>
 8005068:	2300      	movs	r3, #0
 800506a:	9309      	str	r3, [sp, #36]	@ 0x24
 800506c:	2320      	movs	r3, #32
 800506e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005072:	2330      	movs	r3, #48	@ 0x30
 8005074:	f04f 0901 	mov.w	r9, #1
 8005078:	f8cd 800c 	str.w	r8, [sp, #12]
 800507c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005228 <_vfiprintf_r+0x21c>
 8005080:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005084:	4623      	mov	r3, r4
 8005086:	469a      	mov	sl, r3
 8005088:	f813 2b01 	ldrb.w	r2, [r3], #1
 800508c:	b10a      	cbz	r2, 8005092 <_vfiprintf_r+0x86>
 800508e:	2a25      	cmp	r2, #37	@ 0x25
 8005090:	d1f9      	bne.n	8005086 <_vfiprintf_r+0x7a>
 8005092:	ebba 0b04 	subs.w	fp, sl, r4
 8005096:	d00b      	beq.n	80050b0 <_vfiprintf_r+0xa4>
 8005098:	465b      	mov	r3, fp
 800509a:	4622      	mov	r2, r4
 800509c:	4629      	mov	r1, r5
 800509e:	4630      	mov	r0, r6
 80050a0:	f7ff ffa1 	bl	8004fe6 <__sfputs_r>
 80050a4:	3001      	adds	r0, #1
 80050a6:	f000 80a7 	beq.w	80051f8 <_vfiprintf_r+0x1ec>
 80050aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050ac:	445a      	add	r2, fp
 80050ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80050b0:	f89a 3000 	ldrb.w	r3, [sl]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 809f 	beq.w	80051f8 <_vfiprintf_r+0x1ec>
 80050ba:	2300      	movs	r3, #0
 80050bc:	f04f 32ff 	mov.w	r2, #4294967295
 80050c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050c4:	f10a 0a01 	add.w	sl, sl, #1
 80050c8:	9304      	str	r3, [sp, #16]
 80050ca:	9307      	str	r3, [sp, #28]
 80050cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80050d2:	4654      	mov	r4, sl
 80050d4:	2205      	movs	r2, #5
 80050d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050da:	4853      	ldr	r0, [pc, #332]	@ (8005228 <_vfiprintf_r+0x21c>)
 80050dc:	f7fe fc8f 	bl	80039fe <memchr>
 80050e0:	9a04      	ldr	r2, [sp, #16]
 80050e2:	b9d8      	cbnz	r0, 800511c <_vfiprintf_r+0x110>
 80050e4:	06d1      	lsls	r1, r2, #27
 80050e6:	bf44      	itt	mi
 80050e8:	2320      	movmi	r3, #32
 80050ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050ee:	0713      	lsls	r3, r2, #28
 80050f0:	bf44      	itt	mi
 80050f2:	232b      	movmi	r3, #43	@ 0x2b
 80050f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050f8:	f89a 3000 	ldrb.w	r3, [sl]
 80050fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80050fe:	d015      	beq.n	800512c <_vfiprintf_r+0x120>
 8005100:	4654      	mov	r4, sl
 8005102:	2000      	movs	r0, #0
 8005104:	f04f 0c0a 	mov.w	ip, #10
 8005108:	9a07      	ldr	r2, [sp, #28]
 800510a:	4621      	mov	r1, r4
 800510c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005110:	3b30      	subs	r3, #48	@ 0x30
 8005112:	2b09      	cmp	r3, #9
 8005114:	d94b      	bls.n	80051ae <_vfiprintf_r+0x1a2>
 8005116:	b1b0      	cbz	r0, 8005146 <_vfiprintf_r+0x13a>
 8005118:	9207      	str	r2, [sp, #28]
 800511a:	e014      	b.n	8005146 <_vfiprintf_r+0x13a>
 800511c:	eba0 0308 	sub.w	r3, r0, r8
 8005120:	fa09 f303 	lsl.w	r3, r9, r3
 8005124:	4313      	orrs	r3, r2
 8005126:	46a2      	mov	sl, r4
 8005128:	9304      	str	r3, [sp, #16]
 800512a:	e7d2      	b.n	80050d2 <_vfiprintf_r+0xc6>
 800512c:	9b03      	ldr	r3, [sp, #12]
 800512e:	1d19      	adds	r1, r3, #4
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	9103      	str	r1, [sp, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	bfbb      	ittet	lt
 8005138:	425b      	neglt	r3, r3
 800513a:	f042 0202 	orrlt.w	r2, r2, #2
 800513e:	9307      	strge	r3, [sp, #28]
 8005140:	9307      	strlt	r3, [sp, #28]
 8005142:	bfb8      	it	lt
 8005144:	9204      	strlt	r2, [sp, #16]
 8005146:	7823      	ldrb	r3, [r4, #0]
 8005148:	2b2e      	cmp	r3, #46	@ 0x2e
 800514a:	d10a      	bne.n	8005162 <_vfiprintf_r+0x156>
 800514c:	7863      	ldrb	r3, [r4, #1]
 800514e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005150:	d132      	bne.n	80051b8 <_vfiprintf_r+0x1ac>
 8005152:	9b03      	ldr	r3, [sp, #12]
 8005154:	3402      	adds	r4, #2
 8005156:	1d1a      	adds	r2, r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	9203      	str	r2, [sp, #12]
 800515c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005160:	9305      	str	r3, [sp, #20]
 8005162:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800522c <_vfiprintf_r+0x220>
 8005166:	2203      	movs	r2, #3
 8005168:	4650      	mov	r0, sl
 800516a:	7821      	ldrb	r1, [r4, #0]
 800516c:	f7fe fc47 	bl	80039fe <memchr>
 8005170:	b138      	cbz	r0, 8005182 <_vfiprintf_r+0x176>
 8005172:	2240      	movs	r2, #64	@ 0x40
 8005174:	9b04      	ldr	r3, [sp, #16]
 8005176:	eba0 000a 	sub.w	r0, r0, sl
 800517a:	4082      	lsls	r2, r0
 800517c:	4313      	orrs	r3, r2
 800517e:	3401      	adds	r4, #1
 8005180:	9304      	str	r3, [sp, #16]
 8005182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005186:	2206      	movs	r2, #6
 8005188:	4829      	ldr	r0, [pc, #164]	@ (8005230 <_vfiprintf_r+0x224>)
 800518a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800518e:	f7fe fc36 	bl	80039fe <memchr>
 8005192:	2800      	cmp	r0, #0
 8005194:	d03f      	beq.n	8005216 <_vfiprintf_r+0x20a>
 8005196:	4b27      	ldr	r3, [pc, #156]	@ (8005234 <_vfiprintf_r+0x228>)
 8005198:	bb1b      	cbnz	r3, 80051e2 <_vfiprintf_r+0x1d6>
 800519a:	9b03      	ldr	r3, [sp, #12]
 800519c:	3307      	adds	r3, #7
 800519e:	f023 0307 	bic.w	r3, r3, #7
 80051a2:	3308      	adds	r3, #8
 80051a4:	9303      	str	r3, [sp, #12]
 80051a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a8:	443b      	add	r3, r7
 80051aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80051ac:	e76a      	b.n	8005084 <_vfiprintf_r+0x78>
 80051ae:	460c      	mov	r4, r1
 80051b0:	2001      	movs	r0, #1
 80051b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80051b6:	e7a8      	b.n	800510a <_vfiprintf_r+0xfe>
 80051b8:	2300      	movs	r3, #0
 80051ba:	f04f 0c0a 	mov.w	ip, #10
 80051be:	4619      	mov	r1, r3
 80051c0:	3401      	adds	r4, #1
 80051c2:	9305      	str	r3, [sp, #20]
 80051c4:	4620      	mov	r0, r4
 80051c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051ca:	3a30      	subs	r2, #48	@ 0x30
 80051cc:	2a09      	cmp	r2, #9
 80051ce:	d903      	bls.n	80051d8 <_vfiprintf_r+0x1cc>
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0c6      	beq.n	8005162 <_vfiprintf_r+0x156>
 80051d4:	9105      	str	r1, [sp, #20]
 80051d6:	e7c4      	b.n	8005162 <_vfiprintf_r+0x156>
 80051d8:	4604      	mov	r4, r0
 80051da:	2301      	movs	r3, #1
 80051dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80051e0:	e7f0      	b.n	80051c4 <_vfiprintf_r+0x1b8>
 80051e2:	ab03      	add	r3, sp, #12
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	462a      	mov	r2, r5
 80051e8:	4630      	mov	r0, r6
 80051ea:	4b13      	ldr	r3, [pc, #76]	@ (8005238 <_vfiprintf_r+0x22c>)
 80051ec:	a904      	add	r1, sp, #16
 80051ee:	f7fd fdb7 	bl	8002d60 <_printf_float>
 80051f2:	4607      	mov	r7, r0
 80051f4:	1c78      	adds	r0, r7, #1
 80051f6:	d1d6      	bne.n	80051a6 <_vfiprintf_r+0x19a>
 80051f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051fa:	07d9      	lsls	r1, r3, #31
 80051fc:	d405      	bmi.n	800520a <_vfiprintf_r+0x1fe>
 80051fe:	89ab      	ldrh	r3, [r5, #12]
 8005200:	059a      	lsls	r2, r3, #22
 8005202:	d402      	bmi.n	800520a <_vfiprintf_r+0x1fe>
 8005204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005206:	f7fe fbf9 	bl	80039fc <__retarget_lock_release_recursive>
 800520a:	89ab      	ldrh	r3, [r5, #12]
 800520c:	065b      	lsls	r3, r3, #25
 800520e:	f53f af1f 	bmi.w	8005050 <_vfiprintf_r+0x44>
 8005212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005214:	e71e      	b.n	8005054 <_vfiprintf_r+0x48>
 8005216:	ab03      	add	r3, sp, #12
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	462a      	mov	r2, r5
 800521c:	4630      	mov	r0, r6
 800521e:	4b06      	ldr	r3, [pc, #24]	@ (8005238 <_vfiprintf_r+0x22c>)
 8005220:	a904      	add	r1, sp, #16
 8005222:	f7fe f83b 	bl	800329c <_printf_i>
 8005226:	e7e4      	b.n	80051f2 <_vfiprintf_r+0x1e6>
 8005228:	08005a20 	.word	0x08005a20
 800522c:	08005a26 	.word	0x08005a26
 8005230:	08005a2a 	.word	0x08005a2a
 8005234:	08002d61 	.word	0x08002d61
 8005238:	08004fe7 	.word	0x08004fe7

0800523c <__sflush_r>:
 800523c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005242:	0716      	lsls	r6, r2, #28
 8005244:	4605      	mov	r5, r0
 8005246:	460c      	mov	r4, r1
 8005248:	d454      	bmi.n	80052f4 <__sflush_r+0xb8>
 800524a:	684b      	ldr	r3, [r1, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	dc02      	bgt.n	8005256 <__sflush_r+0x1a>
 8005250:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	dd48      	ble.n	80052e8 <__sflush_r+0xac>
 8005256:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005258:	2e00      	cmp	r6, #0
 800525a:	d045      	beq.n	80052e8 <__sflush_r+0xac>
 800525c:	2300      	movs	r3, #0
 800525e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005262:	682f      	ldr	r7, [r5, #0]
 8005264:	6a21      	ldr	r1, [r4, #32]
 8005266:	602b      	str	r3, [r5, #0]
 8005268:	d030      	beq.n	80052cc <__sflush_r+0x90>
 800526a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	0759      	lsls	r1, r3, #29
 8005270:	d505      	bpl.n	800527e <__sflush_r+0x42>
 8005272:	6863      	ldr	r3, [r4, #4]
 8005274:	1ad2      	subs	r2, r2, r3
 8005276:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005278:	b10b      	cbz	r3, 800527e <__sflush_r+0x42>
 800527a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800527c:	1ad2      	subs	r2, r2, r3
 800527e:	2300      	movs	r3, #0
 8005280:	4628      	mov	r0, r5
 8005282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005284:	6a21      	ldr	r1, [r4, #32]
 8005286:	47b0      	blx	r6
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	89a3      	ldrh	r3, [r4, #12]
 800528c:	d106      	bne.n	800529c <__sflush_r+0x60>
 800528e:	6829      	ldr	r1, [r5, #0]
 8005290:	291d      	cmp	r1, #29
 8005292:	d82b      	bhi.n	80052ec <__sflush_r+0xb0>
 8005294:	4a28      	ldr	r2, [pc, #160]	@ (8005338 <__sflush_r+0xfc>)
 8005296:	410a      	asrs	r2, r1
 8005298:	07d6      	lsls	r6, r2, #31
 800529a:	d427      	bmi.n	80052ec <__sflush_r+0xb0>
 800529c:	2200      	movs	r2, #0
 800529e:	6062      	str	r2, [r4, #4]
 80052a0:	6922      	ldr	r2, [r4, #16]
 80052a2:	04d9      	lsls	r1, r3, #19
 80052a4:	6022      	str	r2, [r4, #0]
 80052a6:	d504      	bpl.n	80052b2 <__sflush_r+0x76>
 80052a8:	1c42      	adds	r2, r0, #1
 80052aa:	d101      	bne.n	80052b0 <__sflush_r+0x74>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	b903      	cbnz	r3, 80052b2 <__sflush_r+0x76>
 80052b0:	6560      	str	r0, [r4, #84]	@ 0x54
 80052b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052b4:	602f      	str	r7, [r5, #0]
 80052b6:	b1b9      	cbz	r1, 80052e8 <__sflush_r+0xac>
 80052b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052bc:	4299      	cmp	r1, r3
 80052be:	d002      	beq.n	80052c6 <__sflush_r+0x8a>
 80052c0:	4628      	mov	r0, r5
 80052c2:	f7ff f9fd 	bl	80046c0 <_free_r>
 80052c6:	2300      	movs	r3, #0
 80052c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80052ca:	e00d      	b.n	80052e8 <__sflush_r+0xac>
 80052cc:	2301      	movs	r3, #1
 80052ce:	4628      	mov	r0, r5
 80052d0:	47b0      	blx	r6
 80052d2:	4602      	mov	r2, r0
 80052d4:	1c50      	adds	r0, r2, #1
 80052d6:	d1c9      	bne.n	800526c <__sflush_r+0x30>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0c6      	beq.n	800526c <__sflush_r+0x30>
 80052de:	2b1d      	cmp	r3, #29
 80052e0:	d001      	beq.n	80052e6 <__sflush_r+0xaa>
 80052e2:	2b16      	cmp	r3, #22
 80052e4:	d11d      	bne.n	8005322 <__sflush_r+0xe6>
 80052e6:	602f      	str	r7, [r5, #0]
 80052e8:	2000      	movs	r0, #0
 80052ea:	e021      	b.n	8005330 <__sflush_r+0xf4>
 80052ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052f0:	b21b      	sxth	r3, r3
 80052f2:	e01a      	b.n	800532a <__sflush_r+0xee>
 80052f4:	690f      	ldr	r7, [r1, #16]
 80052f6:	2f00      	cmp	r7, #0
 80052f8:	d0f6      	beq.n	80052e8 <__sflush_r+0xac>
 80052fa:	0793      	lsls	r3, r2, #30
 80052fc:	bf18      	it	ne
 80052fe:	2300      	movne	r3, #0
 8005300:	680e      	ldr	r6, [r1, #0]
 8005302:	bf08      	it	eq
 8005304:	694b      	ldreq	r3, [r1, #20]
 8005306:	1bf6      	subs	r6, r6, r7
 8005308:	600f      	str	r7, [r1, #0]
 800530a:	608b      	str	r3, [r1, #8]
 800530c:	2e00      	cmp	r6, #0
 800530e:	ddeb      	ble.n	80052e8 <__sflush_r+0xac>
 8005310:	4633      	mov	r3, r6
 8005312:	463a      	mov	r2, r7
 8005314:	4628      	mov	r0, r5
 8005316:	6a21      	ldr	r1, [r4, #32]
 8005318:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800531c:	47e0      	blx	ip
 800531e:	2800      	cmp	r0, #0
 8005320:	dc07      	bgt.n	8005332 <__sflush_r+0xf6>
 8005322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800532a:	f04f 30ff 	mov.w	r0, #4294967295
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005332:	4407      	add	r7, r0
 8005334:	1a36      	subs	r6, r6, r0
 8005336:	e7e9      	b.n	800530c <__sflush_r+0xd0>
 8005338:	dfbffffe 	.word	0xdfbffffe

0800533c <_fflush_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	690b      	ldr	r3, [r1, #16]
 8005340:	4605      	mov	r5, r0
 8005342:	460c      	mov	r4, r1
 8005344:	b913      	cbnz	r3, 800534c <_fflush_r+0x10>
 8005346:	2500      	movs	r5, #0
 8005348:	4628      	mov	r0, r5
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	b118      	cbz	r0, 8005356 <_fflush_r+0x1a>
 800534e:	6a03      	ldr	r3, [r0, #32]
 8005350:	b90b      	cbnz	r3, 8005356 <_fflush_r+0x1a>
 8005352:	f7fe f94f 	bl	80035f4 <__sinit>
 8005356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f3      	beq.n	8005346 <_fflush_r+0xa>
 800535e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005360:	07d0      	lsls	r0, r2, #31
 8005362:	d404      	bmi.n	800536e <_fflush_r+0x32>
 8005364:	0599      	lsls	r1, r3, #22
 8005366:	d402      	bmi.n	800536e <_fflush_r+0x32>
 8005368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800536a:	f7fe fb46 	bl	80039fa <__retarget_lock_acquire_recursive>
 800536e:	4628      	mov	r0, r5
 8005370:	4621      	mov	r1, r4
 8005372:	f7ff ff63 	bl	800523c <__sflush_r>
 8005376:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005378:	4605      	mov	r5, r0
 800537a:	07da      	lsls	r2, r3, #31
 800537c:	d4e4      	bmi.n	8005348 <_fflush_r+0xc>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	059b      	lsls	r3, r3, #22
 8005382:	d4e1      	bmi.n	8005348 <_fflush_r+0xc>
 8005384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005386:	f7fe fb39 	bl	80039fc <__retarget_lock_release_recursive>
 800538a:	e7dd      	b.n	8005348 <_fflush_r+0xc>

0800538c <__swhatbuf_r>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	460c      	mov	r4, r1
 8005390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005394:	4615      	mov	r5, r2
 8005396:	2900      	cmp	r1, #0
 8005398:	461e      	mov	r6, r3
 800539a:	b096      	sub	sp, #88	@ 0x58
 800539c:	da0c      	bge.n	80053b8 <__swhatbuf_r+0x2c>
 800539e:	89a3      	ldrh	r3, [r4, #12]
 80053a0:	2100      	movs	r1, #0
 80053a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053a6:	bf14      	ite	ne
 80053a8:	2340      	movne	r3, #64	@ 0x40
 80053aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053ae:	2000      	movs	r0, #0
 80053b0:	6031      	str	r1, [r6, #0]
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	b016      	add	sp, #88	@ 0x58
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	466a      	mov	r2, sp
 80053ba:	f000 f87d 	bl	80054b8 <_fstat_r>
 80053be:	2800      	cmp	r0, #0
 80053c0:	dbed      	blt.n	800539e <__swhatbuf_r+0x12>
 80053c2:	9901      	ldr	r1, [sp, #4]
 80053c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80053c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80053cc:	4259      	negs	r1, r3
 80053ce:	4159      	adcs	r1, r3
 80053d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053d4:	e7eb      	b.n	80053ae <__swhatbuf_r+0x22>

080053d6 <__smakebuf_r>:
 80053d6:	898b      	ldrh	r3, [r1, #12]
 80053d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053da:	079d      	lsls	r5, r3, #30
 80053dc:	4606      	mov	r6, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	d507      	bpl.n	80053f2 <__smakebuf_r+0x1c>
 80053e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	6123      	str	r3, [r4, #16]
 80053ea:	2301      	movs	r3, #1
 80053ec:	6163      	str	r3, [r4, #20]
 80053ee:	b003      	add	sp, #12
 80053f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f2:	466a      	mov	r2, sp
 80053f4:	ab01      	add	r3, sp, #4
 80053f6:	f7ff ffc9 	bl	800538c <__swhatbuf_r>
 80053fa:	9f00      	ldr	r7, [sp, #0]
 80053fc:	4605      	mov	r5, r0
 80053fe:	4639      	mov	r1, r7
 8005400:	4630      	mov	r0, r6
 8005402:	f7ff f9cf 	bl	80047a4 <_malloc_r>
 8005406:	b948      	cbnz	r0, 800541c <__smakebuf_r+0x46>
 8005408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800540c:	059a      	lsls	r2, r3, #22
 800540e:	d4ee      	bmi.n	80053ee <__smakebuf_r+0x18>
 8005410:	f023 0303 	bic.w	r3, r3, #3
 8005414:	f043 0302 	orr.w	r3, r3, #2
 8005418:	81a3      	strh	r3, [r4, #12]
 800541a:	e7e2      	b.n	80053e2 <__smakebuf_r+0xc>
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005426:	81a3      	strh	r3, [r4, #12]
 8005428:	9b01      	ldr	r3, [sp, #4]
 800542a:	6020      	str	r0, [r4, #0]
 800542c:	b15b      	cbz	r3, 8005446 <__smakebuf_r+0x70>
 800542e:	4630      	mov	r0, r6
 8005430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005434:	f000 f852 	bl	80054dc <_isatty_r>
 8005438:	b128      	cbz	r0, 8005446 <__smakebuf_r+0x70>
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	f023 0303 	bic.w	r3, r3, #3
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	81a3      	strh	r3, [r4, #12]
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	431d      	orrs	r5, r3
 800544a:	81a5      	strh	r5, [r4, #12]
 800544c:	e7cf      	b.n	80053ee <__smakebuf_r+0x18>

0800544e <_putc_r>:
 800544e:	b570      	push	{r4, r5, r6, lr}
 8005450:	460d      	mov	r5, r1
 8005452:	4614      	mov	r4, r2
 8005454:	4606      	mov	r6, r0
 8005456:	b118      	cbz	r0, 8005460 <_putc_r+0x12>
 8005458:	6a03      	ldr	r3, [r0, #32]
 800545a:	b90b      	cbnz	r3, 8005460 <_putc_r+0x12>
 800545c:	f7fe f8ca 	bl	80035f4 <__sinit>
 8005460:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005462:	07d8      	lsls	r0, r3, #31
 8005464:	d405      	bmi.n	8005472 <_putc_r+0x24>
 8005466:	89a3      	ldrh	r3, [r4, #12]
 8005468:	0599      	lsls	r1, r3, #22
 800546a:	d402      	bmi.n	8005472 <_putc_r+0x24>
 800546c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800546e:	f7fe fac4 	bl	80039fa <__retarget_lock_acquire_recursive>
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	3b01      	subs	r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	60a3      	str	r3, [r4, #8]
 800547a:	da05      	bge.n	8005488 <_putc_r+0x3a>
 800547c:	69a2      	ldr	r2, [r4, #24]
 800547e:	4293      	cmp	r3, r2
 8005480:	db12      	blt.n	80054a8 <_putc_r+0x5a>
 8005482:	b2eb      	uxtb	r3, r5
 8005484:	2b0a      	cmp	r3, #10
 8005486:	d00f      	beq.n	80054a8 <_putc_r+0x5a>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	6022      	str	r2, [r4, #0]
 800548e:	701d      	strb	r5, [r3, #0]
 8005490:	b2ed      	uxtb	r5, r5
 8005492:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005494:	07da      	lsls	r2, r3, #31
 8005496:	d405      	bmi.n	80054a4 <_putc_r+0x56>
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	059b      	lsls	r3, r3, #22
 800549c:	d402      	bmi.n	80054a4 <_putc_r+0x56>
 800549e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054a0:	f7fe faac 	bl	80039fc <__retarget_lock_release_recursive>
 80054a4:	4628      	mov	r0, r5
 80054a6:	bd70      	pop	{r4, r5, r6, pc}
 80054a8:	4629      	mov	r1, r5
 80054aa:	4622      	mov	r2, r4
 80054ac:	4630      	mov	r0, r6
 80054ae:	f7fe f992 	bl	80037d6 <__swbuf_r>
 80054b2:	4605      	mov	r5, r0
 80054b4:	e7ed      	b.n	8005492 <_putc_r+0x44>
	...

080054b8 <_fstat_r>:
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	2300      	movs	r3, #0
 80054bc:	4d06      	ldr	r5, [pc, #24]	@ (80054d8 <_fstat_r+0x20>)
 80054be:	4604      	mov	r4, r0
 80054c0:	4608      	mov	r0, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	602b      	str	r3, [r5, #0]
 80054c6:	f7fb fdef 	bl	80010a8 <_fstat>
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	d102      	bne.n	80054d4 <_fstat_r+0x1c>
 80054ce:	682b      	ldr	r3, [r5, #0]
 80054d0:	b103      	cbz	r3, 80054d4 <_fstat_r+0x1c>
 80054d2:	6023      	str	r3, [r4, #0]
 80054d4:	bd38      	pop	{r3, r4, r5, pc}
 80054d6:	bf00      	nop
 80054d8:	200003a4 	.word	0x200003a4

080054dc <_isatty_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	2300      	movs	r3, #0
 80054e0:	4d05      	ldr	r5, [pc, #20]	@ (80054f8 <_isatty_r+0x1c>)
 80054e2:	4604      	mov	r4, r0
 80054e4:	4608      	mov	r0, r1
 80054e6:	602b      	str	r3, [r5, #0]
 80054e8:	f7fb fded 	bl	80010c6 <_isatty>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d102      	bne.n	80054f6 <_isatty_r+0x1a>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	b103      	cbz	r3, 80054f6 <_isatty_r+0x1a>
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	200003a4 	.word	0x200003a4

080054fc <_sbrk_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	2300      	movs	r3, #0
 8005500:	4d05      	ldr	r5, [pc, #20]	@ (8005518 <_sbrk_r+0x1c>)
 8005502:	4604      	mov	r4, r0
 8005504:	4608      	mov	r0, r1
 8005506:	602b      	str	r3, [r5, #0]
 8005508:	f7fb fdf4 	bl	80010f4 <_sbrk>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_sbrk_r+0x1a>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_sbrk_r+0x1a>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	200003a4 	.word	0x200003a4

0800551c <memcpy>:
 800551c:	440a      	add	r2, r1
 800551e:	4291      	cmp	r1, r2
 8005520:	f100 33ff 	add.w	r3, r0, #4294967295
 8005524:	d100      	bne.n	8005528 <memcpy+0xc>
 8005526:	4770      	bx	lr
 8005528:	b510      	push	{r4, lr}
 800552a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800552e:	4291      	cmp	r1, r2
 8005530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005534:	d1f9      	bne.n	800552a <memcpy+0xe>
 8005536:	bd10      	pop	{r4, pc}

08005538 <__assert_func>:
 8005538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800553a:	4614      	mov	r4, r2
 800553c:	461a      	mov	r2, r3
 800553e:	4b09      	ldr	r3, [pc, #36]	@ (8005564 <__assert_func+0x2c>)
 8005540:	4605      	mov	r5, r0
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68d8      	ldr	r0, [r3, #12]
 8005546:	b954      	cbnz	r4, 800555e <__assert_func+0x26>
 8005548:	4b07      	ldr	r3, [pc, #28]	@ (8005568 <__assert_func+0x30>)
 800554a:	461c      	mov	r4, r3
 800554c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005550:	9100      	str	r1, [sp, #0]
 8005552:	462b      	mov	r3, r5
 8005554:	4905      	ldr	r1, [pc, #20]	@ (800556c <__assert_func+0x34>)
 8005556:	f000 f841 	bl	80055dc <fiprintf>
 800555a:	f000 f851 	bl	8005600 <abort>
 800555e:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <__assert_func+0x38>)
 8005560:	e7f4      	b.n	800554c <__assert_func+0x14>
 8005562:	bf00      	nop
 8005564:	20000018 	.word	0x20000018
 8005568:	08005a76 	.word	0x08005a76
 800556c:	08005a48 	.word	0x08005a48
 8005570:	08005a3b 	.word	0x08005a3b

08005574 <_calloc_r>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	fba1 5402 	umull	r5, r4, r1, r2
 800557a:	b93c      	cbnz	r4, 800558c <_calloc_r+0x18>
 800557c:	4629      	mov	r1, r5
 800557e:	f7ff f911 	bl	80047a4 <_malloc_r>
 8005582:	4606      	mov	r6, r0
 8005584:	b928      	cbnz	r0, 8005592 <_calloc_r+0x1e>
 8005586:	2600      	movs	r6, #0
 8005588:	4630      	mov	r0, r6
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	220c      	movs	r2, #12
 800558e:	6002      	str	r2, [r0, #0]
 8005590:	e7f9      	b.n	8005586 <_calloc_r+0x12>
 8005592:	462a      	mov	r2, r5
 8005594:	4621      	mov	r1, r4
 8005596:	f7fe f9b3 	bl	8003900 <memset>
 800559a:	e7f5      	b.n	8005588 <_calloc_r+0x14>

0800559c <__ascii_mbtowc>:
 800559c:	b082      	sub	sp, #8
 800559e:	b901      	cbnz	r1, 80055a2 <__ascii_mbtowc+0x6>
 80055a0:	a901      	add	r1, sp, #4
 80055a2:	b142      	cbz	r2, 80055b6 <__ascii_mbtowc+0x1a>
 80055a4:	b14b      	cbz	r3, 80055ba <__ascii_mbtowc+0x1e>
 80055a6:	7813      	ldrb	r3, [r2, #0]
 80055a8:	600b      	str	r3, [r1, #0]
 80055aa:	7812      	ldrb	r2, [r2, #0]
 80055ac:	1e10      	subs	r0, r2, #0
 80055ae:	bf18      	it	ne
 80055b0:	2001      	movne	r0, #1
 80055b2:	b002      	add	sp, #8
 80055b4:	4770      	bx	lr
 80055b6:	4610      	mov	r0, r2
 80055b8:	e7fb      	b.n	80055b2 <__ascii_mbtowc+0x16>
 80055ba:	f06f 0001 	mvn.w	r0, #1
 80055be:	e7f8      	b.n	80055b2 <__ascii_mbtowc+0x16>

080055c0 <__ascii_wctomb>:
 80055c0:	4603      	mov	r3, r0
 80055c2:	4608      	mov	r0, r1
 80055c4:	b141      	cbz	r1, 80055d8 <__ascii_wctomb+0x18>
 80055c6:	2aff      	cmp	r2, #255	@ 0xff
 80055c8:	d904      	bls.n	80055d4 <__ascii_wctomb+0x14>
 80055ca:	228a      	movs	r2, #138	@ 0x8a
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	4770      	bx	lr
 80055d4:	2001      	movs	r0, #1
 80055d6:	700a      	strb	r2, [r1, #0]
 80055d8:	4770      	bx	lr
	...

080055dc <fiprintf>:
 80055dc:	b40e      	push	{r1, r2, r3}
 80055de:	b503      	push	{r0, r1, lr}
 80055e0:	4601      	mov	r1, r0
 80055e2:	ab03      	add	r3, sp, #12
 80055e4:	4805      	ldr	r0, [pc, #20]	@ (80055fc <fiprintf+0x20>)
 80055e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055ea:	6800      	ldr	r0, [r0, #0]
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	f7ff fd0d 	bl	800500c <_vfiprintf_r>
 80055f2:	b002      	add	sp, #8
 80055f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055f8:	b003      	add	sp, #12
 80055fa:	4770      	bx	lr
 80055fc:	20000018 	.word	0x20000018

08005600 <abort>:
 8005600:	2006      	movs	r0, #6
 8005602:	b508      	push	{r3, lr}
 8005604:	f000 f82c 	bl	8005660 <raise>
 8005608:	2001      	movs	r0, #1
 800560a:	f7fb fd1a 	bl	8001042 <_exit>

0800560e <_raise_r>:
 800560e:	291f      	cmp	r1, #31
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	4605      	mov	r5, r0
 8005614:	460c      	mov	r4, r1
 8005616:	d904      	bls.n	8005622 <_raise_r+0x14>
 8005618:	2316      	movs	r3, #22
 800561a:	6003      	str	r3, [r0, #0]
 800561c:	f04f 30ff 	mov.w	r0, #4294967295
 8005620:	bd38      	pop	{r3, r4, r5, pc}
 8005622:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005624:	b112      	cbz	r2, 800562c <_raise_r+0x1e>
 8005626:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800562a:	b94b      	cbnz	r3, 8005640 <_raise_r+0x32>
 800562c:	4628      	mov	r0, r5
 800562e:	f000 f831 	bl	8005694 <_getpid_r>
 8005632:	4622      	mov	r2, r4
 8005634:	4601      	mov	r1, r0
 8005636:	4628      	mov	r0, r5
 8005638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800563c:	f000 b818 	b.w	8005670 <_kill_r>
 8005640:	2b01      	cmp	r3, #1
 8005642:	d00a      	beq.n	800565a <_raise_r+0x4c>
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	d103      	bne.n	8005650 <_raise_r+0x42>
 8005648:	2316      	movs	r3, #22
 800564a:	6003      	str	r3, [r0, #0]
 800564c:	2001      	movs	r0, #1
 800564e:	e7e7      	b.n	8005620 <_raise_r+0x12>
 8005650:	2100      	movs	r1, #0
 8005652:	4620      	mov	r0, r4
 8005654:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005658:	4798      	blx	r3
 800565a:	2000      	movs	r0, #0
 800565c:	e7e0      	b.n	8005620 <_raise_r+0x12>
	...

08005660 <raise>:
 8005660:	4b02      	ldr	r3, [pc, #8]	@ (800566c <raise+0xc>)
 8005662:	4601      	mov	r1, r0
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	f7ff bfd2 	b.w	800560e <_raise_r>
 800566a:	bf00      	nop
 800566c:	20000018 	.word	0x20000018

08005670 <_kill_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	2300      	movs	r3, #0
 8005674:	4d06      	ldr	r5, [pc, #24]	@ (8005690 <_kill_r+0x20>)
 8005676:	4604      	mov	r4, r0
 8005678:	4608      	mov	r0, r1
 800567a:	4611      	mov	r1, r2
 800567c:	602b      	str	r3, [r5, #0]
 800567e:	f7fb fcd0 	bl	8001022 <_kill>
 8005682:	1c43      	adds	r3, r0, #1
 8005684:	d102      	bne.n	800568c <_kill_r+0x1c>
 8005686:	682b      	ldr	r3, [r5, #0]
 8005688:	b103      	cbz	r3, 800568c <_kill_r+0x1c>
 800568a:	6023      	str	r3, [r4, #0]
 800568c:	bd38      	pop	{r3, r4, r5, pc}
 800568e:	bf00      	nop
 8005690:	200003a4 	.word	0x200003a4

08005694 <_getpid_r>:
 8005694:	f7fb bcbe 	b.w	8001014 <_getpid>

08005698 <_init>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	bf00      	nop
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr

080056a4 <_fini>:
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a6:	bf00      	nop
 80056a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056aa:	bc08      	pop	{r3}
 80056ac:	469e      	mov	lr, r3
 80056ae:	4770      	bx	lr
