
roboteq_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003138  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08003244  08003244  00004244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033c0  080033c0  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  080033c0  080033c0  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033c0  080033c0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033c0  080033c0  000043c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033c4  080033c4  000043c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080033c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000068  08003430  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08003430  00005248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059a3  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e1  00000000  00000000  0000aa34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  0000c218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000047e  00000000  00000000  0000c850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c0f  00000000  00000000  0000ccce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007533  00000000  00000000  000248dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f20  00000000  00000000  0002be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afd30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f74  00000000  00000000  000afd74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b1ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	0800322c 	.word	0x0800322c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	0800322c 	.word	0x0800322c

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	 int DataIdx;
	 for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
		 ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	 for (DataIdx = 0; DataIdx < len; DataIdx++){
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	 }
	 return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
 }
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fb20 	bl	8000818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f824 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8b8 	bl	8000350 <MX_GPIO_Init>
  MX_CAN_Init();
 80001e0:	f000 f866 	bl	80002b0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 80001e4:	480d      	ldr	r0, [pc, #52]	@ (800021c <main+0x4c>)
 80001e6:	f000 fd61 	bl	8000cac <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80001ea:	2102      	movs	r1, #2
 80001ec:	480b      	ldr	r0, [pc, #44]	@ (800021c <main+0x4c>)
 80001ee:	f000 ff91 	bl	8001114 <HAL_CAN_ActivateNotification>
//	  roboteq_setMotorCommand(1, 2, 500);  // Control Motor Channel 2 with 50% speed
//	  HAL_Delay(2000);
//	  roboteq_setMotorCommand(1, 2, -500); // Reverse direction with 50% speed
//	  HAL_Delay(2000);

	  roboteq_setMotorSpeed(1, 2, 3000);  // Set motor channel 2 to 3000 RPM
 80001f2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80001f6:	2102      	movs	r1, #2
 80001f8:	2001      	movs	r0, #1
 80001fa:	f000 f933 	bl	8000464 <roboteq_setMotorSpeed>
	  HAL_Delay(20000);
 80001fe:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000202:	f000 fb6b 	bl	80008dc <HAL_Delay>
	  roboteq_setMotorSpeed(1, 2, -3000); // Reverse direction at 3000 RPM
 8000206:	4a06      	ldr	r2, [pc, #24]	@ (8000220 <main+0x50>)
 8000208:	2102      	movs	r1, #2
 800020a:	2001      	movs	r0, #1
 800020c:	f000 f92a 	bl	8000464 <roboteq_setMotorSpeed>
	  HAL_Delay(20000);
 8000210:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000214:	f000 fb62 	bl	80008dc <HAL_Delay>
  while (1) {
 8000218:	bf00      	nop
 800021a:	e7ea      	b.n	80001f2 <main+0x22>
 800021c:	20000084 	.word	0x20000084
 8000220:	fffff448 	.word	0xfffff448

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	@ 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	@ 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 fa38 	bl	80026a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000246:	2301      	movs	r3, #1
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000258:	2302      	movs	r3, #2
 800025a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000260:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000262:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0318 	add.w	r3, r7, #24
 800026c:	4618      	mov	r0, r3
 800026e:	f001 fc2b 	bl	8001ac8 <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000278:	f000 f898 	bl	80003ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000280:	2302      	movs	r3, #2
 8000282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000288:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2102      	movs	r1, #2
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fe98 	bl	8001fcc <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a2:	f000 f883 	bl	80003ac <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3740      	adds	r7, #64	@ 0x40
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08a      	sub	sp, #40	@ 0x28
 80002b4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 80002b6:	4b24      	ldr	r3, [pc, #144]	@ (8000348 <MX_CAN_Init+0x98>)
 80002b8:	4a24      	ldr	r2, [pc, #144]	@ (800034c <MX_CAN_Init+0x9c>)
 80002ba:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 80002bc:	4b22      	ldr	r3, [pc, #136]	@ (8000348 <MX_CAN_Init+0x98>)
 80002be:	2210      	movs	r2, #16
 80002c0:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80002c2:	4b21      	ldr	r3, [pc, #132]	@ (8000348 <MX_CAN_Init+0x98>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000348 <MX_CAN_Init+0x98>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 80002ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000348 <MX_CAN_Init+0x98>)
 80002d0:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 80002d4:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000348 <MX_CAN_Init+0x98>)
 80002d8:	2200      	movs	r2, #0
 80002da:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80002dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000348 <MX_CAN_Init+0x98>)
 80002de:	2200      	movs	r2, #0
 80002e0:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80002e2:	4b19      	ldr	r3, [pc, #100]	@ (8000348 <MX_CAN_Init+0x98>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80002e8:	4b17      	ldr	r3, [pc, #92]	@ (8000348 <MX_CAN_Init+0x98>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 80002ee:	4b16      	ldr	r3, [pc, #88]	@ (8000348 <MX_CAN_Init+0x98>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80002f4:	4b14      	ldr	r3, [pc, #80]	@ (8000348 <MX_CAN_Init+0x98>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80002fa:	4b13      	ldr	r3, [pc, #76]	@ (8000348 <MX_CAN_Init+0x98>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000300:	4811      	ldr	r0, [pc, #68]	@ (8000348 <MX_CAN_Init+0x98>)
 8000302:	f000 fb0f 	bl	8000924 <HAL_CAN_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800030c:	f000 f84e 	bl	80003ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canFilterConfig;
  canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000310:	2301      	movs	r3, #1
 8000312:	623b      	str	r3, [r7, #32]
  canFilterConfig.FilterBank = 0;
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000318:	2300      	movs	r3, #0
 800031a:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterIdHigh = 0x0000;
 800031c:	2300      	movs	r3, #0
 800031e:	603b      	str	r3, [r7, #0]
  canFilterConfig.FilterIdLow = 0x0000;
 8000320:	2300      	movs	r3, #0
 8000322:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterMaskIdHigh = 0x0000;
 8000324:	2300      	movs	r3, #0
 8000326:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterMaskIdLow = 0x0000;
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000330:	2301      	movs	r3, #1
 8000332:	61fb      	str	r3, [r7, #28]

  HAL_CAN_ConfigFilter(&hcan, &canFilterConfig);
 8000334:	463b      	mov	r3, r7
 8000336:	4619      	mov	r1, r3
 8000338:	4803      	ldr	r0, [pc, #12]	@ (8000348 <MX_CAN_Init+0x98>)
 800033a:	f000 fbee 	bl	8000b1a <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	3728      	adds	r7, #40	@ 0x28
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000084 	.word	0x20000084
 800034c:	40006400 	.word	0x40006400

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000356:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <MX_GPIO_Init+0x58>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a13      	ldr	r2, [pc, #76]	@ (80003a8 <MX_GPIO_Init+0x58>)
 800035c:	f043 0320 	orr.w	r3, r3, #32
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b11      	ldr	r3, [pc, #68]	@ (80003a8 <MX_GPIO_Init+0x58>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0320 	and.w	r3, r3, #32
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	4b0e      	ldr	r3, [pc, #56]	@ (80003a8 <MX_GPIO_Init+0x58>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a0d      	ldr	r2, [pc, #52]	@ (80003a8 <MX_GPIO_Init+0x58>)
 8000374:	f043 0304 	orr.w	r3, r3, #4
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b0b      	ldr	r3, [pc, #44]	@ (80003a8 <MX_GPIO_Init+0x58>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0304 	and.w	r3, r3, #4
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000386:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <MX_GPIO_Init+0x58>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a07      	ldr	r2, [pc, #28]	@ (80003a8 <MX_GPIO_Init+0x58>)
 800038c:	f043 0308 	orr.w	r3, r3, #8
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <MX_GPIO_Init+0x58>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f003 0308 	and.w	r3, r3, #8
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40021000 	.word	0x40021000

080003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b0:	b672      	cpsid	i
}
 80003b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b4:	bf00      	nop
 80003b6:	e7fd      	b.n	80003b4 <Error_Handler+0x8>

080003b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
//    }
//}


// Callback to handle received messages (Acknowledgement & Debug)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 80003c0:	4b22      	ldr	r3, [pc, #136]	@ (800044c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80003c2:	4a23      	ldr	r2, [pc, #140]	@ (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80003c4:	2100      	movs	r1, #0
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f000 fd83 	bl	8000ed2 <HAL_CAN_GetRxMessage>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d138      	bne.n	8000444 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
        // Print raw message
        printf("\n[CAN RX] StdID: 0x%lX DLC: %u | Data: ", (unsigned long)RxHeader.StdId, RxHeader.DLC);
 80003d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 80003d8:	6912      	ldr	r2, [r2, #16]
 80003da:	4619      	mov	r1, r3
 80003dc:	481d      	ldr	r0, [pc, #116]	@ (8000454 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80003de:	f002 f813 	bl	8002408 <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++) {
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	e00a      	b.n	80003fe <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
            printf("0x%02X ", RxData[i]);
 80003e8:	4a18      	ldr	r2, [pc, #96]	@ (800044c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	4413      	add	r3, r2
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	4619      	mov	r1, r3
 80003f2:	4819      	ldr	r0, [pc, #100]	@ (8000458 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80003f4:	f002 f808 	bl	8002408 <iprintf>
        for (int i = 0; i < RxHeader.DLC; i++) {
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	3301      	adds	r3, #1
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	4b14      	ldr	r3, [pc, #80]	@ (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000400:	691a      	ldr	r2, [r3, #16]
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	429a      	cmp	r2, r3
 8000406:	d8ef      	bhi.n	80003e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
        }
        printf("\n");
 8000408:	200a      	movs	r0, #10
 800040a:	f002 f80f 	bl	800242c <putchar>

        // Check for SDO Acknowledgement (0x580 + Node ID)
        if ((RxHeader.StdId & 0xFF0) == 0x580) {
 800040e:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8000416:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 800041a:	d113      	bne.n	8000444 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
            if (RxData[0] == 0x60) {
 800041c:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b60      	cmp	r3, #96	@ 0x60
 8000422:	d108      	bne.n	8000436 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
                printf("[ACK] SDO Command Acknowledged by Node %d\n", RxHeader.StdId - 0x580);
 8000424:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f5a3 63b0 	sub.w	r3, r3, #1408	@ 0x580
 800042c:	4619      	mov	r1, r3
 800042e:	480b      	ldr	r0, [pc, #44]	@ (800045c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000430:	f001 ffea 	bl	8002408 <iprintf>
            } else if (RxData[0] == 0x80) {
                printf("[ERROR] SDO Transfer Failed!\n");
            }
        }
    }
}
 8000434:	e006      	b.n	8000444 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
            } else if (RxData[0] == 0x80) {
 8000436:	4b05      	ldr	r3, [pc, #20]	@ (800044c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b80      	cmp	r3, #128	@ 0x80
 800043c:	d102      	bne.n	8000444 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
                printf("[ERROR] SDO Transfer Failed!\n");
 800043e:	4808      	ldr	r0, [pc, #32]	@ (8000460 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000440:	f002 f852 	bl	80024e8 <puts>
}
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200000e8 	.word	0x200000e8
 8000450:	200000c4 	.word	0x200000c4
 8000454:	08003244 	.word	0x08003244
 8000458:	0800326c 	.word	0x0800326c
 800045c:	08003274 	.word	0x08003274
 8000460:	080032a0 	.word	0x080032a0

08000464 <roboteq_setMotorSpeed>:

// Function to set motor speed in Closed-Loop Speed Mode
void roboteq_setMotorSpeed(uint8_t node_id, uint8_t channel, int32_t speed_rpm) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	603a      	str	r2, [r7, #0]
 800046e:	71fb      	strb	r3, [r7, #7]
 8000470:	460b      	mov	r3, r1
 8000472:	71bb      	strb	r3, [r7, #6]
    if (speed_rpm < -65535 || speed_rpm > 65535) {
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800047a:	dd03      	ble.n	8000484 <roboteq_setMotorSpeed+0x20>
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000482:	db03      	blt.n	800048c <roboteq_setMotorSpeed+0x28>
        printf("[ERROR] Speed out of range! Must be between -65535 and 65535 RPM.\n");
 8000484:	481e      	ldr	r0, [pc, #120]	@ (8000500 <roboteq_setMotorSpeed+0x9c>)
 8000486:	f002 f82f 	bl	80024e8 <puts>
        return;
 800048a:	e035      	b.n	80004f8 <roboteq_setMotorSpeed+0x94>
    }

    TxHeader.StdId = 0x600 + node_id;  // SDO Request
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000492:	461a      	mov	r2, r3
 8000494:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <roboteq_setMotorSpeed+0xa0>)
 8000496:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 8;
 8000498:	4b1a      	ldr	r3, [pc, #104]	@ (8000504 <roboteq_setMotorSpeed+0xa0>)
 800049a:	2208      	movs	r2, #8
 800049c:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;
 800049e:	4b19      	ldr	r3, [pc, #100]	@ (8000504 <roboteq_setMotorSpeed+0xa0>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80004a4:	4b17      	ldr	r3, [pc, #92]	@ (8000504 <roboteq_setMotorSpeed+0xa0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]

    memset(TxData, 0, sizeof(TxData));
 80004aa:	2208      	movs	r2, #8
 80004ac:	2100      	movs	r1, #0
 80004ae:	4816      	ldr	r0, [pc, #88]	@ (8000508 <roboteq_setMotorSpeed+0xa4>)
 80004b0:	f002 f8fa 	bl	80026a8 <memset>

    TxData[0] = 0x23;  // Write Command
 80004b4:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <roboteq_setMotorSpeed+0xa4>)
 80004b6:	2223      	movs	r2, #35	@ 0x23
 80004b8:	701a      	strb	r2, [r3, #0]
    TxData[1] = 0x02;  // Index LSB (0x2002 for MOTVEL)
 80004ba:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <roboteq_setMotorSpeed+0xa4>)
 80004bc:	2202      	movs	r2, #2
 80004be:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0x20;  // Index MSB
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <roboteq_setMotorSpeed+0xa4>)
 80004c2:	2220      	movs	r2, #32
 80004c4:	709a      	strb	r2, [r3, #2]
    TxData[3] = channel;  // Motor Channel (1 or 2)
 80004c6:	4a10      	ldr	r2, [pc, #64]	@ (8000508 <roboteq_setMotorSpeed+0xa4>)
 80004c8:	79bb      	ldrb	r3, [r7, #6]
 80004ca:	70d3      	strb	r3, [r2, #3]

    memcpy(&TxData[4], &speed_rpm, sizeof(int32_t));  // Copy speed value
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000508 <roboteq_setMotorSpeed+0xa4>)
 80004d0:	6053      	str	r3, [r2, #4]

    if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <roboteq_setMotorSpeed+0xa8>)
 80004d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000508 <roboteq_setMotorSpeed+0xa4>)
 80004d6:	490b      	ldr	r1, [pc, #44]	@ (8000504 <roboteq_setMotorSpeed+0xa0>)
 80004d8:	480d      	ldr	r0, [pc, #52]	@ (8000510 <roboteq_setMotorSpeed+0xac>)
 80004da:	f000 fc2b 	bl	8000d34 <HAL_CAN_AddTxMessage>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d106      	bne.n	80004f2 <roboteq_setMotorSpeed+0x8e>
        printf("[CAN TX] Set Motor Speed - Channel: %d, Speed: %d RPM\n", channel, speed_rpm);
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	4619      	mov	r1, r3
 80004ea:	480a      	ldr	r0, [pc, #40]	@ (8000514 <roboteq_setMotorSpeed+0xb0>)
 80004ec:	f001 ff8c 	bl	8002408 <iprintf>
 80004f0:	e002      	b.n	80004f8 <roboteq_setMotorSpeed+0x94>
    } else {
        printf("[ERROR] Failed to send Motor Speed Command\n");
 80004f2:	4809      	ldr	r0, [pc, #36]	@ (8000518 <roboteq_setMotorSpeed+0xb4>)
 80004f4:	f001 fff8 	bl	80024e8 <puts>
    }
}
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	080032c0 	.word	0x080032c0
 8000504:	200000ac 	.word	0x200000ac
 8000508:	200000e0 	.word	0x200000e0
 800050c:	200000f0 	.word	0x200000f0
 8000510:	20000084 	.word	0x20000084
 8000514:	08003304 	.word	0x08003304
 8000518:	0800333c 	.word	0x0800333c

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000522:	4b15      	ldr	r3, [pc, #84]	@ (8000578 <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a14      	ldr	r2, [pc, #80]	@ (8000578 <HAL_MspInit+0x5c>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b12      	ldr	r3, [pc, #72]	@ (8000578 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a0e      	ldr	r2, [pc, #56]	@ (8000578 <HAL_MspInit+0x5c>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000552:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <HAL_MspInit+0x60>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	4a04      	ldr	r2, [pc, #16]	@ (800057c <HAL_MspInit+0x60>)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000
 800057c:	40010000 	.word	0x40010000

08000580 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a24      	ldr	r2, [pc, #144]	@ (800062c <HAL_CAN_MspInit+0xac>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d141      	bne.n	8000624 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005a0:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <HAL_CAN_MspInit+0xb0>)
 80005a2:	69db      	ldr	r3, [r3, #28]
 80005a4:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <HAL_CAN_MspInit+0xb0>)
 80005a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005aa:	61d3      	str	r3, [r2, #28]
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <HAL_CAN_MspInit+0xb0>)
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000630 <HAL_CAN_MspInit+0xb0>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000630 <HAL_CAN_MspInit+0xb0>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <HAL_CAN_MspInit+0xb0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	4813      	ldr	r0, [pc, #76]	@ (8000634 <HAL_CAN_MspInit+0xb4>)
 80005e6:	f001 f8eb 	bl	80017c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f0:	2302      	movs	r3, #2
 80005f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4619      	mov	r1, r3
 80005fe:	480d      	ldr	r0, [pc, #52]	@ (8000634 <HAL_CAN_MspInit+0xb4>)
 8000600:	f001 f8de 	bl	80017c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	2014      	movs	r0, #20
 800060a:	f001 f8a2 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800060e:	2014      	movs	r0, #20
 8000610:	f001 f8bb 	bl	800178a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	2015      	movs	r0, #21
 800061a:	f001 f89a 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800061e:	2015      	movs	r0, #21
 8000620:	f001 f8b3 	bl	800178a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40006400 	.word	0x40006400
 8000630:	40021000 	.word	0x40021000
 8000634:	40010800 	.word	0x40010800

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <NMI_Handler+0x4>

08000640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <HardFault_Handler+0x4>

08000648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <MemManage_Handler+0x4>

08000650 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <BusFault_Handler+0x4>

08000658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <UsageFault_Handler+0x4>

08000660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000688:	f000 f90c 	bl	80008a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}

08000690 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000694:	4802      	ldr	r0, [pc, #8]	@ (80006a0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000696:	f000 fd62 	bl	800115e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000084 	.word	0x20000084

080006a4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006a8:	4802      	ldr	r0, [pc, #8]	@ (80006b4 <CAN1_RX1_IRQHandler+0x10>)
 80006aa:	f000 fd58 	bl	800115e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000084 	.word	0x20000084

080006b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	e00a      	b.n	80006e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006ca:	f3af 8000 	nop.w
 80006ce:	4601      	mov	r1, r0
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	60ba      	str	r2, [r7, #8]
 80006d6:	b2ca      	uxtb	r2, r1
 80006d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	3301      	adds	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dbf0      	blt.n	80006ca <_read+0x12>
  }

  return len;
 80006e8:	687b      	ldr	r3, [r7, #4]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	605a      	str	r2, [r3, #4]
  return 0;
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <_isatty>:

int _isatty(int file)
{
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800072e:	2301      	movs	r3, #1
}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800073a:	b480      	push	{r7}
 800073c:	b085      	sub	sp, #20
 800073e:	af00      	add	r7, sp, #0
 8000740:	60f8      	str	r0, [r7, #12]
 8000742:	60b9      	str	r1, [r7, #8]
 8000744:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000746:	2300      	movs	r3, #0
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
	...

08000754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800075c:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <_sbrk+0x5c>)
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <_sbrk+0x60>)
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d102      	bne.n	8000776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000770:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <_sbrk+0x64>)
 8000772:	4a12      	ldr	r2, [pc, #72]	@ (80007bc <_sbrk+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	429a      	cmp	r2, r3
 8000782:	d207      	bcs.n	8000794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000784:	f001 ffde 	bl	8002744 <__errno>
 8000788:	4603      	mov	r3, r0
 800078a:	220c      	movs	r2, #12
 800078c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	e009      	b.n	80007a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000794:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079a:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <_sbrk+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <_sbrk+0x64>)
 80007a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20005000 	.word	0x20005000
 80007b4:	00000400 	.word	0x00000400
 80007b8:	200000f4 	.word	0x200000f4
 80007bc:	20000248 	.word	0x20000248

080007c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007cc:	f7ff fff8 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480b      	ldr	r0, [pc, #44]	@ (8000800 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007d2:	490c      	ldr	r1, [pc, #48]	@ (8000804 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000808 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a09      	ldr	r2, [pc, #36]	@ (800080c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007e8:	4c09      	ldr	r4, [pc, #36]	@ (8000810 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f6:	f001 ffab 	bl	8002750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fa:	f7ff fce9 	bl	80001d0 <main>
  bx lr
 80007fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000808:	080033c8 	.word	0x080033c8
  ldr r2, =_sbss
 800080c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000810:	20000248 	.word	0x20000248

08000814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_2_IRQHandler>
	...

08000818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <HAL_Init+0x28>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a07      	ldr	r2, [pc, #28]	@ (8000840 <HAL_Init+0x28>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000828:	2003      	movs	r0, #3
 800082a:	f000 ff87 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082e:	200f      	movs	r0, #15
 8000830:	f000 f808 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000834:	f7ff fe72 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40022000 	.word	0x40022000

08000844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <HAL_InitTick+0x54>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <HAL_InitTick+0x58>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085a:	fbb3 f3f1 	udiv	r3, r3, r1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f000 ff9f 	bl	80017a6 <HAL_SYSTICK_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e00e      	b.n	8000890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d80a      	bhi.n	800088e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 ff67 	bl	8001752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4a06      	ldr	r2, [pc, #24]	@ (80008a0 <HAL_InitTick+0x5c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000000 	.word	0x20000000
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000004 	.word	0x20000004

080008a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <HAL_IncTick+0x1c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <HAL_IncTick+0x20>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a03      	ldr	r2, [pc, #12]	@ (80008c4 <HAL_IncTick+0x20>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	20000008 	.word	0x20000008
 80008c4:	200000f8 	.word	0x200000f8

080008c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return uwTick;
 80008cc:	4b02      	ldr	r3, [pc, #8]	@ (80008d8 <HAL_GetTick+0x10>)
 80008ce:	681b      	ldr	r3, [r3, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	200000f8 	.word	0x200000f8

080008dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e4:	f7ff fff0 	bl	80008c8 <HAL_GetTick>
 80008e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f4:	d005      	beq.n	8000902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <HAL_Delay+0x44>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4413      	add	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000902:	bf00      	nop
 8000904:	f7ff ffe0 	bl	80008c8 <HAL_GetTick>
 8000908:	4602      	mov	r2, r0
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	429a      	cmp	r2, r3
 8000912:	d8f7      	bhi.n	8000904 <HAL_Delay+0x28>
  {
  }
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000008 	.word	0x20000008

08000924 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d101      	bne.n	8000936 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e0ed      	b.n	8000b12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d102      	bne.n	8000948 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fe1c 	bl	8000580 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f042 0201 	orr.w	r2, r2, #1
 8000956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000958:	f7ff ffb6 	bl	80008c8 <HAL_GetTick>
 800095c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800095e:	e012      	b.n	8000986 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000960:	f7ff ffb2 	bl	80008c8 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	2b0a      	cmp	r3, #10
 800096c:	d90b      	bls.n	8000986 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000972:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2205      	movs	r2, #5
 800097e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e0c5      	b.n	8000b12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0e5      	beq.n	8000960 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f022 0202 	bic.w	r2, r2, #2
 80009a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009a4:	f7ff ff90 	bl	80008c8 <HAL_GetTick>
 80009a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009aa:	e012      	b.n	80009d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009ac:	f7ff ff8c 	bl	80008c8 <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	2b0a      	cmp	r3, #10
 80009b8:	d90b      	bls.n	80009d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2205      	movs	r2, #5
 80009ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e09f      	b.n	8000b12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f003 0302 	and.w	r3, r3, #2
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1e5      	bne.n	80009ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7e1b      	ldrb	r3, [r3, #24]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d108      	bne.n	80009fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	e007      	b.n	8000a0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7e5b      	ldrb	r3, [r3, #25]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d108      	bne.n	8000a24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	e007      	b.n	8000a34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7e9b      	ldrb	r3, [r3, #26]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d108      	bne.n	8000a4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f042 0220 	orr.w	r2, r2, #32
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	e007      	b.n	8000a5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f022 0220 	bic.w	r2, r2, #32
 8000a5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7edb      	ldrb	r3, [r3, #27]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d108      	bne.n	8000a78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f022 0210 	bic.w	r2, r2, #16
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	e007      	b.n	8000a88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f042 0210 	orr.w	r2, r2, #16
 8000a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7f1b      	ldrb	r3, [r3, #28]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d108      	bne.n	8000aa2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0208 	orr.w	r2, r2, #8
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	e007      	b.n	8000ab2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 0208 	bic.w	r2, r2, #8
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7f5b      	ldrb	r3, [r3, #29]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d108      	bne.n	8000acc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f042 0204 	orr.w	r2, r2, #4
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	e007      	b.n	8000adc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f022 0204 	bic.w	r2, r2, #4
 8000ada:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	431a      	orrs	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	ea42 0103 	orr.w	r1, r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	430a      	orrs	r2, r1
 8000b00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b087      	sub	sp, #28
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
 8000b22:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b30:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b32:	7cfb      	ldrb	r3, [r7, #19]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d003      	beq.n	8000b40 <HAL_CAN_ConfigFilter+0x26>
 8000b38:	7cfb      	ldrb	r3, [r7, #19]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	f040 80aa 	bne.w	8000c94 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b46:	f043 0201 	orr.w	r2, r3, #1
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f003 031f 	and.w	r3, r3, #31
 8000b58:	2201      	movs	r2, #1
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d123      	bne.n	8000bc2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	43db      	mvns	r3, r3
 8000b84:	401a      	ands	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3248      	adds	r2, #72	@ 0x48
 8000ba2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bb6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bb8:	6979      	ldr	r1, [r7, #20]
 8000bba:	3348      	adds	r3, #72	@ 0x48
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	440b      	add	r3, r1
 8000bc0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d122      	bne.n	8000c10 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	3248      	adds	r2, #72	@ 0x48
 8000bf0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c06:	6979      	ldr	r1, [r7, #20]
 8000c08:	3348      	adds	r3, #72	@ 0x48
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	440b      	add	r3, r1
 8000c0e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d109      	bne.n	8000c2c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000c2a:	e007      	b.n	8000c3c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d109      	bne.n	8000c58 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000c56:	e007      	b.n	8000c68 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	431a      	orrs	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d107      	bne.n	8000c80 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c86:	f023 0201 	bic.w	r2, r3, #1
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	e006      	b.n	8000ca2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
  }
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	371c      	adds	r7, #28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d12e      	bne.n	8000d1e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0201 	bic.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000cd8:	f7ff fdf6 	bl	80008c8 <HAL_GetTick>
 8000cdc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cde:	e012      	b.n	8000d06 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce0:	f7ff fdf2 	bl	80008c8 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d90b      	bls.n	8000d06 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e012      	b.n	8000d2c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1e5      	bne.n	8000ce0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e006      	b.n	8000d2c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d22:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
  }
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d48:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d52:	7ffb      	ldrb	r3, [r7, #31]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d003      	beq.n	8000d60 <HAL_CAN_AddTxMessage+0x2c>
 8000d58:	7ffb      	ldrb	r3, [r7, #31]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	f040 80ad 	bne.w	8000eba <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10a      	bne.n	8000d80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d105      	bne.n	8000d80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8095 	beq.w	8000eaa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	0e1b      	lsrs	r3, r3, #24
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10d      	bne.n	8000db8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000da6:	68f9      	ldr	r1, [r7, #12]
 8000da8:	6809      	ldr	r1, [r1, #0]
 8000daa:	431a      	orrs	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3318      	adds	r3, #24
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	440b      	add	r3, r1
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e00f      	b.n	8000dd8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dc2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dc8:	68f9      	ldr	r1, [r7, #12]
 8000dca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000dcc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3318      	adds	r3, #24
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	440b      	add	r3, r1
 8000dd6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	6819      	ldr	r1, [r3, #0]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	691a      	ldr	r2, [r3, #16]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3318      	adds	r3, #24
 8000de4:	011b      	lsls	r3, r3, #4
 8000de6:	440b      	add	r3, r1
 8000de8:	3304      	adds	r3, #4
 8000dea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	7d1b      	ldrb	r3, [r3, #20]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d111      	bne.n	8000e18 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3318      	adds	r3, #24
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	4413      	add	r3, r2
 8000e00:	3304      	adds	r3, #4
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	6811      	ldr	r1, [r2, #0]
 8000e08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	3318      	adds	r3, #24
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	440b      	add	r3, r1
 8000e14:	3304      	adds	r3, #4
 8000e16:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3307      	adds	r3, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	061a      	lsls	r2, r3, #24
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3306      	adds	r3, #6
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3305      	adds	r3, #5
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	4313      	orrs	r3, r2
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	3204      	adds	r2, #4
 8000e38:	7812      	ldrb	r2, [r2, #0]
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	6811      	ldr	r1, [r2, #0]
 8000e40:	ea43 0200 	orr.w	r2, r3, r0
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	440b      	add	r3, r1
 8000e4a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3303      	adds	r3, #3
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	061a      	lsls	r2, r3, #24
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	041b      	lsls	r3, r3, #16
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3301      	adds	r3, #1
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	7812      	ldrb	r2, [r2, #0]
 8000e70:	4610      	mov	r0, r2
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	6811      	ldr	r1, [r2, #0]
 8000e76:	ea43 0200 	orr.w	r2, r3, r0
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	440b      	add	r3, r1
 8000e80:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e84:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3318      	adds	r3, #24
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	4413      	add	r3, r2
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	6811      	ldr	r1, [r2, #0]
 8000e98:	f043 0201 	orr.w	r2, r3, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3318      	adds	r3, #24
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	440b      	add	r3, r1
 8000ea4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e00e      	b.n	8000ec8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e006      	b.n	8000ec8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ebe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
  }
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3724      	adds	r7, #36	@ 0x24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b087      	sub	sp, #28
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d003      	beq.n	8000ef6 <HAL_CAN_GetRxMessage+0x24>
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	f040 8103 	bne.w	80010fc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10e      	bne.n	8000f1a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d116      	bne.n	8000f38 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e0f7      	b.n	800110a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d107      	bne.n	8000f38 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e0e8      	b.n	800110a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	331b      	adds	r3, #27
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	4413      	add	r3, r2
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0204 	and.w	r2, r3, #4
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10c      	bne.n	8000f70 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	331b      	adds	r3, #27
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	4413      	add	r3, r2
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	0d5b      	lsrs	r3, r3, #21
 8000f66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	e00b      	b.n	8000f88 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	331b      	adds	r3, #27
 8000f78:	011b      	lsls	r3, r3, #4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	08db      	lsrs	r3, r3, #3
 8000f80:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	331b      	adds	r3, #27
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	4413      	add	r3, r2
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0202 	and.w	r2, r3, #2
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	331b      	adds	r3, #27
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	4413      	add	r3, r2
 8000faa:	3304      	adds	r3, #4
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2208      	movs	r2, #8
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	e00b      	b.n	8000fd6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	331b      	adds	r3, #27
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	4413      	add	r3, r2
 8000fca:	3304      	adds	r3, #4
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 020f 	and.w	r2, r3, #15
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	331b      	adds	r3, #27
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	0a1b      	lsrs	r3, r3, #8
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	331b      	adds	r3, #27
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	0c1b      	lsrs	r3, r3, #16
 8001000:	b29a      	uxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	4413      	add	r3, r2
 8001010:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	4413      	add	r3, r2
 8001026:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	0a1a      	lsrs	r2, r3, #8
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	4413      	add	r3, r2
 8001040:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	0c1a      	lsrs	r2, r3, #16
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3302      	adds	r3, #2
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	4413      	add	r3, r2
 800105a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0e1a      	lsrs	r2, r3, #24
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	3303      	adds	r3, #3
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	4413      	add	r3, r2
 8001074:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3304      	adds	r3, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	4413      	add	r3, r2
 800108c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	0a1a      	lsrs	r2, r3, #8
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	3305      	adds	r3, #5
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	0c1a      	lsrs	r2, r3, #16
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	3306      	adds	r3, #6
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	4413      	add	r3, r2
 80010c0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	0e1a      	lsrs	r2, r3, #24
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	3307      	adds	r3, #7
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d108      	bne.n	80010e8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0220 	orr.w	r2, r2, #32
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	e007      	b.n	80010f8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0220 	orr.w	r2, r2, #32
 80010f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e006      	b.n	800110a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001100:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
  }
}
 800110a:	4618      	mov	r0, r3
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001124:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d002      	beq.n	8001132 <HAL_CAN_ActivateNotification+0x1e>
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d109      	bne.n	8001146 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6959      	ldr	r1, [r3, #20]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e006      	b.n	8001154 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
  }
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b08a      	sub	sp, #40	@ 0x28
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d07c      	beq.n	800129e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d023      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2201      	movs	r2, #1
 80011b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f983 	bl	80014cc <HAL_CAN_TxMailbox0CompleteCallback>
 80011c6:	e016      	b.n	80011f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d004      	beq.n	80011dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011da:	e00c      	b.n	80011f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ee:	e002      	b.n	80011f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f986 	bl	8001502 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d024      	beq.n	800124a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001208:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f962 	bl	80014de <HAL_CAN_TxMailbox1CompleteCallback>
 800121a:	e016      	b.n	800124a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001228:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
 800122e:	e00c      	b.n	800124a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001236:	2b00      	cmp	r3, #0
 8001238:	d004      	beq.n	8001244 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
 8001242:	e002      	b.n	800124a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f965 	bl	8001514 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d024      	beq.n	800129e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800125c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f941 	bl	80014f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800126e:	e016      	b.n	800129e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800127a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
 8001282:	e00c      	b.n	800129e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	e002      	b.n	800129e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f944 	bl	8001526 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00c      	beq.n	80012c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2210      	movs	r2, #16
 80012c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00b      	beq.n	80012e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2208      	movs	r2, #8
 80012dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f92a 	bl	8001538 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d009      	beq.n	8001302 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff f85b 	bl	80003b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00c      	beq.n	8001326 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001318:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2210      	movs	r2, #16
 8001324:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00b      	beq.n	8001348 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2208      	movs	r2, #8
 8001340:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f90a 	bl	800155c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	f003 0310 	and.w	r3, r3, #16
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f8f2 	bl	800154a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00b      	beq.n	8001388 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	d006      	beq.n	8001388 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2210      	movs	r2, #16
 8001380:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f8f3 	bl	800156e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2208      	movs	r2, #8
 80013a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f8eb 	bl	8001580 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d07b      	beq.n	80014ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d072      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013be:	6a3b      	ldr	r3, [r7, #32]
 80013c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d008      	beq.n	80013f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001418:	2b00      	cmp	r3, #0
 800141a:	d043      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001422:	2b00      	cmp	r3, #0
 8001424:	d03e      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800142c:	2b60      	cmp	r3, #96	@ 0x60
 800142e:	d02b      	beq.n	8001488 <HAL_CAN_IRQHandler+0x32a>
 8001430:	2b60      	cmp	r3, #96	@ 0x60
 8001432:	d82e      	bhi.n	8001492 <HAL_CAN_IRQHandler+0x334>
 8001434:	2b50      	cmp	r3, #80	@ 0x50
 8001436:	d022      	beq.n	800147e <HAL_CAN_IRQHandler+0x320>
 8001438:	2b50      	cmp	r3, #80	@ 0x50
 800143a:	d82a      	bhi.n	8001492 <HAL_CAN_IRQHandler+0x334>
 800143c:	2b40      	cmp	r3, #64	@ 0x40
 800143e:	d019      	beq.n	8001474 <HAL_CAN_IRQHandler+0x316>
 8001440:	2b40      	cmp	r3, #64	@ 0x40
 8001442:	d826      	bhi.n	8001492 <HAL_CAN_IRQHandler+0x334>
 8001444:	2b30      	cmp	r3, #48	@ 0x30
 8001446:	d010      	beq.n	800146a <HAL_CAN_IRQHandler+0x30c>
 8001448:	2b30      	cmp	r3, #48	@ 0x30
 800144a:	d822      	bhi.n	8001492 <HAL_CAN_IRQHandler+0x334>
 800144c:	2b10      	cmp	r3, #16
 800144e:	d002      	beq.n	8001456 <HAL_CAN_IRQHandler+0x2f8>
 8001450:	2b20      	cmp	r3, #32
 8001452:	d005      	beq.n	8001460 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001454:	e01d      	b.n	8001492 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800145e:	e019      	b.n	8001494 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001468:	e014      	b.n	8001494 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001472:	e00f      	b.n	8001494 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800147c:	e00a      	b.n	8001494 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001486:	e005      	b.n	8001494 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001490:	e000      	b.n	8001494 <HAL_CAN_IRQHandler+0x336>
            break;
 8001492:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80014a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2204      	movs	r2, #4
 80014aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f867 	bl	8001592 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	@ 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <__NVIC_SetPriorityGrouping>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_GetPriorityGrouping>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4906      	ldr	r1, [pc, #24]	@ (800163c <__NVIC_EnableIRQ+0x34>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100

08001640 <__NVIC_SetPriority>:
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	@ (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	@ (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <NVIC_EncodePriority>:
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	@ 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f1c3 0307 	rsb	r3, r3, #7
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	bf28      	it	cs
 80016b2:	2304      	movcs	r3, #4
 80016b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3304      	adds	r3, #4
 80016ba:	2b06      	cmp	r3, #6
 80016bc:	d902      	bls.n	80016c4 <NVIC_EncodePriority+0x30>
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3b03      	subs	r3, #3
 80016c2:	e000      	b.n	80016c6 <NVIC_EncodePriority+0x32>
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43da      	mvns	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	401a      	ands	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43d9      	mvns	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	4313      	orrs	r3, r2
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3724      	adds	r7, #36	@ 0x24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Config>:
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001708:	d301      	bcc.n	800170e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800170a:	2301      	movs	r3, #1
 800170c:	e00f      	b.n	800172e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <SysTick_Config+0x40>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001716:	210f      	movs	r1, #15
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f7ff ff90 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <SysTick_Config+0x40>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001726:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <SysTick_Config+0x40>)
 8001728:	2207      	movs	r2, #7
 800172a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	e000e010 	.word	0xe000e010

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff2d 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff42 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ff90 	bl	8001694 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff5f 	bl	8001640 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff35 	bl	8001608 <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffa2 	bl	80016f8 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b08b      	sub	sp, #44	@ 0x2c
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	e169      	b.n	8001aa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d4:	2201      	movs	r2, #1
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	f040 8158 	bne.w	8001aa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001a60 <HAL_GPIO_Init+0x2a0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d05e      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 80017fc:	4a98      	ldr	r2, [pc, #608]	@ (8001a60 <HAL_GPIO_Init+0x2a0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d875      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 8001802:	4a98      	ldr	r2, [pc, #608]	@ (8001a64 <HAL_GPIO_Init+0x2a4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d058      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 8001808:	4a96      	ldr	r2, [pc, #600]	@ (8001a64 <HAL_GPIO_Init+0x2a4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d86f      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 800180e:	4a96      	ldr	r2, [pc, #600]	@ (8001a68 <HAL_GPIO_Init+0x2a8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d052      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 8001814:	4a94      	ldr	r2, [pc, #592]	@ (8001a68 <HAL_GPIO_Init+0x2a8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d869      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 800181a:	4a94      	ldr	r2, [pc, #592]	@ (8001a6c <HAL_GPIO_Init+0x2ac>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d04c      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 8001820:	4a92      	ldr	r2, [pc, #584]	@ (8001a6c <HAL_GPIO_Init+0x2ac>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d863      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 8001826:	4a92      	ldr	r2, [pc, #584]	@ (8001a70 <HAL_GPIO_Init+0x2b0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d046      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 800182c:	4a90      	ldr	r2, [pc, #576]	@ (8001a70 <HAL_GPIO_Init+0x2b0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d85d      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 8001832:	2b12      	cmp	r3, #18
 8001834:	d82a      	bhi.n	800188c <HAL_GPIO_Init+0xcc>
 8001836:	2b12      	cmp	r3, #18
 8001838:	d859      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 800183a:	a201      	add	r2, pc, #4	@ (adr r2, 8001840 <HAL_GPIO_Init+0x80>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	080018bb 	.word	0x080018bb
 8001844:	08001895 	.word	0x08001895
 8001848:	080018a7 	.word	0x080018a7
 800184c:	080018e9 	.word	0x080018e9
 8001850:	080018ef 	.word	0x080018ef
 8001854:	080018ef 	.word	0x080018ef
 8001858:	080018ef 	.word	0x080018ef
 800185c:	080018ef 	.word	0x080018ef
 8001860:	080018ef 	.word	0x080018ef
 8001864:	080018ef 	.word	0x080018ef
 8001868:	080018ef 	.word	0x080018ef
 800186c:	080018ef 	.word	0x080018ef
 8001870:	080018ef 	.word	0x080018ef
 8001874:	080018ef 	.word	0x080018ef
 8001878:	080018ef 	.word	0x080018ef
 800187c:	080018ef 	.word	0x080018ef
 8001880:	080018ef 	.word	0x080018ef
 8001884:	0800189d 	.word	0x0800189d
 8001888:	080018b1 	.word	0x080018b1
 800188c:	4a79      	ldr	r2, [pc, #484]	@ (8001a74 <HAL_GPIO_Init+0x2b4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d013      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001892:	e02c      	b.n	80018ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	623b      	str	r3, [r7, #32]
          break;
 800189a:	e029      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	3304      	adds	r3, #4
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e024      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	3308      	adds	r3, #8
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e01f      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	330c      	adds	r3, #12
 80018b6:	623b      	str	r3, [r7, #32]
          break;
 80018b8:	e01a      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018c2:	2304      	movs	r3, #4
 80018c4:	623b      	str	r3, [r7, #32]
          break;
 80018c6:	e013      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d105      	bne.n	80018dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d0:	2308      	movs	r3, #8
 80018d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	611a      	str	r2, [r3, #16]
          break;
 80018da:	e009      	b.n	80018f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018dc:	2308      	movs	r3, #8
 80018de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	615a      	str	r2, [r3, #20]
          break;
 80018e6:	e003      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
          break;
 80018ec:	e000      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          break;
 80018ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2bff      	cmp	r3, #255	@ 0xff
 80018f4:	d801      	bhi.n	80018fa <HAL_GPIO_Init+0x13a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	e001      	b.n	80018fe <HAL_GPIO_Init+0x13e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3304      	adds	r3, #4
 80018fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2bff      	cmp	r3, #255	@ 0xff
 8001904:	d802      	bhi.n	800190c <HAL_GPIO_Init+0x14c>
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	e002      	b.n	8001912 <HAL_GPIO_Init+0x152>
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	3b08      	subs	r3, #8
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	210f      	movs	r1, #15
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	401a      	ands	r2, r3
 8001924:	6a39      	ldr	r1, [r7, #32]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	431a      	orrs	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80b1 	beq.w	8001aa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001940:	4b4d      	ldr	r3, [pc, #308]	@ (8001a78 <HAL_GPIO_Init+0x2b8>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a4c      	ldr	r2, [pc, #304]	@ (8001a78 <HAL_GPIO_Init+0x2b8>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a78 <HAL_GPIO_Init+0x2b8>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001958:	4a48      	ldr	r2, [pc, #288]	@ (8001a7c <HAL_GPIO_Init+0x2bc>)
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001964:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a40      	ldr	r2, [pc, #256]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d013      	beq.n	80019ac <HAL_GPIO_Init+0x1ec>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a3f      	ldr	r2, [pc, #252]	@ (8001a84 <HAL_GPIO_Init+0x2c4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d00d      	beq.n	80019a8 <HAL_GPIO_Init+0x1e8>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a88 <HAL_GPIO_Init+0x2c8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d007      	beq.n	80019a4 <HAL_GPIO_Init+0x1e4>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a3d      	ldr	r2, [pc, #244]	@ (8001a8c <HAL_GPIO_Init+0x2cc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d101      	bne.n	80019a0 <HAL_GPIO_Init+0x1e0>
 800199c:	2303      	movs	r3, #3
 800199e:	e006      	b.n	80019ae <HAL_GPIO_Init+0x1ee>
 80019a0:	2304      	movs	r3, #4
 80019a2:	e004      	b.n	80019ae <HAL_GPIO_Init+0x1ee>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e002      	b.n	80019ae <HAL_GPIO_Init+0x1ee>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_GPIO_Init+0x1ee>
 80019ac:	2300      	movs	r3, #0
 80019ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b0:	f002 0203 	and.w	r2, r2, #3
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	4093      	lsls	r3, r2
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019be:	492f      	ldr	r1, [pc, #188]	@ (8001a7c <HAL_GPIO_Init+0x2bc>)
 80019c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	3302      	adds	r3, #2
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	492c      	ldr	r1, [pc, #176]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4928      	ldr	r1, [pc, #160]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a00:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	4922      	ldr	r1, [pc, #136]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a0e:	4b20      	ldr	r3, [pc, #128]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	491e      	ldr	r1, [pc, #120]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a28:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	4918      	ldr	r1, [pc, #96]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	4914      	ldr	r1, [pc, #80]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d021      	beq.n	8001a94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a50:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	490e      	ldr	r1, [pc, #56]	@ (8001a90 <HAL_GPIO_Init+0x2d0>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
 8001a5c:	e021      	b.n	8001aa2 <HAL_GPIO_Init+0x2e2>
 8001a5e:	bf00      	nop
 8001a60:	10320000 	.word	0x10320000
 8001a64:	10310000 	.word	0x10310000
 8001a68:	10220000 	.word	0x10220000
 8001a6c:	10210000 	.word	0x10210000
 8001a70:	10120000 	.word	0x10120000
 8001a74:	10110000 	.word	0x10110000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40010800 	.word	0x40010800
 8001a84:	40010c00 	.word	0x40010c00
 8001a88:	40011000 	.word	0x40011000
 8001a8c:	40011400 	.word	0x40011400
 8001a90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_GPIO_Init+0x304>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	4909      	ldr	r1, [pc, #36]	@ (8001ac4 <HAL_GPIO_Init+0x304>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f47f ae8e 	bne.w	80017d4 <HAL_GPIO_Init+0x14>
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	372c      	adds	r7, #44	@ 0x2c
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	40010400 	.word	0x40010400

08001ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e272      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8087 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae8:	4b92      	ldr	r3, [pc, #584]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d00c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af4:	4b8f      	ldr	r3, [pc, #572]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d112      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
 8001b00:	4b8c      	ldr	r3, [pc, #560]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b0c:	d10b      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0e:	4b89      	ldr	r3, [pc, #548]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d06c      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x12c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d168      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e24c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x76>
 8001b30:	4b80      	ldr	r3, [pc, #512]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a7f      	ldr	r2, [pc, #508]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e02e      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_RCC_OscConfig+0x98>
 8001b46:	4b7b      	ldr	r3, [pc, #492]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7a      	ldr	r2, [pc, #488]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b78      	ldr	r3, [pc, #480]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a77      	ldr	r2, [pc, #476]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0xbc>
 8001b6a:	4b72      	ldr	r3, [pc, #456]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a71      	ldr	r2, [pc, #452]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b6f      	ldr	r3, [pc, #444]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xd4>
 8001b84:	4b6b      	ldr	r3, [pc, #428]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a6a      	ldr	r2, [pc, #424]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b68      	ldr	r3, [pc, #416]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a67      	ldr	r2, [pc, #412]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7fe fe90 	bl	80008c8 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7fe fe8c 	bl	80008c8 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	@ 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e200      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xe4>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7fe fe7c 	bl	80008c8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7fe fe78 	bl	80008c8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	@ 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1ec      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b53      	ldr	r3, [pc, #332]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x10c>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c02:	4b4c      	ldr	r3, [pc, #304]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c0e:	4b49      	ldr	r3, [pc, #292]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x18c>
 8001c1a:	4b46      	ldr	r3, [pc, #280]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b43      	ldr	r3, [pc, #268]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x176>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c0      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4939      	ldr	r1, [pc, #228]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b36      	ldr	r3, [pc, #216]	@ (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7fe fe31 	bl	80008c8 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7fe fe2d 	bl	80008c8 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1a1      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b2a      	ldr	r3, [pc, #168]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4927      	ldr	r1, [pc, #156]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b26      	ldr	r3, [pc, #152]	@ (8001d38 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7fe fe10 	bl	80008c8 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cac:	f7fe fe0c 	bl	80008c8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e180      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d03a      	beq.n	8001d4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d019      	beq.n	8001d12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7fe fdf0 	bl	80008c8 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7fe fdec 	bl	80008c8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e160      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f000 fa9c 	bl	8002248 <RCC_Delay>
 8001d10:	e01c      	b.n	8001d4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d12:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_RCC_OscConfig+0x274>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7fe fdd6 	bl	80008c8 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1e:	e00f      	b.n	8001d40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d20:	f7fe fdd2 	bl	80008c8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d908      	bls.n	8001d40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e146      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	42420000 	.word	0x42420000
 8001d3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	4b92      	ldr	r3, [pc, #584]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1e9      	bne.n	8001d20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a6 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10d      	bne.n	8001d86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	4b88      	ldr	r3, [pc, #544]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a87      	ldr	r2, [pc, #540]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	61d3      	str	r3, [r2, #28]
 8001d76:	4b85      	ldr	r3, [pc, #532]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	4b82      	ldr	r3, [pc, #520]	@ (8001f90 <HAL_RCC_OscConfig+0x4c8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d92:	4b7f      	ldr	r3, [pc, #508]	@ (8001f90 <HAL_RCC_OscConfig+0x4c8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a7e      	ldr	r2, [pc, #504]	@ (8001f90 <HAL_RCC_OscConfig+0x4c8>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7fe fd93 	bl	80008c8 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7fe fd8f 	bl	80008c8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	@ 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e103      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	4b75      	ldr	r3, [pc, #468]	@ (8001f90 <HAL_RCC_OscConfig+0x4c8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_OscConfig+0x312>
 8001dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a6e      	ldr	r2, [pc, #440]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	e02d      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x334>
 8001de2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a69      	ldr	r2, [pc, #420]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6213      	str	r3, [r2, #32]
 8001dee:	4b67      	ldr	r3, [pc, #412]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a66      	ldr	r2, [pc, #408]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	e01c      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d10c      	bne.n	8001e1e <HAL_RCC_OscConfig+0x356>
 8001e04:	4b61      	ldr	r3, [pc, #388]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a60      	ldr	r2, [pc, #384]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	4b5e      	ldr	r3, [pc, #376]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a5d      	ldr	r2, [pc, #372]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	e00b      	b.n	8001e36 <HAL_RCC_OscConfig+0x36e>
 8001e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a5a      	ldr	r2, [pc, #360]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	4b58      	ldr	r3, [pc, #352]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a57      	ldr	r2, [pc, #348]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d015      	beq.n	8001e6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7fe fd43 	bl	80008c8 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e46:	f7fe fd3f 	bl	80008c8 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0b1      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0ee      	beq.n	8001e46 <HAL_RCC_OscConfig+0x37e>
 8001e68:	e014      	b.n	8001e94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7fe fd2d 	bl	80008c8 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7fe fd29 	bl	80008c8 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e09b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	4b40      	ldr	r3, [pc, #256]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1ee      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d105      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8087 	beq.w	8001fbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb0:	4b36      	ldr	r3, [pc, #216]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d061      	beq.n	8001f80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d146      	bne.n	8001f52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec4:	4b33      	ldr	r3, [pc, #204]	@ (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7fe fcfd 	bl	80008c8 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7fe fcf9 	bl	80008c8 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e06d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee4:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001efa:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4921      	ldr	r1, [pc, #132]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a19      	ldr	r1, [r3, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	491b      	ldr	r1, [pc, #108]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f24:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fccd 	bl	80008c8 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7fe fcc9 	bl	80008c8 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e03d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x46a>
 8001f50:	e035      	b.n	8001fbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fcb6 	bl	80008c8 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7fe fcb2 	bl	80008c8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e026      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x498>
 8001f7e:	e01e      	b.n	8001fbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e019      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
 8001f94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f98:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <HAL_RCC_OscConfig+0x500>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d106      	bne.n	8001fba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0d0      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b6a      	ldr	r3, [pc, #424]	@ (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d910      	bls.n	8002010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b67      	ldr	r3, [pc, #412]	@ (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 0207 	bic.w	r2, r3, #7
 8001ff6:	4965      	ldr	r1, [pc, #404]	@ (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b63      	ldr	r3, [pc, #396]	@ (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b8      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002028:	4b59      	ldr	r3, [pc, #356]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a58      	ldr	r2, [pc, #352]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002032:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002040:	4b53      	ldr	r3, [pc, #332]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a52      	ldr	r2, [pc, #328]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800204a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b50      	ldr	r3, [pc, #320]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	494d      	ldr	r1, [pc, #308]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d040      	beq.n	80020ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b47      	ldr	r3, [pc, #284]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d115      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e07f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	4b41      	ldr	r3, [pc, #260]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e073      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	4b3d      	ldr	r3, [pc, #244]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06b      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b39      	ldr	r3, [pc, #228]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4936      	ldr	r1, [pc, #216]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020bc:	f7fe fc04 	bl	80008c8 <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7fe fc00 	bl	80008c8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e053      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b2d      	ldr	r3, [pc, #180]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ec:	4b27      	ldr	r3, [pc, #156]	@ (800218c <HAL_RCC_ClockConfig+0x1c0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d210      	bcs.n	800211c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b24      	ldr	r3, [pc, #144]	@ (800218c <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4922      	ldr	r1, [pc, #136]	@ (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	@ (800218c <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e032      	b.n	8002182 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4916      	ldr	r1, [pc, #88]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002146:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	490e      	ldr	r1, [pc, #56]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800215a:	f000 f821 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800215e:	4602      	mov	r2, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	490a      	ldr	r1, [pc, #40]	@ (8002194 <HAL_RCC_ClockConfig+0x1c8>)
 800216c:	5ccb      	ldrb	r3, [r1, r3]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a09      	ldr	r2, [pc, #36]	@ (8002198 <HAL_RCC_ClockConfig+0x1cc>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002176:	4b09      	ldr	r3, [pc, #36]	@ (800219c <HAL_RCC_ClockConfig+0x1d0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fb62 	bl	8000844 <HAL_InitTick>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40022000 	.word	0x40022000
 8002190:	40021000 	.word	0x40021000
 8002194:	08003368 	.word	0x08003368
 8002198:	20000000 	.word	0x20000000
 800219c:	20000004 	.word	0x20000004

080021a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x94>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d002      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0x30>
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d003      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x36>
 80021ce:	e027      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d0:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x98>)
 80021d2:	613b      	str	r3, [r7, #16]
      break;
 80021d4:	e027      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	0c9b      	lsrs	r3, r3, #18
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	4a17      	ldr	r2, [pc, #92]	@ (800223c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021e0:	5cd3      	ldrb	r3, [r2, r3]
 80021e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d010      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021ee:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x94>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	0c5b      	lsrs	r3, r3, #17
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	4a11      	ldr	r2, [pc, #68]	@ (8002240 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x98>)
 8002202:	fb03 f202 	mul.w	r2, r3, r2
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e004      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a0c      	ldr	r2, [pc, #48]	@ (8002244 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	613b      	str	r3, [r7, #16]
      break;
 800221e:	e002      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x98>)
 8002222:	613b      	str	r3, [r7, #16]
      break;
 8002224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002226:	693b      	ldr	r3, [r7, #16]
}
 8002228:	4618      	mov	r0, r3
 800222a:	371c      	adds	r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	007a1200 	.word	0x007a1200
 800223c:	08003378 	.word	0x08003378
 8002240:	08003388 	.word	0x08003388
 8002244:	003d0900 	.word	0x003d0900

08002248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002250:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <RCC_Delay+0x34>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <RCC_Delay+0x38>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0a5b      	lsrs	r3, r3, #9
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002264:	bf00      	nop
  }
  while (Delay --);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	60fa      	str	r2, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f9      	bne.n	8002264 <RCC_Delay+0x1c>
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	20000000 	.word	0x20000000
 8002280:	10624dd3 	.word	0x10624dd3

08002284 <std>:
 8002284:	2300      	movs	r3, #0
 8002286:	b510      	push	{r4, lr}
 8002288:	4604      	mov	r4, r0
 800228a:	e9c0 3300 	strd	r3, r3, [r0]
 800228e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002292:	6083      	str	r3, [r0, #8]
 8002294:	8181      	strh	r1, [r0, #12]
 8002296:	6643      	str	r3, [r0, #100]	@ 0x64
 8002298:	81c2      	strh	r2, [r0, #14]
 800229a:	6183      	str	r3, [r0, #24]
 800229c:	4619      	mov	r1, r3
 800229e:	2208      	movs	r2, #8
 80022a0:	305c      	adds	r0, #92	@ 0x5c
 80022a2:	f000 fa01 	bl	80026a8 <memset>
 80022a6:	4b0d      	ldr	r3, [pc, #52]	@ (80022dc <std+0x58>)
 80022a8:	6224      	str	r4, [r4, #32]
 80022aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80022ac:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <std+0x5c>)
 80022ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80022b0:	4b0c      	ldr	r3, [pc, #48]	@ (80022e4 <std+0x60>)
 80022b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80022b4:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <std+0x64>)
 80022b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80022b8:	4b0c      	ldr	r3, [pc, #48]	@ (80022ec <std+0x68>)
 80022ba:	429c      	cmp	r4, r3
 80022bc:	d006      	beq.n	80022cc <std+0x48>
 80022be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80022c2:	4294      	cmp	r4, r2
 80022c4:	d002      	beq.n	80022cc <std+0x48>
 80022c6:	33d0      	adds	r3, #208	@ 0xd0
 80022c8:	429c      	cmp	r4, r3
 80022ca:	d105      	bne.n	80022d8 <std+0x54>
 80022cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80022d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022d4:	f000 ba60 	b.w	8002798 <__retarget_lock_init_recursive>
 80022d8:	bd10      	pop	{r4, pc}
 80022da:	bf00      	nop
 80022dc:	080024f9 	.word	0x080024f9
 80022e0:	0800251b 	.word	0x0800251b
 80022e4:	08002553 	.word	0x08002553
 80022e8:	08002577 	.word	0x08002577
 80022ec:	200000fc 	.word	0x200000fc

080022f0 <stdio_exit_handler>:
 80022f0:	4a02      	ldr	r2, [pc, #8]	@ (80022fc <stdio_exit_handler+0xc>)
 80022f2:	4903      	ldr	r1, [pc, #12]	@ (8002300 <stdio_exit_handler+0x10>)
 80022f4:	4803      	ldr	r0, [pc, #12]	@ (8002304 <stdio_exit_handler+0x14>)
 80022f6:	f000 b869 	b.w	80023cc <_fwalk_sglue>
 80022fa:	bf00      	nop
 80022fc:	2000000c 	.word	0x2000000c
 8002300:	08003031 	.word	0x08003031
 8002304:	2000001c 	.word	0x2000001c

08002308 <cleanup_stdio>:
 8002308:	6841      	ldr	r1, [r0, #4]
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <cleanup_stdio+0x34>)
 800230c:	b510      	push	{r4, lr}
 800230e:	4299      	cmp	r1, r3
 8002310:	4604      	mov	r4, r0
 8002312:	d001      	beq.n	8002318 <cleanup_stdio+0x10>
 8002314:	f000 fe8c 	bl	8003030 <_fflush_r>
 8002318:	68a1      	ldr	r1, [r4, #8]
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <cleanup_stdio+0x38>)
 800231c:	4299      	cmp	r1, r3
 800231e:	d002      	beq.n	8002326 <cleanup_stdio+0x1e>
 8002320:	4620      	mov	r0, r4
 8002322:	f000 fe85 	bl	8003030 <_fflush_r>
 8002326:	68e1      	ldr	r1, [r4, #12]
 8002328:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <cleanup_stdio+0x3c>)
 800232a:	4299      	cmp	r1, r3
 800232c:	d004      	beq.n	8002338 <cleanup_stdio+0x30>
 800232e:	4620      	mov	r0, r4
 8002330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002334:	f000 be7c 	b.w	8003030 <_fflush_r>
 8002338:	bd10      	pop	{r4, pc}
 800233a:	bf00      	nop
 800233c:	200000fc 	.word	0x200000fc
 8002340:	20000164 	.word	0x20000164
 8002344:	200001cc 	.word	0x200001cc

08002348 <global_stdio_init.part.0>:
 8002348:	b510      	push	{r4, lr}
 800234a:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <global_stdio_init.part.0+0x30>)
 800234c:	4c0b      	ldr	r4, [pc, #44]	@ (800237c <global_stdio_init.part.0+0x34>)
 800234e:	4a0c      	ldr	r2, [pc, #48]	@ (8002380 <global_stdio_init.part.0+0x38>)
 8002350:	4620      	mov	r0, r4
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	2104      	movs	r1, #4
 8002356:	2200      	movs	r2, #0
 8002358:	f7ff ff94 	bl	8002284 <std>
 800235c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002360:	2201      	movs	r2, #1
 8002362:	2109      	movs	r1, #9
 8002364:	f7ff ff8e 	bl	8002284 <std>
 8002368:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800236c:	2202      	movs	r2, #2
 800236e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002372:	2112      	movs	r1, #18
 8002374:	f7ff bf86 	b.w	8002284 <std>
 8002378:	20000234 	.word	0x20000234
 800237c:	200000fc 	.word	0x200000fc
 8002380:	080022f1 	.word	0x080022f1

08002384 <__sfp_lock_acquire>:
 8002384:	4801      	ldr	r0, [pc, #4]	@ (800238c <__sfp_lock_acquire+0x8>)
 8002386:	f000 ba08 	b.w	800279a <__retarget_lock_acquire_recursive>
 800238a:	bf00      	nop
 800238c:	2000023d 	.word	0x2000023d

08002390 <__sfp_lock_release>:
 8002390:	4801      	ldr	r0, [pc, #4]	@ (8002398 <__sfp_lock_release+0x8>)
 8002392:	f000 ba03 	b.w	800279c <__retarget_lock_release_recursive>
 8002396:	bf00      	nop
 8002398:	2000023d 	.word	0x2000023d

0800239c <__sinit>:
 800239c:	b510      	push	{r4, lr}
 800239e:	4604      	mov	r4, r0
 80023a0:	f7ff fff0 	bl	8002384 <__sfp_lock_acquire>
 80023a4:	6a23      	ldr	r3, [r4, #32]
 80023a6:	b11b      	cbz	r3, 80023b0 <__sinit+0x14>
 80023a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023ac:	f7ff bff0 	b.w	8002390 <__sfp_lock_release>
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <__sinit+0x28>)
 80023b2:	6223      	str	r3, [r4, #32]
 80023b4:	4b04      	ldr	r3, [pc, #16]	@ (80023c8 <__sinit+0x2c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f5      	bne.n	80023a8 <__sinit+0xc>
 80023bc:	f7ff ffc4 	bl	8002348 <global_stdio_init.part.0>
 80023c0:	e7f2      	b.n	80023a8 <__sinit+0xc>
 80023c2:	bf00      	nop
 80023c4:	08002309 	.word	0x08002309
 80023c8:	20000234 	.word	0x20000234

080023cc <_fwalk_sglue>:
 80023cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023d0:	4607      	mov	r7, r0
 80023d2:	4688      	mov	r8, r1
 80023d4:	4614      	mov	r4, r2
 80023d6:	2600      	movs	r6, #0
 80023d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023dc:	f1b9 0901 	subs.w	r9, r9, #1
 80023e0:	d505      	bpl.n	80023ee <_fwalk_sglue+0x22>
 80023e2:	6824      	ldr	r4, [r4, #0]
 80023e4:	2c00      	cmp	r4, #0
 80023e6:	d1f7      	bne.n	80023d8 <_fwalk_sglue+0xc>
 80023e8:	4630      	mov	r0, r6
 80023ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023ee:	89ab      	ldrh	r3, [r5, #12]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d907      	bls.n	8002404 <_fwalk_sglue+0x38>
 80023f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023f8:	3301      	adds	r3, #1
 80023fa:	d003      	beq.n	8002404 <_fwalk_sglue+0x38>
 80023fc:	4629      	mov	r1, r5
 80023fe:	4638      	mov	r0, r7
 8002400:	47c0      	blx	r8
 8002402:	4306      	orrs	r6, r0
 8002404:	3568      	adds	r5, #104	@ 0x68
 8002406:	e7e9      	b.n	80023dc <_fwalk_sglue+0x10>

08002408 <iprintf>:
 8002408:	b40f      	push	{r0, r1, r2, r3}
 800240a:	b507      	push	{r0, r1, r2, lr}
 800240c:	4906      	ldr	r1, [pc, #24]	@ (8002428 <iprintf+0x20>)
 800240e:	ab04      	add	r3, sp, #16
 8002410:	6808      	ldr	r0, [r1, #0]
 8002412:	f853 2b04 	ldr.w	r2, [r3], #4
 8002416:	6881      	ldr	r1, [r0, #8]
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	f000 fadf 	bl	80029dc <_vfiprintf_r>
 800241e:	b003      	add	sp, #12
 8002420:	f85d eb04 	ldr.w	lr, [sp], #4
 8002424:	b004      	add	sp, #16
 8002426:	4770      	bx	lr
 8002428:	20000018 	.word	0x20000018

0800242c <putchar>:
 800242c:	4b02      	ldr	r3, [pc, #8]	@ (8002438 <putchar+0xc>)
 800242e:	4601      	mov	r1, r0
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	6882      	ldr	r2, [r0, #8]
 8002434:	f000 be85 	b.w	8003142 <_putc_r>
 8002438:	20000018 	.word	0x20000018

0800243c <_puts_r>:
 800243c:	6a03      	ldr	r3, [r0, #32]
 800243e:	b570      	push	{r4, r5, r6, lr}
 8002440:	4605      	mov	r5, r0
 8002442:	460e      	mov	r6, r1
 8002444:	6884      	ldr	r4, [r0, #8]
 8002446:	b90b      	cbnz	r3, 800244c <_puts_r+0x10>
 8002448:	f7ff ffa8 	bl	800239c <__sinit>
 800244c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800244e:	07db      	lsls	r3, r3, #31
 8002450:	d405      	bmi.n	800245e <_puts_r+0x22>
 8002452:	89a3      	ldrh	r3, [r4, #12]
 8002454:	0598      	lsls	r0, r3, #22
 8002456:	d402      	bmi.n	800245e <_puts_r+0x22>
 8002458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800245a:	f000 f99e 	bl	800279a <__retarget_lock_acquire_recursive>
 800245e:	89a3      	ldrh	r3, [r4, #12]
 8002460:	0719      	lsls	r1, r3, #28
 8002462:	d502      	bpl.n	800246a <_puts_r+0x2e>
 8002464:	6923      	ldr	r3, [r4, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d135      	bne.n	80024d6 <_puts_r+0x9a>
 800246a:	4621      	mov	r1, r4
 800246c:	4628      	mov	r0, r5
 800246e:	f000 f8c5 	bl	80025fc <__swsetup_r>
 8002472:	b380      	cbz	r0, 80024d6 <_puts_r+0x9a>
 8002474:	f04f 35ff 	mov.w	r5, #4294967295
 8002478:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800247a:	07da      	lsls	r2, r3, #31
 800247c:	d405      	bmi.n	800248a <_puts_r+0x4e>
 800247e:	89a3      	ldrh	r3, [r4, #12]
 8002480:	059b      	lsls	r3, r3, #22
 8002482:	d402      	bmi.n	800248a <_puts_r+0x4e>
 8002484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002486:	f000 f989 	bl	800279c <__retarget_lock_release_recursive>
 800248a:	4628      	mov	r0, r5
 800248c:	bd70      	pop	{r4, r5, r6, pc}
 800248e:	2b00      	cmp	r3, #0
 8002490:	da04      	bge.n	800249c <_puts_r+0x60>
 8002492:	69a2      	ldr	r2, [r4, #24]
 8002494:	429a      	cmp	r2, r3
 8002496:	dc17      	bgt.n	80024c8 <_puts_r+0x8c>
 8002498:	290a      	cmp	r1, #10
 800249a:	d015      	beq.n	80024c8 <_puts_r+0x8c>
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	6022      	str	r2, [r4, #0]
 80024a2:	7019      	strb	r1, [r3, #0]
 80024a4:	68a3      	ldr	r3, [r4, #8]
 80024a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80024aa:	3b01      	subs	r3, #1
 80024ac:	60a3      	str	r3, [r4, #8]
 80024ae:	2900      	cmp	r1, #0
 80024b0:	d1ed      	bne.n	800248e <_puts_r+0x52>
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	da11      	bge.n	80024da <_puts_r+0x9e>
 80024b6:	4622      	mov	r2, r4
 80024b8:	210a      	movs	r1, #10
 80024ba:	4628      	mov	r0, r5
 80024bc:	f000 f85f 	bl	800257e <__swbuf_r>
 80024c0:	3001      	adds	r0, #1
 80024c2:	d0d7      	beq.n	8002474 <_puts_r+0x38>
 80024c4:	250a      	movs	r5, #10
 80024c6:	e7d7      	b.n	8002478 <_puts_r+0x3c>
 80024c8:	4622      	mov	r2, r4
 80024ca:	4628      	mov	r0, r5
 80024cc:	f000 f857 	bl	800257e <__swbuf_r>
 80024d0:	3001      	adds	r0, #1
 80024d2:	d1e7      	bne.n	80024a4 <_puts_r+0x68>
 80024d4:	e7ce      	b.n	8002474 <_puts_r+0x38>
 80024d6:	3e01      	subs	r6, #1
 80024d8:	e7e4      	b.n	80024a4 <_puts_r+0x68>
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	6022      	str	r2, [r4, #0]
 80024e0:	220a      	movs	r2, #10
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	e7ee      	b.n	80024c4 <_puts_r+0x88>
	...

080024e8 <puts>:
 80024e8:	4b02      	ldr	r3, [pc, #8]	@ (80024f4 <puts+0xc>)
 80024ea:	4601      	mov	r1, r0
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	f7ff bfa5 	b.w	800243c <_puts_r>
 80024f2:	bf00      	nop
 80024f4:	20000018 	.word	0x20000018

080024f8 <__sread>:
 80024f8:	b510      	push	{r4, lr}
 80024fa:	460c      	mov	r4, r1
 80024fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002500:	f000 f8fc 	bl	80026fc <_read_r>
 8002504:	2800      	cmp	r0, #0
 8002506:	bfab      	itete	ge
 8002508:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800250a:	89a3      	ldrhlt	r3, [r4, #12]
 800250c:	181b      	addge	r3, r3, r0
 800250e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002512:	bfac      	ite	ge
 8002514:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002516:	81a3      	strhlt	r3, [r4, #12]
 8002518:	bd10      	pop	{r4, pc}

0800251a <__swrite>:
 800251a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800251e:	461f      	mov	r7, r3
 8002520:	898b      	ldrh	r3, [r1, #12]
 8002522:	4605      	mov	r5, r0
 8002524:	05db      	lsls	r3, r3, #23
 8002526:	460c      	mov	r4, r1
 8002528:	4616      	mov	r6, r2
 800252a:	d505      	bpl.n	8002538 <__swrite+0x1e>
 800252c:	2302      	movs	r3, #2
 800252e:	2200      	movs	r2, #0
 8002530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002534:	f000 f8d0 	bl	80026d8 <_lseek_r>
 8002538:	89a3      	ldrh	r3, [r4, #12]
 800253a:	4632      	mov	r2, r6
 800253c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002540:	81a3      	strh	r3, [r4, #12]
 8002542:	4628      	mov	r0, r5
 8002544:	463b      	mov	r3, r7
 8002546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800254a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800254e:	f000 b8e7 	b.w	8002720 <_write_r>

08002552 <__sseek>:
 8002552:	b510      	push	{r4, lr}
 8002554:	460c      	mov	r4, r1
 8002556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800255a:	f000 f8bd 	bl	80026d8 <_lseek_r>
 800255e:	1c43      	adds	r3, r0, #1
 8002560:	89a3      	ldrh	r3, [r4, #12]
 8002562:	bf15      	itete	ne
 8002564:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002566:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800256a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800256e:	81a3      	strheq	r3, [r4, #12]
 8002570:	bf18      	it	ne
 8002572:	81a3      	strhne	r3, [r4, #12]
 8002574:	bd10      	pop	{r4, pc}

08002576 <__sclose>:
 8002576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800257a:	f000 b89d 	b.w	80026b8 <_close_r>

0800257e <__swbuf_r>:
 800257e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002580:	460e      	mov	r6, r1
 8002582:	4614      	mov	r4, r2
 8002584:	4605      	mov	r5, r0
 8002586:	b118      	cbz	r0, 8002590 <__swbuf_r+0x12>
 8002588:	6a03      	ldr	r3, [r0, #32]
 800258a:	b90b      	cbnz	r3, 8002590 <__swbuf_r+0x12>
 800258c:	f7ff ff06 	bl	800239c <__sinit>
 8002590:	69a3      	ldr	r3, [r4, #24]
 8002592:	60a3      	str	r3, [r4, #8]
 8002594:	89a3      	ldrh	r3, [r4, #12]
 8002596:	071a      	lsls	r2, r3, #28
 8002598:	d501      	bpl.n	800259e <__swbuf_r+0x20>
 800259a:	6923      	ldr	r3, [r4, #16]
 800259c:	b943      	cbnz	r3, 80025b0 <__swbuf_r+0x32>
 800259e:	4621      	mov	r1, r4
 80025a0:	4628      	mov	r0, r5
 80025a2:	f000 f82b 	bl	80025fc <__swsetup_r>
 80025a6:	b118      	cbz	r0, 80025b0 <__swbuf_r+0x32>
 80025a8:	f04f 37ff 	mov.w	r7, #4294967295
 80025ac:	4638      	mov	r0, r7
 80025ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	6922      	ldr	r2, [r4, #16]
 80025b4:	b2f6      	uxtb	r6, r6
 80025b6:	1a98      	subs	r0, r3, r2
 80025b8:	6963      	ldr	r3, [r4, #20]
 80025ba:	4637      	mov	r7, r6
 80025bc:	4283      	cmp	r3, r0
 80025be:	dc05      	bgt.n	80025cc <__swbuf_r+0x4e>
 80025c0:	4621      	mov	r1, r4
 80025c2:	4628      	mov	r0, r5
 80025c4:	f000 fd34 	bl	8003030 <_fflush_r>
 80025c8:	2800      	cmp	r0, #0
 80025ca:	d1ed      	bne.n	80025a8 <__swbuf_r+0x2a>
 80025cc:	68a3      	ldr	r3, [r4, #8]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	60a3      	str	r3, [r4, #8]
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	6022      	str	r2, [r4, #0]
 80025d8:	701e      	strb	r6, [r3, #0]
 80025da:	6962      	ldr	r2, [r4, #20]
 80025dc:	1c43      	adds	r3, r0, #1
 80025de:	429a      	cmp	r2, r3
 80025e0:	d004      	beq.n	80025ec <__swbuf_r+0x6e>
 80025e2:	89a3      	ldrh	r3, [r4, #12]
 80025e4:	07db      	lsls	r3, r3, #31
 80025e6:	d5e1      	bpl.n	80025ac <__swbuf_r+0x2e>
 80025e8:	2e0a      	cmp	r6, #10
 80025ea:	d1df      	bne.n	80025ac <__swbuf_r+0x2e>
 80025ec:	4621      	mov	r1, r4
 80025ee:	4628      	mov	r0, r5
 80025f0:	f000 fd1e 	bl	8003030 <_fflush_r>
 80025f4:	2800      	cmp	r0, #0
 80025f6:	d0d9      	beq.n	80025ac <__swbuf_r+0x2e>
 80025f8:	e7d6      	b.n	80025a8 <__swbuf_r+0x2a>
	...

080025fc <__swsetup_r>:
 80025fc:	b538      	push	{r3, r4, r5, lr}
 80025fe:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <__swsetup_r+0xa8>)
 8002600:	4605      	mov	r5, r0
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	460c      	mov	r4, r1
 8002606:	b118      	cbz	r0, 8002610 <__swsetup_r+0x14>
 8002608:	6a03      	ldr	r3, [r0, #32]
 800260a:	b90b      	cbnz	r3, 8002610 <__swsetup_r+0x14>
 800260c:	f7ff fec6 	bl	800239c <__sinit>
 8002610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002614:	0719      	lsls	r1, r3, #28
 8002616:	d422      	bmi.n	800265e <__swsetup_r+0x62>
 8002618:	06da      	lsls	r2, r3, #27
 800261a:	d407      	bmi.n	800262c <__swsetup_r+0x30>
 800261c:	2209      	movs	r2, #9
 800261e:	602a      	str	r2, [r5, #0]
 8002620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	81a3      	strh	r3, [r4, #12]
 800262a:	e033      	b.n	8002694 <__swsetup_r+0x98>
 800262c:	0758      	lsls	r0, r3, #29
 800262e:	d512      	bpl.n	8002656 <__swsetup_r+0x5a>
 8002630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002632:	b141      	cbz	r1, 8002646 <__swsetup_r+0x4a>
 8002634:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002638:	4299      	cmp	r1, r3
 800263a:	d002      	beq.n	8002642 <__swsetup_r+0x46>
 800263c:	4628      	mov	r0, r5
 800263e:	f000 f8af 	bl	80027a0 <_free_r>
 8002642:	2300      	movs	r3, #0
 8002644:	6363      	str	r3, [r4, #52]	@ 0x34
 8002646:	89a3      	ldrh	r3, [r4, #12]
 8002648:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800264c:	81a3      	strh	r3, [r4, #12]
 800264e:	2300      	movs	r3, #0
 8002650:	6063      	str	r3, [r4, #4]
 8002652:	6923      	ldr	r3, [r4, #16]
 8002654:	6023      	str	r3, [r4, #0]
 8002656:	89a3      	ldrh	r3, [r4, #12]
 8002658:	f043 0308 	orr.w	r3, r3, #8
 800265c:	81a3      	strh	r3, [r4, #12]
 800265e:	6923      	ldr	r3, [r4, #16]
 8002660:	b94b      	cbnz	r3, 8002676 <__swsetup_r+0x7a>
 8002662:	89a3      	ldrh	r3, [r4, #12]
 8002664:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800266c:	d003      	beq.n	8002676 <__swsetup_r+0x7a>
 800266e:	4621      	mov	r1, r4
 8002670:	4628      	mov	r0, r5
 8002672:	f000 fd2a 	bl	80030ca <__smakebuf_r>
 8002676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800267a:	f013 0201 	ands.w	r2, r3, #1
 800267e:	d00a      	beq.n	8002696 <__swsetup_r+0x9a>
 8002680:	2200      	movs	r2, #0
 8002682:	60a2      	str	r2, [r4, #8]
 8002684:	6962      	ldr	r2, [r4, #20]
 8002686:	4252      	negs	r2, r2
 8002688:	61a2      	str	r2, [r4, #24]
 800268a:	6922      	ldr	r2, [r4, #16]
 800268c:	b942      	cbnz	r2, 80026a0 <__swsetup_r+0xa4>
 800268e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002692:	d1c5      	bne.n	8002620 <__swsetup_r+0x24>
 8002694:	bd38      	pop	{r3, r4, r5, pc}
 8002696:	0799      	lsls	r1, r3, #30
 8002698:	bf58      	it	pl
 800269a:	6962      	ldrpl	r2, [r4, #20]
 800269c:	60a2      	str	r2, [r4, #8]
 800269e:	e7f4      	b.n	800268a <__swsetup_r+0x8e>
 80026a0:	2000      	movs	r0, #0
 80026a2:	e7f7      	b.n	8002694 <__swsetup_r+0x98>
 80026a4:	20000018 	.word	0x20000018

080026a8 <memset>:
 80026a8:	4603      	mov	r3, r0
 80026aa:	4402      	add	r2, r0
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d100      	bne.n	80026b2 <memset+0xa>
 80026b0:	4770      	bx	lr
 80026b2:	f803 1b01 	strb.w	r1, [r3], #1
 80026b6:	e7f9      	b.n	80026ac <memset+0x4>

080026b8 <_close_r>:
 80026b8:	b538      	push	{r3, r4, r5, lr}
 80026ba:	2300      	movs	r3, #0
 80026bc:	4d05      	ldr	r5, [pc, #20]	@ (80026d4 <_close_r+0x1c>)
 80026be:	4604      	mov	r4, r0
 80026c0:	4608      	mov	r0, r1
 80026c2:	602b      	str	r3, [r5, #0]
 80026c4:	f7fe f815 	bl	80006f2 <_close>
 80026c8:	1c43      	adds	r3, r0, #1
 80026ca:	d102      	bne.n	80026d2 <_close_r+0x1a>
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	b103      	cbz	r3, 80026d2 <_close_r+0x1a>
 80026d0:	6023      	str	r3, [r4, #0]
 80026d2:	bd38      	pop	{r3, r4, r5, pc}
 80026d4:	20000238 	.word	0x20000238

080026d8 <_lseek_r>:
 80026d8:	b538      	push	{r3, r4, r5, lr}
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	2200      	movs	r2, #0
 80026e2:	4d05      	ldr	r5, [pc, #20]	@ (80026f8 <_lseek_r+0x20>)
 80026e4:	602a      	str	r2, [r5, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7fe f827 	bl	800073a <_lseek>
 80026ec:	1c43      	adds	r3, r0, #1
 80026ee:	d102      	bne.n	80026f6 <_lseek_r+0x1e>
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	b103      	cbz	r3, 80026f6 <_lseek_r+0x1e>
 80026f4:	6023      	str	r3, [r4, #0]
 80026f6:	bd38      	pop	{r3, r4, r5, pc}
 80026f8:	20000238 	.word	0x20000238

080026fc <_read_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4604      	mov	r4, r0
 8002700:	4608      	mov	r0, r1
 8002702:	4611      	mov	r1, r2
 8002704:	2200      	movs	r2, #0
 8002706:	4d05      	ldr	r5, [pc, #20]	@ (800271c <_read_r+0x20>)
 8002708:	602a      	str	r2, [r5, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	f7fd ffd4 	bl	80006b8 <_read>
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	d102      	bne.n	800271a <_read_r+0x1e>
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	b103      	cbz	r3, 800271a <_read_r+0x1e>
 8002718:	6023      	str	r3, [r4, #0]
 800271a:	bd38      	pop	{r3, r4, r5, pc}
 800271c:	20000238 	.word	0x20000238

08002720 <_write_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4604      	mov	r4, r0
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	2200      	movs	r2, #0
 800272a:	4d05      	ldr	r5, [pc, #20]	@ (8002740 <_write_r+0x20>)
 800272c:	602a      	str	r2, [r5, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	f7fd fd32 	bl	8000198 <_write>
 8002734:	1c43      	adds	r3, r0, #1
 8002736:	d102      	bne.n	800273e <_write_r+0x1e>
 8002738:	682b      	ldr	r3, [r5, #0]
 800273a:	b103      	cbz	r3, 800273e <_write_r+0x1e>
 800273c:	6023      	str	r3, [r4, #0]
 800273e:	bd38      	pop	{r3, r4, r5, pc}
 8002740:	20000238 	.word	0x20000238

08002744 <__errno>:
 8002744:	4b01      	ldr	r3, [pc, #4]	@ (800274c <__errno+0x8>)
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000018 	.word	0x20000018

08002750 <__libc_init_array>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	2600      	movs	r6, #0
 8002754:	4d0c      	ldr	r5, [pc, #48]	@ (8002788 <__libc_init_array+0x38>)
 8002756:	4c0d      	ldr	r4, [pc, #52]	@ (800278c <__libc_init_array+0x3c>)
 8002758:	1b64      	subs	r4, r4, r5
 800275a:	10a4      	asrs	r4, r4, #2
 800275c:	42a6      	cmp	r6, r4
 800275e:	d109      	bne.n	8002774 <__libc_init_array+0x24>
 8002760:	f000 fd64 	bl	800322c <_init>
 8002764:	2600      	movs	r6, #0
 8002766:	4d0a      	ldr	r5, [pc, #40]	@ (8002790 <__libc_init_array+0x40>)
 8002768:	4c0a      	ldr	r4, [pc, #40]	@ (8002794 <__libc_init_array+0x44>)
 800276a:	1b64      	subs	r4, r4, r5
 800276c:	10a4      	asrs	r4, r4, #2
 800276e:	42a6      	cmp	r6, r4
 8002770:	d105      	bne.n	800277e <__libc_init_array+0x2e>
 8002772:	bd70      	pop	{r4, r5, r6, pc}
 8002774:	f855 3b04 	ldr.w	r3, [r5], #4
 8002778:	4798      	blx	r3
 800277a:	3601      	adds	r6, #1
 800277c:	e7ee      	b.n	800275c <__libc_init_array+0xc>
 800277e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002782:	4798      	blx	r3
 8002784:	3601      	adds	r6, #1
 8002786:	e7f2      	b.n	800276e <__libc_init_array+0x1e>
 8002788:	080033c0 	.word	0x080033c0
 800278c:	080033c0 	.word	0x080033c0
 8002790:	080033c0 	.word	0x080033c0
 8002794:	080033c4 	.word	0x080033c4

08002798 <__retarget_lock_init_recursive>:
 8002798:	4770      	bx	lr

0800279a <__retarget_lock_acquire_recursive>:
 800279a:	4770      	bx	lr

0800279c <__retarget_lock_release_recursive>:
 800279c:	4770      	bx	lr
	...

080027a0 <_free_r>:
 80027a0:	b538      	push	{r3, r4, r5, lr}
 80027a2:	4605      	mov	r5, r0
 80027a4:	2900      	cmp	r1, #0
 80027a6:	d040      	beq.n	800282a <_free_r+0x8a>
 80027a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027ac:	1f0c      	subs	r4, r1, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bfb8      	it	lt
 80027b2:	18e4      	addlt	r4, r4, r3
 80027b4:	f000 f8de 	bl	8002974 <__malloc_lock>
 80027b8:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <_free_r+0x8c>)
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	b933      	cbnz	r3, 80027cc <_free_r+0x2c>
 80027be:	6063      	str	r3, [r4, #4]
 80027c0:	6014      	str	r4, [r2, #0]
 80027c2:	4628      	mov	r0, r5
 80027c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027c8:	f000 b8da 	b.w	8002980 <__malloc_unlock>
 80027cc:	42a3      	cmp	r3, r4
 80027ce:	d908      	bls.n	80027e2 <_free_r+0x42>
 80027d0:	6820      	ldr	r0, [r4, #0]
 80027d2:	1821      	adds	r1, r4, r0
 80027d4:	428b      	cmp	r3, r1
 80027d6:	bf01      	itttt	eq
 80027d8:	6819      	ldreq	r1, [r3, #0]
 80027da:	685b      	ldreq	r3, [r3, #4]
 80027dc:	1809      	addeq	r1, r1, r0
 80027de:	6021      	streq	r1, [r4, #0]
 80027e0:	e7ed      	b.n	80027be <_free_r+0x1e>
 80027e2:	461a      	mov	r2, r3
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	b10b      	cbz	r3, 80027ec <_free_r+0x4c>
 80027e8:	42a3      	cmp	r3, r4
 80027ea:	d9fa      	bls.n	80027e2 <_free_r+0x42>
 80027ec:	6811      	ldr	r1, [r2, #0]
 80027ee:	1850      	adds	r0, r2, r1
 80027f0:	42a0      	cmp	r0, r4
 80027f2:	d10b      	bne.n	800280c <_free_r+0x6c>
 80027f4:	6820      	ldr	r0, [r4, #0]
 80027f6:	4401      	add	r1, r0
 80027f8:	1850      	adds	r0, r2, r1
 80027fa:	4283      	cmp	r3, r0
 80027fc:	6011      	str	r1, [r2, #0]
 80027fe:	d1e0      	bne.n	80027c2 <_free_r+0x22>
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4408      	add	r0, r1
 8002806:	6010      	str	r0, [r2, #0]
 8002808:	6053      	str	r3, [r2, #4]
 800280a:	e7da      	b.n	80027c2 <_free_r+0x22>
 800280c:	d902      	bls.n	8002814 <_free_r+0x74>
 800280e:	230c      	movs	r3, #12
 8002810:	602b      	str	r3, [r5, #0]
 8002812:	e7d6      	b.n	80027c2 <_free_r+0x22>
 8002814:	6820      	ldr	r0, [r4, #0]
 8002816:	1821      	adds	r1, r4, r0
 8002818:	428b      	cmp	r3, r1
 800281a:	bf01      	itttt	eq
 800281c:	6819      	ldreq	r1, [r3, #0]
 800281e:	685b      	ldreq	r3, [r3, #4]
 8002820:	1809      	addeq	r1, r1, r0
 8002822:	6021      	streq	r1, [r4, #0]
 8002824:	6063      	str	r3, [r4, #4]
 8002826:	6054      	str	r4, [r2, #4]
 8002828:	e7cb      	b.n	80027c2 <_free_r+0x22>
 800282a:	bd38      	pop	{r3, r4, r5, pc}
 800282c:	20000244 	.word	0x20000244

08002830 <sbrk_aligned>:
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	4e0f      	ldr	r6, [pc, #60]	@ (8002870 <sbrk_aligned+0x40>)
 8002834:	460c      	mov	r4, r1
 8002836:	6831      	ldr	r1, [r6, #0]
 8002838:	4605      	mov	r5, r0
 800283a:	b911      	cbnz	r1, 8002842 <sbrk_aligned+0x12>
 800283c:	f000 fcd8 	bl	80031f0 <_sbrk_r>
 8002840:	6030      	str	r0, [r6, #0]
 8002842:	4621      	mov	r1, r4
 8002844:	4628      	mov	r0, r5
 8002846:	f000 fcd3 	bl	80031f0 <_sbrk_r>
 800284a:	1c43      	adds	r3, r0, #1
 800284c:	d103      	bne.n	8002856 <sbrk_aligned+0x26>
 800284e:	f04f 34ff 	mov.w	r4, #4294967295
 8002852:	4620      	mov	r0, r4
 8002854:	bd70      	pop	{r4, r5, r6, pc}
 8002856:	1cc4      	adds	r4, r0, #3
 8002858:	f024 0403 	bic.w	r4, r4, #3
 800285c:	42a0      	cmp	r0, r4
 800285e:	d0f8      	beq.n	8002852 <sbrk_aligned+0x22>
 8002860:	1a21      	subs	r1, r4, r0
 8002862:	4628      	mov	r0, r5
 8002864:	f000 fcc4 	bl	80031f0 <_sbrk_r>
 8002868:	3001      	adds	r0, #1
 800286a:	d1f2      	bne.n	8002852 <sbrk_aligned+0x22>
 800286c:	e7ef      	b.n	800284e <sbrk_aligned+0x1e>
 800286e:	bf00      	nop
 8002870:	20000240 	.word	0x20000240

08002874 <_malloc_r>:
 8002874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002878:	1ccd      	adds	r5, r1, #3
 800287a:	f025 0503 	bic.w	r5, r5, #3
 800287e:	3508      	adds	r5, #8
 8002880:	2d0c      	cmp	r5, #12
 8002882:	bf38      	it	cc
 8002884:	250c      	movcc	r5, #12
 8002886:	2d00      	cmp	r5, #0
 8002888:	4606      	mov	r6, r0
 800288a:	db01      	blt.n	8002890 <_malloc_r+0x1c>
 800288c:	42a9      	cmp	r1, r5
 800288e:	d904      	bls.n	800289a <_malloc_r+0x26>
 8002890:	230c      	movs	r3, #12
 8002892:	6033      	str	r3, [r6, #0]
 8002894:	2000      	movs	r0, #0
 8002896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800289a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002970 <_malloc_r+0xfc>
 800289e:	f000 f869 	bl	8002974 <__malloc_lock>
 80028a2:	f8d8 3000 	ldr.w	r3, [r8]
 80028a6:	461c      	mov	r4, r3
 80028a8:	bb44      	cbnz	r4, 80028fc <_malloc_r+0x88>
 80028aa:	4629      	mov	r1, r5
 80028ac:	4630      	mov	r0, r6
 80028ae:	f7ff ffbf 	bl	8002830 <sbrk_aligned>
 80028b2:	1c43      	adds	r3, r0, #1
 80028b4:	4604      	mov	r4, r0
 80028b6:	d158      	bne.n	800296a <_malloc_r+0xf6>
 80028b8:	f8d8 4000 	ldr.w	r4, [r8]
 80028bc:	4627      	mov	r7, r4
 80028be:	2f00      	cmp	r7, #0
 80028c0:	d143      	bne.n	800294a <_malloc_r+0xd6>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d04b      	beq.n	800295e <_malloc_r+0xea>
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	4639      	mov	r1, r7
 80028ca:	4630      	mov	r0, r6
 80028cc:	eb04 0903 	add.w	r9, r4, r3
 80028d0:	f000 fc8e 	bl	80031f0 <_sbrk_r>
 80028d4:	4581      	cmp	r9, r0
 80028d6:	d142      	bne.n	800295e <_malloc_r+0xea>
 80028d8:	6821      	ldr	r1, [r4, #0]
 80028da:	4630      	mov	r0, r6
 80028dc:	1a6d      	subs	r5, r5, r1
 80028de:	4629      	mov	r1, r5
 80028e0:	f7ff ffa6 	bl	8002830 <sbrk_aligned>
 80028e4:	3001      	adds	r0, #1
 80028e6:	d03a      	beq.n	800295e <_malloc_r+0xea>
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	442b      	add	r3, r5
 80028ec:	6023      	str	r3, [r4, #0]
 80028ee:	f8d8 3000 	ldr.w	r3, [r8]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	bb62      	cbnz	r2, 8002950 <_malloc_r+0xdc>
 80028f6:	f8c8 7000 	str.w	r7, [r8]
 80028fa:	e00f      	b.n	800291c <_malloc_r+0xa8>
 80028fc:	6822      	ldr	r2, [r4, #0]
 80028fe:	1b52      	subs	r2, r2, r5
 8002900:	d420      	bmi.n	8002944 <_malloc_r+0xd0>
 8002902:	2a0b      	cmp	r2, #11
 8002904:	d917      	bls.n	8002936 <_malloc_r+0xc2>
 8002906:	1961      	adds	r1, r4, r5
 8002908:	42a3      	cmp	r3, r4
 800290a:	6025      	str	r5, [r4, #0]
 800290c:	bf18      	it	ne
 800290e:	6059      	strne	r1, [r3, #4]
 8002910:	6863      	ldr	r3, [r4, #4]
 8002912:	bf08      	it	eq
 8002914:	f8c8 1000 	streq.w	r1, [r8]
 8002918:	5162      	str	r2, [r4, r5]
 800291a:	604b      	str	r3, [r1, #4]
 800291c:	4630      	mov	r0, r6
 800291e:	f000 f82f 	bl	8002980 <__malloc_unlock>
 8002922:	f104 000b 	add.w	r0, r4, #11
 8002926:	1d23      	adds	r3, r4, #4
 8002928:	f020 0007 	bic.w	r0, r0, #7
 800292c:	1ac2      	subs	r2, r0, r3
 800292e:	bf1c      	itt	ne
 8002930:	1a1b      	subne	r3, r3, r0
 8002932:	50a3      	strne	r3, [r4, r2]
 8002934:	e7af      	b.n	8002896 <_malloc_r+0x22>
 8002936:	6862      	ldr	r2, [r4, #4]
 8002938:	42a3      	cmp	r3, r4
 800293a:	bf0c      	ite	eq
 800293c:	f8c8 2000 	streq.w	r2, [r8]
 8002940:	605a      	strne	r2, [r3, #4]
 8002942:	e7eb      	b.n	800291c <_malloc_r+0xa8>
 8002944:	4623      	mov	r3, r4
 8002946:	6864      	ldr	r4, [r4, #4]
 8002948:	e7ae      	b.n	80028a8 <_malloc_r+0x34>
 800294a:	463c      	mov	r4, r7
 800294c:	687f      	ldr	r7, [r7, #4]
 800294e:	e7b6      	b.n	80028be <_malloc_r+0x4a>
 8002950:	461a      	mov	r2, r3
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	42a3      	cmp	r3, r4
 8002956:	d1fb      	bne.n	8002950 <_malloc_r+0xdc>
 8002958:	2300      	movs	r3, #0
 800295a:	6053      	str	r3, [r2, #4]
 800295c:	e7de      	b.n	800291c <_malloc_r+0xa8>
 800295e:	230c      	movs	r3, #12
 8002960:	4630      	mov	r0, r6
 8002962:	6033      	str	r3, [r6, #0]
 8002964:	f000 f80c 	bl	8002980 <__malloc_unlock>
 8002968:	e794      	b.n	8002894 <_malloc_r+0x20>
 800296a:	6005      	str	r5, [r0, #0]
 800296c:	e7d6      	b.n	800291c <_malloc_r+0xa8>
 800296e:	bf00      	nop
 8002970:	20000244 	.word	0x20000244

08002974 <__malloc_lock>:
 8002974:	4801      	ldr	r0, [pc, #4]	@ (800297c <__malloc_lock+0x8>)
 8002976:	f7ff bf10 	b.w	800279a <__retarget_lock_acquire_recursive>
 800297a:	bf00      	nop
 800297c:	2000023c 	.word	0x2000023c

08002980 <__malloc_unlock>:
 8002980:	4801      	ldr	r0, [pc, #4]	@ (8002988 <__malloc_unlock+0x8>)
 8002982:	f7ff bf0b 	b.w	800279c <__retarget_lock_release_recursive>
 8002986:	bf00      	nop
 8002988:	2000023c 	.word	0x2000023c

0800298c <__sfputc_r>:
 800298c:	6893      	ldr	r3, [r2, #8]
 800298e:	b410      	push	{r4}
 8002990:	3b01      	subs	r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	6093      	str	r3, [r2, #8]
 8002996:	da07      	bge.n	80029a8 <__sfputc_r+0x1c>
 8002998:	6994      	ldr	r4, [r2, #24]
 800299a:	42a3      	cmp	r3, r4
 800299c:	db01      	blt.n	80029a2 <__sfputc_r+0x16>
 800299e:	290a      	cmp	r1, #10
 80029a0:	d102      	bne.n	80029a8 <__sfputc_r+0x1c>
 80029a2:	bc10      	pop	{r4}
 80029a4:	f7ff bdeb 	b.w	800257e <__swbuf_r>
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	1c58      	adds	r0, r3, #1
 80029ac:	6010      	str	r0, [r2, #0]
 80029ae:	7019      	strb	r1, [r3, #0]
 80029b0:	4608      	mov	r0, r1
 80029b2:	bc10      	pop	{r4}
 80029b4:	4770      	bx	lr

080029b6 <__sfputs_r>:
 80029b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b8:	4606      	mov	r6, r0
 80029ba:	460f      	mov	r7, r1
 80029bc:	4614      	mov	r4, r2
 80029be:	18d5      	adds	r5, r2, r3
 80029c0:	42ac      	cmp	r4, r5
 80029c2:	d101      	bne.n	80029c8 <__sfputs_r+0x12>
 80029c4:	2000      	movs	r0, #0
 80029c6:	e007      	b.n	80029d8 <__sfputs_r+0x22>
 80029c8:	463a      	mov	r2, r7
 80029ca:	4630      	mov	r0, r6
 80029cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029d0:	f7ff ffdc 	bl	800298c <__sfputc_r>
 80029d4:	1c43      	adds	r3, r0, #1
 80029d6:	d1f3      	bne.n	80029c0 <__sfputs_r+0xa>
 80029d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029dc <_vfiprintf_r>:
 80029dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e0:	460d      	mov	r5, r1
 80029e2:	4614      	mov	r4, r2
 80029e4:	4698      	mov	r8, r3
 80029e6:	4606      	mov	r6, r0
 80029e8:	b09d      	sub	sp, #116	@ 0x74
 80029ea:	b118      	cbz	r0, 80029f4 <_vfiprintf_r+0x18>
 80029ec:	6a03      	ldr	r3, [r0, #32]
 80029ee:	b90b      	cbnz	r3, 80029f4 <_vfiprintf_r+0x18>
 80029f0:	f7ff fcd4 	bl	800239c <__sinit>
 80029f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80029f6:	07d9      	lsls	r1, r3, #31
 80029f8:	d405      	bmi.n	8002a06 <_vfiprintf_r+0x2a>
 80029fa:	89ab      	ldrh	r3, [r5, #12]
 80029fc:	059a      	lsls	r2, r3, #22
 80029fe:	d402      	bmi.n	8002a06 <_vfiprintf_r+0x2a>
 8002a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a02:	f7ff feca 	bl	800279a <__retarget_lock_acquire_recursive>
 8002a06:	89ab      	ldrh	r3, [r5, #12]
 8002a08:	071b      	lsls	r3, r3, #28
 8002a0a:	d501      	bpl.n	8002a10 <_vfiprintf_r+0x34>
 8002a0c:	692b      	ldr	r3, [r5, #16]
 8002a0e:	b99b      	cbnz	r3, 8002a38 <_vfiprintf_r+0x5c>
 8002a10:	4629      	mov	r1, r5
 8002a12:	4630      	mov	r0, r6
 8002a14:	f7ff fdf2 	bl	80025fc <__swsetup_r>
 8002a18:	b170      	cbz	r0, 8002a38 <_vfiprintf_r+0x5c>
 8002a1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a1c:	07dc      	lsls	r4, r3, #31
 8002a1e:	d504      	bpl.n	8002a2a <_vfiprintf_r+0x4e>
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	b01d      	add	sp, #116	@ 0x74
 8002a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a2a:	89ab      	ldrh	r3, [r5, #12]
 8002a2c:	0598      	lsls	r0, r3, #22
 8002a2e:	d4f7      	bmi.n	8002a20 <_vfiprintf_r+0x44>
 8002a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a32:	f7ff feb3 	bl	800279c <__retarget_lock_release_recursive>
 8002a36:	e7f3      	b.n	8002a20 <_vfiprintf_r+0x44>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a42:	2330      	movs	r3, #48	@ 0x30
 8002a44:	f04f 0901 	mov.w	r9, #1
 8002a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a4c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002bf8 <_vfiprintf_r+0x21c>
 8002a50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a54:	4623      	mov	r3, r4
 8002a56:	469a      	mov	sl, r3
 8002a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a5c:	b10a      	cbz	r2, 8002a62 <_vfiprintf_r+0x86>
 8002a5e:	2a25      	cmp	r2, #37	@ 0x25
 8002a60:	d1f9      	bne.n	8002a56 <_vfiprintf_r+0x7a>
 8002a62:	ebba 0b04 	subs.w	fp, sl, r4
 8002a66:	d00b      	beq.n	8002a80 <_vfiprintf_r+0xa4>
 8002a68:	465b      	mov	r3, fp
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	4630      	mov	r0, r6
 8002a70:	f7ff ffa1 	bl	80029b6 <__sfputs_r>
 8002a74:	3001      	adds	r0, #1
 8002a76:	f000 80a7 	beq.w	8002bc8 <_vfiprintf_r+0x1ec>
 8002a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a7c:	445a      	add	r2, fp
 8002a7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a80:	f89a 3000 	ldrb.w	r3, [sl]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 809f 	beq.w	8002bc8 <_vfiprintf_r+0x1ec>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a94:	f10a 0a01 	add.w	sl, sl, #1
 8002a98:	9304      	str	r3, [sp, #16]
 8002a9a:	9307      	str	r3, [sp, #28]
 8002a9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002aa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8002aa2:	4654      	mov	r4, sl
 8002aa4:	2205      	movs	r2, #5
 8002aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aaa:	4853      	ldr	r0, [pc, #332]	@ (8002bf8 <_vfiprintf_r+0x21c>)
 8002aac:	f000 fbb0 	bl	8003210 <memchr>
 8002ab0:	9a04      	ldr	r2, [sp, #16]
 8002ab2:	b9d8      	cbnz	r0, 8002aec <_vfiprintf_r+0x110>
 8002ab4:	06d1      	lsls	r1, r2, #27
 8002ab6:	bf44      	itt	mi
 8002ab8:	2320      	movmi	r3, #32
 8002aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002abe:	0713      	lsls	r3, r2, #28
 8002ac0:	bf44      	itt	mi
 8002ac2:	232b      	movmi	r3, #43	@ 0x2b
 8002ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8002acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ace:	d015      	beq.n	8002afc <_vfiprintf_r+0x120>
 8002ad0:	4654      	mov	r4, sl
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f04f 0c0a 	mov.w	ip, #10
 8002ad8:	9a07      	ldr	r2, [sp, #28]
 8002ada:	4621      	mov	r1, r4
 8002adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ae0:	3b30      	subs	r3, #48	@ 0x30
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	d94b      	bls.n	8002b7e <_vfiprintf_r+0x1a2>
 8002ae6:	b1b0      	cbz	r0, 8002b16 <_vfiprintf_r+0x13a>
 8002ae8:	9207      	str	r2, [sp, #28]
 8002aea:	e014      	b.n	8002b16 <_vfiprintf_r+0x13a>
 8002aec:	eba0 0308 	sub.w	r3, r0, r8
 8002af0:	fa09 f303 	lsl.w	r3, r9, r3
 8002af4:	4313      	orrs	r3, r2
 8002af6:	46a2      	mov	sl, r4
 8002af8:	9304      	str	r3, [sp, #16]
 8002afa:	e7d2      	b.n	8002aa2 <_vfiprintf_r+0xc6>
 8002afc:	9b03      	ldr	r3, [sp, #12]
 8002afe:	1d19      	adds	r1, r3, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	9103      	str	r1, [sp, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bfbb      	ittet	lt
 8002b08:	425b      	neglt	r3, r3
 8002b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8002b0e:	9307      	strge	r3, [sp, #28]
 8002b10:	9307      	strlt	r3, [sp, #28]
 8002b12:	bfb8      	it	lt
 8002b14:	9204      	strlt	r2, [sp, #16]
 8002b16:	7823      	ldrb	r3, [r4, #0]
 8002b18:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b1a:	d10a      	bne.n	8002b32 <_vfiprintf_r+0x156>
 8002b1c:	7863      	ldrb	r3, [r4, #1]
 8002b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b20:	d132      	bne.n	8002b88 <_vfiprintf_r+0x1ac>
 8002b22:	9b03      	ldr	r3, [sp, #12]
 8002b24:	3402      	adds	r4, #2
 8002b26:	1d1a      	adds	r2, r3, #4
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	9203      	str	r2, [sp, #12]
 8002b2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b30:	9305      	str	r3, [sp, #20]
 8002b32:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002bfc <_vfiprintf_r+0x220>
 8002b36:	2203      	movs	r2, #3
 8002b38:	4650      	mov	r0, sl
 8002b3a:	7821      	ldrb	r1, [r4, #0]
 8002b3c:	f000 fb68 	bl	8003210 <memchr>
 8002b40:	b138      	cbz	r0, 8002b52 <_vfiprintf_r+0x176>
 8002b42:	2240      	movs	r2, #64	@ 0x40
 8002b44:	9b04      	ldr	r3, [sp, #16]
 8002b46:	eba0 000a 	sub.w	r0, r0, sl
 8002b4a:	4082      	lsls	r2, r0
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	3401      	adds	r4, #1
 8002b50:	9304      	str	r3, [sp, #16]
 8002b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b56:	2206      	movs	r2, #6
 8002b58:	4829      	ldr	r0, [pc, #164]	@ (8002c00 <_vfiprintf_r+0x224>)
 8002b5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b5e:	f000 fb57 	bl	8003210 <memchr>
 8002b62:	2800      	cmp	r0, #0
 8002b64:	d03f      	beq.n	8002be6 <_vfiprintf_r+0x20a>
 8002b66:	4b27      	ldr	r3, [pc, #156]	@ (8002c04 <_vfiprintf_r+0x228>)
 8002b68:	bb1b      	cbnz	r3, 8002bb2 <_vfiprintf_r+0x1d6>
 8002b6a:	9b03      	ldr	r3, [sp, #12]
 8002b6c:	3307      	adds	r3, #7
 8002b6e:	f023 0307 	bic.w	r3, r3, #7
 8002b72:	3308      	adds	r3, #8
 8002b74:	9303      	str	r3, [sp, #12]
 8002b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b78:	443b      	add	r3, r7
 8002b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b7c:	e76a      	b.n	8002a54 <_vfiprintf_r+0x78>
 8002b7e:	460c      	mov	r4, r1
 8002b80:	2001      	movs	r0, #1
 8002b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b86:	e7a8      	b.n	8002ada <_vfiprintf_r+0xfe>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f04f 0c0a 	mov.w	ip, #10
 8002b8e:	4619      	mov	r1, r3
 8002b90:	3401      	adds	r4, #1
 8002b92:	9305      	str	r3, [sp, #20]
 8002b94:	4620      	mov	r0, r4
 8002b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b9a:	3a30      	subs	r2, #48	@ 0x30
 8002b9c:	2a09      	cmp	r2, #9
 8002b9e:	d903      	bls.n	8002ba8 <_vfiprintf_r+0x1cc>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0c6      	beq.n	8002b32 <_vfiprintf_r+0x156>
 8002ba4:	9105      	str	r1, [sp, #20]
 8002ba6:	e7c4      	b.n	8002b32 <_vfiprintf_r+0x156>
 8002ba8:	4604      	mov	r4, r0
 8002baa:	2301      	movs	r3, #1
 8002bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bb0:	e7f0      	b.n	8002b94 <_vfiprintf_r+0x1b8>
 8002bb2:	ab03      	add	r3, sp, #12
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	462a      	mov	r2, r5
 8002bb8:	4630      	mov	r0, r6
 8002bba:	4b13      	ldr	r3, [pc, #76]	@ (8002c08 <_vfiprintf_r+0x22c>)
 8002bbc:	a904      	add	r1, sp, #16
 8002bbe:	f3af 8000 	nop.w
 8002bc2:	4607      	mov	r7, r0
 8002bc4:	1c78      	adds	r0, r7, #1
 8002bc6:	d1d6      	bne.n	8002b76 <_vfiprintf_r+0x19a>
 8002bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002bca:	07d9      	lsls	r1, r3, #31
 8002bcc:	d405      	bmi.n	8002bda <_vfiprintf_r+0x1fe>
 8002bce:	89ab      	ldrh	r3, [r5, #12]
 8002bd0:	059a      	lsls	r2, r3, #22
 8002bd2:	d402      	bmi.n	8002bda <_vfiprintf_r+0x1fe>
 8002bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002bd6:	f7ff fde1 	bl	800279c <__retarget_lock_release_recursive>
 8002bda:	89ab      	ldrh	r3, [r5, #12]
 8002bdc:	065b      	lsls	r3, r3, #25
 8002bde:	f53f af1f 	bmi.w	8002a20 <_vfiprintf_r+0x44>
 8002be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002be4:	e71e      	b.n	8002a24 <_vfiprintf_r+0x48>
 8002be6:	ab03      	add	r3, sp, #12
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	462a      	mov	r2, r5
 8002bec:	4630      	mov	r0, r6
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <_vfiprintf_r+0x22c>)
 8002bf0:	a904      	add	r1, sp, #16
 8002bf2:	f000 f87d 	bl	8002cf0 <_printf_i>
 8002bf6:	e7e4      	b.n	8002bc2 <_vfiprintf_r+0x1e6>
 8002bf8:	0800338a 	.word	0x0800338a
 8002bfc:	08003390 	.word	0x08003390
 8002c00:	08003394 	.word	0x08003394
 8002c04:	00000000 	.word	0x00000000
 8002c08:	080029b7 	.word	0x080029b7

08002c0c <_printf_common>:
 8002c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c10:	4616      	mov	r6, r2
 8002c12:	4698      	mov	r8, r3
 8002c14:	688a      	ldr	r2, [r1, #8]
 8002c16:	690b      	ldr	r3, [r1, #16]
 8002c18:	4607      	mov	r7, r0
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	bfb8      	it	lt
 8002c1e:	4613      	movlt	r3, r2
 8002c20:	6033      	str	r3, [r6, #0]
 8002c22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c26:	460c      	mov	r4, r1
 8002c28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c2c:	b10a      	cbz	r2, 8002c32 <_printf_common+0x26>
 8002c2e:	3301      	adds	r3, #1
 8002c30:	6033      	str	r3, [r6, #0]
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	0699      	lsls	r1, r3, #26
 8002c36:	bf42      	ittt	mi
 8002c38:	6833      	ldrmi	r3, [r6, #0]
 8002c3a:	3302      	addmi	r3, #2
 8002c3c:	6033      	strmi	r3, [r6, #0]
 8002c3e:	6825      	ldr	r5, [r4, #0]
 8002c40:	f015 0506 	ands.w	r5, r5, #6
 8002c44:	d106      	bne.n	8002c54 <_printf_common+0x48>
 8002c46:	f104 0a19 	add.w	sl, r4, #25
 8002c4a:	68e3      	ldr	r3, [r4, #12]
 8002c4c:	6832      	ldr	r2, [r6, #0]
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	42ab      	cmp	r3, r5
 8002c52:	dc2b      	bgt.n	8002cac <_printf_common+0xa0>
 8002c54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c58:	6822      	ldr	r2, [r4, #0]
 8002c5a:	3b00      	subs	r3, #0
 8002c5c:	bf18      	it	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	0692      	lsls	r2, r2, #26
 8002c62:	d430      	bmi.n	8002cc6 <_printf_common+0xba>
 8002c64:	4641      	mov	r1, r8
 8002c66:	4638      	mov	r0, r7
 8002c68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c6c:	47c8      	blx	r9
 8002c6e:	3001      	adds	r0, #1
 8002c70:	d023      	beq.n	8002cba <_printf_common+0xae>
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	6922      	ldr	r2, [r4, #16]
 8002c76:	f003 0306 	and.w	r3, r3, #6
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	bf14      	ite	ne
 8002c7e:	2500      	movne	r5, #0
 8002c80:	6833      	ldreq	r3, [r6, #0]
 8002c82:	f04f 0600 	mov.w	r6, #0
 8002c86:	bf08      	it	eq
 8002c88:	68e5      	ldreq	r5, [r4, #12]
 8002c8a:	f104 041a 	add.w	r4, r4, #26
 8002c8e:	bf08      	it	eq
 8002c90:	1aed      	subeq	r5, r5, r3
 8002c92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c96:	bf08      	it	eq
 8002c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	bfc4      	itt	gt
 8002ca0:	1a9b      	subgt	r3, r3, r2
 8002ca2:	18ed      	addgt	r5, r5, r3
 8002ca4:	42b5      	cmp	r5, r6
 8002ca6:	d11a      	bne.n	8002cde <_printf_common+0xd2>
 8002ca8:	2000      	movs	r0, #0
 8002caa:	e008      	b.n	8002cbe <_printf_common+0xb2>
 8002cac:	2301      	movs	r3, #1
 8002cae:	4652      	mov	r2, sl
 8002cb0:	4641      	mov	r1, r8
 8002cb2:	4638      	mov	r0, r7
 8002cb4:	47c8      	blx	r9
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	d103      	bne.n	8002cc2 <_printf_common+0xb6>
 8002cba:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc2:	3501      	adds	r5, #1
 8002cc4:	e7c1      	b.n	8002c4a <_printf_common+0x3e>
 8002cc6:	2030      	movs	r0, #48	@ 0x30
 8002cc8:	18e1      	adds	r1, r4, r3
 8002cca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002cd4:	4422      	add	r2, r4
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002cdc:	e7c2      	b.n	8002c64 <_printf_common+0x58>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	4622      	mov	r2, r4
 8002ce2:	4641      	mov	r1, r8
 8002ce4:	4638      	mov	r0, r7
 8002ce6:	47c8      	blx	r9
 8002ce8:	3001      	adds	r0, #1
 8002cea:	d0e6      	beq.n	8002cba <_printf_common+0xae>
 8002cec:	3601      	adds	r6, #1
 8002cee:	e7d9      	b.n	8002ca4 <_printf_common+0x98>

08002cf0 <_printf_i>:
 8002cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cf4:	7e0f      	ldrb	r7, [r1, #24]
 8002cf6:	4691      	mov	r9, r2
 8002cf8:	2f78      	cmp	r7, #120	@ 0x78
 8002cfa:	4680      	mov	r8, r0
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	469a      	mov	sl, r3
 8002d00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002d02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002d06:	d807      	bhi.n	8002d18 <_printf_i+0x28>
 8002d08:	2f62      	cmp	r7, #98	@ 0x62
 8002d0a:	d80a      	bhi.n	8002d22 <_printf_i+0x32>
 8002d0c:	2f00      	cmp	r7, #0
 8002d0e:	f000 80d3 	beq.w	8002eb8 <_printf_i+0x1c8>
 8002d12:	2f58      	cmp	r7, #88	@ 0x58
 8002d14:	f000 80ba 	beq.w	8002e8c <_printf_i+0x19c>
 8002d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d20:	e03a      	b.n	8002d98 <_printf_i+0xa8>
 8002d22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d26:	2b15      	cmp	r3, #21
 8002d28:	d8f6      	bhi.n	8002d18 <_printf_i+0x28>
 8002d2a:	a101      	add	r1, pc, #4	@ (adr r1, 8002d30 <_printf_i+0x40>)
 8002d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d30:	08002d89 	.word	0x08002d89
 8002d34:	08002d9d 	.word	0x08002d9d
 8002d38:	08002d19 	.word	0x08002d19
 8002d3c:	08002d19 	.word	0x08002d19
 8002d40:	08002d19 	.word	0x08002d19
 8002d44:	08002d19 	.word	0x08002d19
 8002d48:	08002d9d 	.word	0x08002d9d
 8002d4c:	08002d19 	.word	0x08002d19
 8002d50:	08002d19 	.word	0x08002d19
 8002d54:	08002d19 	.word	0x08002d19
 8002d58:	08002d19 	.word	0x08002d19
 8002d5c:	08002e9f 	.word	0x08002e9f
 8002d60:	08002dc7 	.word	0x08002dc7
 8002d64:	08002e59 	.word	0x08002e59
 8002d68:	08002d19 	.word	0x08002d19
 8002d6c:	08002d19 	.word	0x08002d19
 8002d70:	08002ec1 	.word	0x08002ec1
 8002d74:	08002d19 	.word	0x08002d19
 8002d78:	08002dc7 	.word	0x08002dc7
 8002d7c:	08002d19 	.word	0x08002d19
 8002d80:	08002d19 	.word	0x08002d19
 8002d84:	08002e61 	.word	0x08002e61
 8002d88:	6833      	ldr	r3, [r6, #0]
 8002d8a:	1d1a      	adds	r2, r3, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6032      	str	r2, [r6, #0]
 8002d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e09e      	b.n	8002eda <_printf_i+0x1ea>
 8002d9c:	6833      	ldr	r3, [r6, #0]
 8002d9e:	6820      	ldr	r0, [r4, #0]
 8002da0:	1d19      	adds	r1, r3, #4
 8002da2:	6031      	str	r1, [r6, #0]
 8002da4:	0606      	lsls	r6, r0, #24
 8002da6:	d501      	bpl.n	8002dac <_printf_i+0xbc>
 8002da8:	681d      	ldr	r5, [r3, #0]
 8002daa:	e003      	b.n	8002db4 <_printf_i+0xc4>
 8002dac:	0645      	lsls	r5, r0, #25
 8002dae:	d5fb      	bpl.n	8002da8 <_printf_i+0xb8>
 8002db0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002db4:	2d00      	cmp	r5, #0
 8002db6:	da03      	bge.n	8002dc0 <_printf_i+0xd0>
 8002db8:	232d      	movs	r3, #45	@ 0x2d
 8002dba:	426d      	negs	r5, r5
 8002dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002dc0:	230a      	movs	r3, #10
 8002dc2:	4859      	ldr	r0, [pc, #356]	@ (8002f28 <_printf_i+0x238>)
 8002dc4:	e011      	b.n	8002dea <_printf_i+0xfa>
 8002dc6:	6821      	ldr	r1, [r4, #0]
 8002dc8:	6833      	ldr	r3, [r6, #0]
 8002dca:	0608      	lsls	r0, r1, #24
 8002dcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8002dd0:	d402      	bmi.n	8002dd8 <_printf_i+0xe8>
 8002dd2:	0649      	lsls	r1, r1, #25
 8002dd4:	bf48      	it	mi
 8002dd6:	b2ad      	uxthmi	r5, r5
 8002dd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8002dda:	6033      	str	r3, [r6, #0]
 8002ddc:	bf14      	ite	ne
 8002dde:	230a      	movne	r3, #10
 8002de0:	2308      	moveq	r3, #8
 8002de2:	4851      	ldr	r0, [pc, #324]	@ (8002f28 <_printf_i+0x238>)
 8002de4:	2100      	movs	r1, #0
 8002de6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002dea:	6866      	ldr	r6, [r4, #4]
 8002dec:	2e00      	cmp	r6, #0
 8002dee:	bfa8      	it	ge
 8002df0:	6821      	ldrge	r1, [r4, #0]
 8002df2:	60a6      	str	r6, [r4, #8]
 8002df4:	bfa4      	itt	ge
 8002df6:	f021 0104 	bicge.w	r1, r1, #4
 8002dfa:	6021      	strge	r1, [r4, #0]
 8002dfc:	b90d      	cbnz	r5, 8002e02 <_printf_i+0x112>
 8002dfe:	2e00      	cmp	r6, #0
 8002e00:	d04b      	beq.n	8002e9a <_printf_i+0x1aa>
 8002e02:	4616      	mov	r6, r2
 8002e04:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e08:	fb03 5711 	mls	r7, r3, r1, r5
 8002e0c:	5dc7      	ldrb	r7, [r0, r7]
 8002e0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e12:	462f      	mov	r7, r5
 8002e14:	42bb      	cmp	r3, r7
 8002e16:	460d      	mov	r5, r1
 8002e18:	d9f4      	bls.n	8002e04 <_printf_i+0x114>
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d10b      	bne.n	8002e36 <_printf_i+0x146>
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	07df      	lsls	r7, r3, #31
 8002e22:	d508      	bpl.n	8002e36 <_printf_i+0x146>
 8002e24:	6923      	ldr	r3, [r4, #16]
 8002e26:	6861      	ldr	r1, [r4, #4]
 8002e28:	4299      	cmp	r1, r3
 8002e2a:	bfde      	ittt	le
 8002e2c:	2330      	movle	r3, #48	@ 0x30
 8002e2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e36:	1b92      	subs	r2, r2, r6
 8002e38:	6122      	str	r2, [r4, #16]
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	4640      	mov	r0, r8
 8002e40:	f8cd a000 	str.w	sl, [sp]
 8002e44:	aa03      	add	r2, sp, #12
 8002e46:	f7ff fee1 	bl	8002c0c <_printf_common>
 8002e4a:	3001      	adds	r0, #1
 8002e4c:	d14a      	bne.n	8002ee4 <_printf_i+0x1f4>
 8002e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e52:	b004      	add	sp, #16
 8002e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	f043 0320 	orr.w	r3, r3, #32
 8002e5e:	6023      	str	r3, [r4, #0]
 8002e60:	2778      	movs	r7, #120	@ 0x78
 8002e62:	4832      	ldr	r0, [pc, #200]	@ (8002f2c <_printf_i+0x23c>)
 8002e64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	6831      	ldr	r1, [r6, #0]
 8002e6c:	061f      	lsls	r7, r3, #24
 8002e6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e72:	d402      	bmi.n	8002e7a <_printf_i+0x18a>
 8002e74:	065f      	lsls	r7, r3, #25
 8002e76:	bf48      	it	mi
 8002e78:	b2ad      	uxthmi	r5, r5
 8002e7a:	6031      	str	r1, [r6, #0]
 8002e7c:	07d9      	lsls	r1, r3, #31
 8002e7e:	bf44      	itt	mi
 8002e80:	f043 0320 	orrmi.w	r3, r3, #32
 8002e84:	6023      	strmi	r3, [r4, #0]
 8002e86:	b11d      	cbz	r5, 8002e90 <_printf_i+0x1a0>
 8002e88:	2310      	movs	r3, #16
 8002e8a:	e7ab      	b.n	8002de4 <_printf_i+0xf4>
 8002e8c:	4826      	ldr	r0, [pc, #152]	@ (8002f28 <_printf_i+0x238>)
 8002e8e:	e7e9      	b.n	8002e64 <_printf_i+0x174>
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	f023 0320 	bic.w	r3, r3, #32
 8002e96:	6023      	str	r3, [r4, #0]
 8002e98:	e7f6      	b.n	8002e88 <_printf_i+0x198>
 8002e9a:	4616      	mov	r6, r2
 8002e9c:	e7bd      	b.n	8002e1a <_printf_i+0x12a>
 8002e9e:	6833      	ldr	r3, [r6, #0]
 8002ea0:	6825      	ldr	r5, [r4, #0]
 8002ea2:	1d18      	adds	r0, r3, #4
 8002ea4:	6961      	ldr	r1, [r4, #20]
 8002ea6:	6030      	str	r0, [r6, #0]
 8002ea8:	062e      	lsls	r6, r5, #24
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	d501      	bpl.n	8002eb2 <_printf_i+0x1c2>
 8002eae:	6019      	str	r1, [r3, #0]
 8002eb0:	e002      	b.n	8002eb8 <_printf_i+0x1c8>
 8002eb2:	0668      	lsls	r0, r5, #25
 8002eb4:	d5fb      	bpl.n	8002eae <_printf_i+0x1be>
 8002eb6:	8019      	strh	r1, [r3, #0]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	4616      	mov	r6, r2
 8002ebc:	6123      	str	r3, [r4, #16]
 8002ebe:	e7bc      	b.n	8002e3a <_printf_i+0x14a>
 8002ec0:	6833      	ldr	r3, [r6, #0]
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	1d1a      	adds	r2, r3, #4
 8002ec6:	6032      	str	r2, [r6, #0]
 8002ec8:	681e      	ldr	r6, [r3, #0]
 8002eca:	6862      	ldr	r2, [r4, #4]
 8002ecc:	4630      	mov	r0, r6
 8002ece:	f000 f99f 	bl	8003210 <memchr>
 8002ed2:	b108      	cbz	r0, 8002ed8 <_printf_i+0x1e8>
 8002ed4:	1b80      	subs	r0, r0, r6
 8002ed6:	6060      	str	r0, [r4, #4]
 8002ed8:	6863      	ldr	r3, [r4, #4]
 8002eda:	6123      	str	r3, [r4, #16]
 8002edc:	2300      	movs	r3, #0
 8002ede:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ee2:	e7aa      	b.n	8002e3a <_printf_i+0x14a>
 8002ee4:	4632      	mov	r2, r6
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	4640      	mov	r0, r8
 8002eea:	6923      	ldr	r3, [r4, #16]
 8002eec:	47d0      	blx	sl
 8002eee:	3001      	adds	r0, #1
 8002ef0:	d0ad      	beq.n	8002e4e <_printf_i+0x15e>
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	079b      	lsls	r3, r3, #30
 8002ef6:	d413      	bmi.n	8002f20 <_printf_i+0x230>
 8002ef8:	68e0      	ldr	r0, [r4, #12]
 8002efa:	9b03      	ldr	r3, [sp, #12]
 8002efc:	4298      	cmp	r0, r3
 8002efe:	bfb8      	it	lt
 8002f00:	4618      	movlt	r0, r3
 8002f02:	e7a6      	b.n	8002e52 <_printf_i+0x162>
 8002f04:	2301      	movs	r3, #1
 8002f06:	4632      	mov	r2, r6
 8002f08:	4649      	mov	r1, r9
 8002f0a:	4640      	mov	r0, r8
 8002f0c:	47d0      	blx	sl
 8002f0e:	3001      	adds	r0, #1
 8002f10:	d09d      	beq.n	8002e4e <_printf_i+0x15e>
 8002f12:	3501      	adds	r5, #1
 8002f14:	68e3      	ldr	r3, [r4, #12]
 8002f16:	9903      	ldr	r1, [sp, #12]
 8002f18:	1a5b      	subs	r3, r3, r1
 8002f1a:	42ab      	cmp	r3, r5
 8002f1c:	dcf2      	bgt.n	8002f04 <_printf_i+0x214>
 8002f1e:	e7eb      	b.n	8002ef8 <_printf_i+0x208>
 8002f20:	2500      	movs	r5, #0
 8002f22:	f104 0619 	add.w	r6, r4, #25
 8002f26:	e7f5      	b.n	8002f14 <_printf_i+0x224>
 8002f28:	0800339b 	.word	0x0800339b
 8002f2c:	080033ac 	.word	0x080033ac

08002f30 <__sflush_r>:
 8002f30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f36:	0716      	lsls	r6, r2, #28
 8002f38:	4605      	mov	r5, r0
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	d454      	bmi.n	8002fe8 <__sflush_r+0xb8>
 8002f3e:	684b      	ldr	r3, [r1, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	dc02      	bgt.n	8002f4a <__sflush_r+0x1a>
 8002f44:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	dd48      	ble.n	8002fdc <__sflush_r+0xac>
 8002f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f4c:	2e00      	cmp	r6, #0
 8002f4e:	d045      	beq.n	8002fdc <__sflush_r+0xac>
 8002f50:	2300      	movs	r3, #0
 8002f52:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002f56:	682f      	ldr	r7, [r5, #0]
 8002f58:	6a21      	ldr	r1, [r4, #32]
 8002f5a:	602b      	str	r3, [r5, #0]
 8002f5c:	d030      	beq.n	8002fc0 <__sflush_r+0x90>
 8002f5e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f60:	89a3      	ldrh	r3, [r4, #12]
 8002f62:	0759      	lsls	r1, r3, #29
 8002f64:	d505      	bpl.n	8002f72 <__sflush_r+0x42>
 8002f66:	6863      	ldr	r3, [r4, #4]
 8002f68:	1ad2      	subs	r2, r2, r3
 8002f6a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002f6c:	b10b      	cbz	r3, 8002f72 <__sflush_r+0x42>
 8002f6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f70:	1ad2      	subs	r2, r2, r3
 8002f72:	2300      	movs	r3, #0
 8002f74:	4628      	mov	r0, r5
 8002f76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f78:	6a21      	ldr	r1, [r4, #32]
 8002f7a:	47b0      	blx	r6
 8002f7c:	1c43      	adds	r3, r0, #1
 8002f7e:	89a3      	ldrh	r3, [r4, #12]
 8002f80:	d106      	bne.n	8002f90 <__sflush_r+0x60>
 8002f82:	6829      	ldr	r1, [r5, #0]
 8002f84:	291d      	cmp	r1, #29
 8002f86:	d82b      	bhi.n	8002fe0 <__sflush_r+0xb0>
 8002f88:	4a28      	ldr	r2, [pc, #160]	@ (800302c <__sflush_r+0xfc>)
 8002f8a:	410a      	asrs	r2, r1
 8002f8c:	07d6      	lsls	r6, r2, #31
 8002f8e:	d427      	bmi.n	8002fe0 <__sflush_r+0xb0>
 8002f90:	2200      	movs	r2, #0
 8002f92:	6062      	str	r2, [r4, #4]
 8002f94:	6922      	ldr	r2, [r4, #16]
 8002f96:	04d9      	lsls	r1, r3, #19
 8002f98:	6022      	str	r2, [r4, #0]
 8002f9a:	d504      	bpl.n	8002fa6 <__sflush_r+0x76>
 8002f9c:	1c42      	adds	r2, r0, #1
 8002f9e:	d101      	bne.n	8002fa4 <__sflush_r+0x74>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	b903      	cbnz	r3, 8002fa6 <__sflush_r+0x76>
 8002fa4:	6560      	str	r0, [r4, #84]	@ 0x54
 8002fa6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fa8:	602f      	str	r7, [r5, #0]
 8002faa:	b1b9      	cbz	r1, 8002fdc <__sflush_r+0xac>
 8002fac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fb0:	4299      	cmp	r1, r3
 8002fb2:	d002      	beq.n	8002fba <__sflush_r+0x8a>
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f7ff fbf3 	bl	80027a0 <_free_r>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fbe:	e00d      	b.n	8002fdc <__sflush_r+0xac>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	47b0      	blx	r6
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	1c50      	adds	r0, r2, #1
 8002fca:	d1c9      	bne.n	8002f60 <__sflush_r+0x30>
 8002fcc:	682b      	ldr	r3, [r5, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0c6      	beq.n	8002f60 <__sflush_r+0x30>
 8002fd2:	2b1d      	cmp	r3, #29
 8002fd4:	d001      	beq.n	8002fda <__sflush_r+0xaa>
 8002fd6:	2b16      	cmp	r3, #22
 8002fd8:	d11d      	bne.n	8003016 <__sflush_r+0xe6>
 8002fda:	602f      	str	r7, [r5, #0]
 8002fdc:	2000      	movs	r0, #0
 8002fde:	e021      	b.n	8003024 <__sflush_r+0xf4>
 8002fe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe4:	b21b      	sxth	r3, r3
 8002fe6:	e01a      	b.n	800301e <__sflush_r+0xee>
 8002fe8:	690f      	ldr	r7, [r1, #16]
 8002fea:	2f00      	cmp	r7, #0
 8002fec:	d0f6      	beq.n	8002fdc <__sflush_r+0xac>
 8002fee:	0793      	lsls	r3, r2, #30
 8002ff0:	bf18      	it	ne
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	680e      	ldr	r6, [r1, #0]
 8002ff6:	bf08      	it	eq
 8002ff8:	694b      	ldreq	r3, [r1, #20]
 8002ffa:	1bf6      	subs	r6, r6, r7
 8002ffc:	600f      	str	r7, [r1, #0]
 8002ffe:	608b      	str	r3, [r1, #8]
 8003000:	2e00      	cmp	r6, #0
 8003002:	ddeb      	ble.n	8002fdc <__sflush_r+0xac>
 8003004:	4633      	mov	r3, r6
 8003006:	463a      	mov	r2, r7
 8003008:	4628      	mov	r0, r5
 800300a:	6a21      	ldr	r1, [r4, #32]
 800300c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003010:	47e0      	blx	ip
 8003012:	2800      	cmp	r0, #0
 8003014:	dc07      	bgt.n	8003026 <__sflush_r+0xf6>
 8003016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800301a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800301e:	f04f 30ff 	mov.w	r0, #4294967295
 8003022:	81a3      	strh	r3, [r4, #12]
 8003024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003026:	4407      	add	r7, r0
 8003028:	1a36      	subs	r6, r6, r0
 800302a:	e7e9      	b.n	8003000 <__sflush_r+0xd0>
 800302c:	dfbffffe 	.word	0xdfbffffe

08003030 <_fflush_r>:
 8003030:	b538      	push	{r3, r4, r5, lr}
 8003032:	690b      	ldr	r3, [r1, #16]
 8003034:	4605      	mov	r5, r0
 8003036:	460c      	mov	r4, r1
 8003038:	b913      	cbnz	r3, 8003040 <_fflush_r+0x10>
 800303a:	2500      	movs	r5, #0
 800303c:	4628      	mov	r0, r5
 800303e:	bd38      	pop	{r3, r4, r5, pc}
 8003040:	b118      	cbz	r0, 800304a <_fflush_r+0x1a>
 8003042:	6a03      	ldr	r3, [r0, #32]
 8003044:	b90b      	cbnz	r3, 800304a <_fflush_r+0x1a>
 8003046:	f7ff f9a9 	bl	800239c <__sinit>
 800304a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f3      	beq.n	800303a <_fflush_r+0xa>
 8003052:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003054:	07d0      	lsls	r0, r2, #31
 8003056:	d404      	bmi.n	8003062 <_fflush_r+0x32>
 8003058:	0599      	lsls	r1, r3, #22
 800305a:	d402      	bmi.n	8003062 <_fflush_r+0x32>
 800305c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800305e:	f7ff fb9c 	bl	800279a <__retarget_lock_acquire_recursive>
 8003062:	4628      	mov	r0, r5
 8003064:	4621      	mov	r1, r4
 8003066:	f7ff ff63 	bl	8002f30 <__sflush_r>
 800306a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800306c:	4605      	mov	r5, r0
 800306e:	07da      	lsls	r2, r3, #31
 8003070:	d4e4      	bmi.n	800303c <_fflush_r+0xc>
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	059b      	lsls	r3, r3, #22
 8003076:	d4e1      	bmi.n	800303c <_fflush_r+0xc>
 8003078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800307a:	f7ff fb8f 	bl	800279c <__retarget_lock_release_recursive>
 800307e:	e7dd      	b.n	800303c <_fflush_r+0xc>

08003080 <__swhatbuf_r>:
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	460c      	mov	r4, r1
 8003084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003088:	4615      	mov	r5, r2
 800308a:	2900      	cmp	r1, #0
 800308c:	461e      	mov	r6, r3
 800308e:	b096      	sub	sp, #88	@ 0x58
 8003090:	da0c      	bge.n	80030ac <__swhatbuf_r+0x2c>
 8003092:	89a3      	ldrh	r3, [r4, #12]
 8003094:	2100      	movs	r1, #0
 8003096:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800309a:	bf14      	ite	ne
 800309c:	2340      	movne	r3, #64	@ 0x40
 800309e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80030a2:	2000      	movs	r0, #0
 80030a4:	6031      	str	r1, [r6, #0]
 80030a6:	602b      	str	r3, [r5, #0]
 80030a8:	b016      	add	sp, #88	@ 0x58
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
 80030ac:	466a      	mov	r2, sp
 80030ae:	f000 f87d 	bl	80031ac <_fstat_r>
 80030b2:	2800      	cmp	r0, #0
 80030b4:	dbed      	blt.n	8003092 <__swhatbuf_r+0x12>
 80030b6:	9901      	ldr	r1, [sp, #4]
 80030b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80030bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80030c0:	4259      	negs	r1, r3
 80030c2:	4159      	adcs	r1, r3
 80030c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030c8:	e7eb      	b.n	80030a2 <__swhatbuf_r+0x22>

080030ca <__smakebuf_r>:
 80030ca:	898b      	ldrh	r3, [r1, #12]
 80030cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030ce:	079d      	lsls	r5, r3, #30
 80030d0:	4606      	mov	r6, r0
 80030d2:	460c      	mov	r4, r1
 80030d4:	d507      	bpl.n	80030e6 <__smakebuf_r+0x1c>
 80030d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80030da:	6023      	str	r3, [r4, #0]
 80030dc:	6123      	str	r3, [r4, #16]
 80030de:	2301      	movs	r3, #1
 80030e0:	6163      	str	r3, [r4, #20]
 80030e2:	b003      	add	sp, #12
 80030e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e6:	466a      	mov	r2, sp
 80030e8:	ab01      	add	r3, sp, #4
 80030ea:	f7ff ffc9 	bl	8003080 <__swhatbuf_r>
 80030ee:	9f00      	ldr	r7, [sp, #0]
 80030f0:	4605      	mov	r5, r0
 80030f2:	4639      	mov	r1, r7
 80030f4:	4630      	mov	r0, r6
 80030f6:	f7ff fbbd 	bl	8002874 <_malloc_r>
 80030fa:	b948      	cbnz	r0, 8003110 <__smakebuf_r+0x46>
 80030fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003100:	059a      	lsls	r2, r3, #22
 8003102:	d4ee      	bmi.n	80030e2 <__smakebuf_r+0x18>
 8003104:	f023 0303 	bic.w	r3, r3, #3
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	81a3      	strh	r3, [r4, #12]
 800310e:	e7e2      	b.n	80030d6 <__smakebuf_r+0xc>
 8003110:	89a3      	ldrh	r3, [r4, #12]
 8003112:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800311a:	81a3      	strh	r3, [r4, #12]
 800311c:	9b01      	ldr	r3, [sp, #4]
 800311e:	6020      	str	r0, [r4, #0]
 8003120:	b15b      	cbz	r3, 800313a <__smakebuf_r+0x70>
 8003122:	4630      	mov	r0, r6
 8003124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003128:	f000 f852 	bl	80031d0 <_isatty_r>
 800312c:	b128      	cbz	r0, 800313a <__smakebuf_r+0x70>
 800312e:	89a3      	ldrh	r3, [r4, #12]
 8003130:	f023 0303 	bic.w	r3, r3, #3
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	81a3      	strh	r3, [r4, #12]
 800313a:	89a3      	ldrh	r3, [r4, #12]
 800313c:	431d      	orrs	r5, r3
 800313e:	81a5      	strh	r5, [r4, #12]
 8003140:	e7cf      	b.n	80030e2 <__smakebuf_r+0x18>

08003142 <_putc_r>:
 8003142:	b570      	push	{r4, r5, r6, lr}
 8003144:	460d      	mov	r5, r1
 8003146:	4614      	mov	r4, r2
 8003148:	4606      	mov	r6, r0
 800314a:	b118      	cbz	r0, 8003154 <_putc_r+0x12>
 800314c:	6a03      	ldr	r3, [r0, #32]
 800314e:	b90b      	cbnz	r3, 8003154 <_putc_r+0x12>
 8003150:	f7ff f924 	bl	800239c <__sinit>
 8003154:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003156:	07d8      	lsls	r0, r3, #31
 8003158:	d405      	bmi.n	8003166 <_putc_r+0x24>
 800315a:	89a3      	ldrh	r3, [r4, #12]
 800315c:	0599      	lsls	r1, r3, #22
 800315e:	d402      	bmi.n	8003166 <_putc_r+0x24>
 8003160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003162:	f7ff fb1a 	bl	800279a <__retarget_lock_acquire_recursive>
 8003166:	68a3      	ldr	r3, [r4, #8]
 8003168:	3b01      	subs	r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	60a3      	str	r3, [r4, #8]
 800316e:	da05      	bge.n	800317c <_putc_r+0x3a>
 8003170:	69a2      	ldr	r2, [r4, #24]
 8003172:	4293      	cmp	r3, r2
 8003174:	db12      	blt.n	800319c <_putc_r+0x5a>
 8003176:	b2eb      	uxtb	r3, r5
 8003178:	2b0a      	cmp	r3, #10
 800317a:	d00f      	beq.n	800319c <_putc_r+0x5a>
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	6022      	str	r2, [r4, #0]
 8003182:	701d      	strb	r5, [r3, #0]
 8003184:	b2ed      	uxtb	r5, r5
 8003186:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003188:	07da      	lsls	r2, r3, #31
 800318a:	d405      	bmi.n	8003198 <_putc_r+0x56>
 800318c:	89a3      	ldrh	r3, [r4, #12]
 800318e:	059b      	lsls	r3, r3, #22
 8003190:	d402      	bmi.n	8003198 <_putc_r+0x56>
 8003192:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003194:	f7ff fb02 	bl	800279c <__retarget_lock_release_recursive>
 8003198:	4628      	mov	r0, r5
 800319a:	bd70      	pop	{r4, r5, r6, pc}
 800319c:	4629      	mov	r1, r5
 800319e:	4622      	mov	r2, r4
 80031a0:	4630      	mov	r0, r6
 80031a2:	f7ff f9ec 	bl	800257e <__swbuf_r>
 80031a6:	4605      	mov	r5, r0
 80031a8:	e7ed      	b.n	8003186 <_putc_r+0x44>
	...

080031ac <_fstat_r>:
 80031ac:	b538      	push	{r3, r4, r5, lr}
 80031ae:	2300      	movs	r3, #0
 80031b0:	4d06      	ldr	r5, [pc, #24]	@ (80031cc <_fstat_r+0x20>)
 80031b2:	4604      	mov	r4, r0
 80031b4:	4608      	mov	r0, r1
 80031b6:	4611      	mov	r1, r2
 80031b8:	602b      	str	r3, [r5, #0]
 80031ba:	f7fd faa5 	bl	8000708 <_fstat>
 80031be:	1c43      	adds	r3, r0, #1
 80031c0:	d102      	bne.n	80031c8 <_fstat_r+0x1c>
 80031c2:	682b      	ldr	r3, [r5, #0]
 80031c4:	b103      	cbz	r3, 80031c8 <_fstat_r+0x1c>
 80031c6:	6023      	str	r3, [r4, #0]
 80031c8:	bd38      	pop	{r3, r4, r5, pc}
 80031ca:	bf00      	nop
 80031cc:	20000238 	.word	0x20000238

080031d0 <_isatty_r>:
 80031d0:	b538      	push	{r3, r4, r5, lr}
 80031d2:	2300      	movs	r3, #0
 80031d4:	4d05      	ldr	r5, [pc, #20]	@ (80031ec <_isatty_r+0x1c>)
 80031d6:	4604      	mov	r4, r0
 80031d8:	4608      	mov	r0, r1
 80031da:	602b      	str	r3, [r5, #0]
 80031dc:	f7fd faa3 	bl	8000726 <_isatty>
 80031e0:	1c43      	adds	r3, r0, #1
 80031e2:	d102      	bne.n	80031ea <_isatty_r+0x1a>
 80031e4:	682b      	ldr	r3, [r5, #0]
 80031e6:	b103      	cbz	r3, 80031ea <_isatty_r+0x1a>
 80031e8:	6023      	str	r3, [r4, #0]
 80031ea:	bd38      	pop	{r3, r4, r5, pc}
 80031ec:	20000238 	.word	0x20000238

080031f0 <_sbrk_r>:
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	2300      	movs	r3, #0
 80031f4:	4d05      	ldr	r5, [pc, #20]	@ (800320c <_sbrk_r+0x1c>)
 80031f6:	4604      	mov	r4, r0
 80031f8:	4608      	mov	r0, r1
 80031fa:	602b      	str	r3, [r5, #0]
 80031fc:	f7fd faaa 	bl	8000754 <_sbrk>
 8003200:	1c43      	adds	r3, r0, #1
 8003202:	d102      	bne.n	800320a <_sbrk_r+0x1a>
 8003204:	682b      	ldr	r3, [r5, #0]
 8003206:	b103      	cbz	r3, 800320a <_sbrk_r+0x1a>
 8003208:	6023      	str	r3, [r4, #0]
 800320a:	bd38      	pop	{r3, r4, r5, pc}
 800320c:	20000238 	.word	0x20000238

08003210 <memchr>:
 8003210:	4603      	mov	r3, r0
 8003212:	b510      	push	{r4, lr}
 8003214:	b2c9      	uxtb	r1, r1
 8003216:	4402      	add	r2, r0
 8003218:	4293      	cmp	r3, r2
 800321a:	4618      	mov	r0, r3
 800321c:	d101      	bne.n	8003222 <memchr+0x12>
 800321e:	2000      	movs	r0, #0
 8003220:	e003      	b.n	800322a <memchr+0x1a>
 8003222:	7804      	ldrb	r4, [r0, #0]
 8003224:	3301      	adds	r3, #1
 8003226:	428c      	cmp	r4, r1
 8003228:	d1f6      	bne.n	8003218 <memchr+0x8>
 800322a:	bd10      	pop	{r4, pc}

0800322c <_init>:
 800322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800322e:	bf00      	nop
 8003230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003232:	bc08      	pop	{r3}
 8003234:	469e      	mov	lr, r3
 8003236:	4770      	bx	lr

08003238 <_fini>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	bf00      	nop
 800323c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800323e:	bc08      	pop	{r3}
 8003240:	469e      	mov	lr, r3
 8003242:	4770      	bx	lr
